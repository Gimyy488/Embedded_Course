
Amit_AVR_Work.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c6  00800060  00007704  00007798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800326  00800326  00007a5e  2**0
                  ALLOC
  3 .stab         000097c8  00000000  00000000  00007a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000035c2  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  000147ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000271  00000000  00000000  00014a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002c16  00000000  00000000  00014c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001806  00000000  00000000  00017891  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001564  00000000  00000000  00019097  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  0001a5fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000037b  00000000  00000000  0001a83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c1a  00000000  00000000  0001abb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001b7d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__vector_1>
       8:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__vector_2>
       c:	0c 94 07 14 	jmp	0x280e	; 0x280e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__vector_10>
      2c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f7 e7       	ldi	r31, 0x77	; 119
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 3a 	call	0x7544	; 0x7544 <main>
      8a:	0c 94 80 3b 	jmp	0x7700	; 0x7700 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 49 3b 	jmp	0x7692	; 0x7692 <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <__epilogue_restores__>

00000288 <__lshrdi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__lshrdi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__lshrdi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__lshrdi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	4d 81       	ldd	r20, Y+5	; 0x05
     2da:	5e 81       	ldd	r21, Y+6	; 0x06
     2dc:	6f 81       	ldd	r22, Y+7	; 0x07
     2de:	78 85       	ldd	r23, Y+8	; 0x08
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__lshrdi3+0x7c>
     2e4:	1d 86       	std	Y+13, r1	; 0x0d
     2e6:	1e 86       	std	Y+14, r1	; 0x0e
     2e8:	1f 86       	std	Y+15, r1	; 0x0f
     2ea:	18 8a       	std	Y+16, r1	; 0x10
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__lshrdi3+0x76>
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__lshrdi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__lshrdi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__lshrdi3+0x94>
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__lshrdi3+0x8c>
     320:	8d 87       	std	Y+13, r24	; 0x0d
     322:	9e 87       	std	Y+14, r25	; 0x0e
     324:	af 87       	std	Y+15, r26	; 0x0f
     326:	b8 8b       	std	Y+16, r27	; 0x10
     328:	04 c0       	rjmp	.+8      	; 0x332 <__lshrdi3+0xaa>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	66 1f       	adc	r22, r22
     330:	77 1f       	adc	r23, r23
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__lshrdi3+0xa2>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__lshrdi3+0xc0>
     340:	b6 95       	lsr	r27
     342:	a7 95       	ror	r26
     344:	97 95       	ror	r25
     346:	87 95       	ror	r24
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__lshrdi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	49 87       	std	Y+9, r20	; 0x09
     356:	5a 87       	std	Y+10, r21	; 0x0a
     358:	6b 87       	std	Y+11, r22	; 0x0b
     35a:	7c 87       	std	Y+12, r23	; 0x0c
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__fixunssfsi>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	7b 01       	movw	r14, r22
     390:	8c 01       	movw	r16, r24
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	5f e4       	ldi	r21, 0x4F	; 79
     39a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__gesf2>
     39e:	88 23       	and	r24, r24
     3a0:	8c f0       	brlt	.+34     	; 0x3c4 <__fixunssfsi+0x3e>
     3a2:	c8 01       	movw	r24, r16
     3a4:	b7 01       	movw	r22, r14
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	5f e4       	ldi	r21, 0x4F	; 79
     3ae:	0e 94 3b 03 	call	0x676	; 0x676 <__subsf3>
     3b2:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	20 50       	subi	r18, 0x00	; 0
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	50 48       	sbci	r21, 0x80	; 128
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__fixunssfsi+0x4a>
     3c4:	c8 01       	movw	r24, r16
     3c6:	b7 01       	movw	r22, r14
     3c8:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	b9 01       	movw	r22, r18
     3d2:	ca 01       	movw	r24, r20
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <_fpadd_parts>:
     3de:	a0 e0       	ldi	r26, 0x00	; 0
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 ef       	ldi	r30, 0xF5	; 245
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	0c 94 49 3b 	jmp	0x7692	; 0x7692 <__prologue_saves__>
     3ea:	dc 01       	movw	r26, r24
     3ec:	2b 01       	movw	r4, r22
     3ee:	fa 01       	movw	r30, r20
     3f0:	9c 91       	ld	r25, X
     3f2:	92 30       	cpi	r25, 0x02	; 2
     3f4:	08 f4       	brcc	.+2      	; 0x3f8 <_fpadd_parts+0x1a>
     3f6:	39 c1       	rjmp	.+626    	; 0x66a <_fpadd_parts+0x28c>
     3f8:	eb 01       	movw	r28, r22
     3fa:	88 81       	ld	r24, Y
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	08 f4       	brcc	.+2      	; 0x402 <_fpadd_parts+0x24>
     400:	33 c1       	rjmp	.+614    	; 0x668 <_fpadd_parts+0x28a>
     402:	94 30       	cpi	r25, 0x04	; 4
     404:	69 f4       	brne	.+26     	; 0x420 <_fpadd_parts+0x42>
     406:	84 30       	cpi	r24, 0x04	; 4
     408:	09 f0       	breq	.+2      	; 0x40c <_fpadd_parts+0x2e>
     40a:	2f c1       	rjmp	.+606    	; 0x66a <_fpadd_parts+0x28c>
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	9c 91       	ld	r25, X
     410:	11 97       	sbiw	r26, 0x01	; 1
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	98 17       	cp	r25, r24
     416:	09 f4       	brne	.+2      	; 0x41a <_fpadd_parts+0x3c>
     418:	28 c1       	rjmp	.+592    	; 0x66a <_fpadd_parts+0x28c>
     41a:	a2 e9       	ldi	r26, 0x92	; 146
     41c:	b1 e0       	ldi	r27, 0x01	; 1
     41e:	25 c1       	rjmp	.+586    	; 0x66a <_fpadd_parts+0x28c>
     420:	84 30       	cpi	r24, 0x04	; 4
     422:	09 f4       	brne	.+2      	; 0x426 <_fpadd_parts+0x48>
     424:	21 c1       	rjmp	.+578    	; 0x668 <_fpadd_parts+0x28a>
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	a9 f4       	brne	.+42     	; 0x454 <_fpadd_parts+0x76>
     42a:	92 30       	cpi	r25, 0x02	; 2
     42c:	09 f0       	breq	.+2      	; 0x430 <_fpadd_parts+0x52>
     42e:	1d c1       	rjmp	.+570    	; 0x66a <_fpadd_parts+0x28c>
     430:	9a 01       	movw	r18, r20
     432:	ad 01       	movw	r20, r26
     434:	88 e0       	ldi	r24, 0x08	; 8
     436:	ea 01       	movw	r28, r20
     438:	09 90       	ld	r0, Y+
     43a:	ae 01       	movw	r20, r28
     43c:	e9 01       	movw	r28, r18
     43e:	09 92       	st	Y+, r0
     440:	9e 01       	movw	r18, r28
     442:	81 50       	subi	r24, 0x01	; 1
     444:	c1 f7       	brne	.-16     	; 0x436 <_fpadd_parts+0x58>
     446:	e2 01       	movw	r28, r4
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	11 96       	adiw	r26, 0x01	; 1
     44c:	9c 91       	ld	r25, X
     44e:	89 23       	and	r24, r25
     450:	81 83       	std	Z+1, r24	; 0x01
     452:	08 c1       	rjmp	.+528    	; 0x664 <_fpadd_parts+0x286>
     454:	92 30       	cpi	r25, 0x02	; 2
     456:	09 f4       	brne	.+2      	; 0x45a <_fpadd_parts+0x7c>
     458:	07 c1       	rjmp	.+526    	; 0x668 <_fpadd_parts+0x28a>
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	2d 90       	ld	r2, X+
     45e:	3c 90       	ld	r3, X
     460:	13 97       	sbiw	r26, 0x03	; 3
     462:	eb 01       	movw	r28, r22
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	9b 81       	ldd	r25, Y+3	; 0x03
     468:	14 96       	adiw	r26, 0x04	; 4
     46a:	ad 90       	ld	r10, X+
     46c:	bd 90       	ld	r11, X+
     46e:	cd 90       	ld	r12, X+
     470:	dc 90       	ld	r13, X
     472:	17 97       	sbiw	r26, 0x07	; 7
     474:	ec 80       	ldd	r14, Y+4	; 0x04
     476:	fd 80       	ldd	r15, Y+5	; 0x05
     478:	0e 81       	ldd	r16, Y+6	; 0x06
     47a:	1f 81       	ldd	r17, Y+7	; 0x07
     47c:	91 01       	movw	r18, r2
     47e:	28 1b       	sub	r18, r24
     480:	39 0b       	sbc	r19, r25
     482:	b9 01       	movw	r22, r18
     484:	37 ff       	sbrs	r19, 7
     486:	04 c0       	rjmp	.+8      	; 0x490 <_fpadd_parts+0xb2>
     488:	66 27       	eor	r22, r22
     48a:	77 27       	eor	r23, r23
     48c:	62 1b       	sub	r22, r18
     48e:	73 0b       	sbc	r23, r19
     490:	60 32       	cpi	r22, 0x20	; 32
     492:	71 05       	cpc	r23, r1
     494:	0c f0       	brlt	.+2      	; 0x498 <_fpadd_parts+0xba>
     496:	61 c0       	rjmp	.+194    	; 0x55a <_fpadd_parts+0x17c>
     498:	12 16       	cp	r1, r18
     49a:	13 06       	cpc	r1, r19
     49c:	6c f5       	brge	.+90     	; 0x4f8 <_fpadd_parts+0x11a>
     49e:	37 01       	movw	r6, r14
     4a0:	48 01       	movw	r8, r16
     4a2:	06 2e       	mov	r0, r22
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <_fpadd_parts+0xd0>
     4a6:	96 94       	lsr	r9
     4a8:	87 94       	ror	r8
     4aa:	77 94       	ror	r7
     4ac:	67 94       	ror	r6
     4ae:	0a 94       	dec	r0
     4b0:	d2 f7       	brpl	.-12     	; 0x4a6 <_fpadd_parts+0xc8>
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <_fpadd_parts+0xe6>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	44 1f       	adc	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	6a 95       	dec	r22
     4c6:	d2 f7       	brpl	.-12     	; 0x4bc <_fpadd_parts+0xde>
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	30 40       	sbci	r19, 0x00	; 0
     4cc:	40 40       	sbci	r20, 0x00	; 0
     4ce:	50 40       	sbci	r21, 0x00	; 0
     4d0:	2e 21       	and	r18, r14
     4d2:	3f 21       	and	r19, r15
     4d4:	40 23       	and	r20, r16
     4d6:	51 23       	and	r21, r17
     4d8:	21 15       	cp	r18, r1
     4da:	31 05       	cpc	r19, r1
     4dc:	41 05       	cpc	r20, r1
     4de:	51 05       	cpc	r21, r1
     4e0:	21 f0       	breq	.+8      	; 0x4ea <_fpadd_parts+0x10c>
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	79 01       	movw	r14, r18
     4ec:	8a 01       	movw	r16, r20
     4ee:	e6 28       	or	r14, r6
     4f0:	f7 28       	or	r15, r7
     4f2:	08 29       	or	r16, r8
     4f4:	19 29       	or	r17, r9
     4f6:	3c c0       	rjmp	.+120    	; 0x570 <_fpadd_parts+0x192>
     4f8:	23 2b       	or	r18, r19
     4fa:	d1 f1       	breq	.+116    	; 0x570 <_fpadd_parts+0x192>
     4fc:	26 0e       	add	r2, r22
     4fe:	37 1e       	adc	r3, r23
     500:	35 01       	movw	r6, r10
     502:	46 01       	movw	r8, r12
     504:	06 2e       	mov	r0, r22
     506:	04 c0       	rjmp	.+8      	; 0x510 <_fpadd_parts+0x132>
     508:	96 94       	lsr	r9
     50a:	87 94       	ror	r8
     50c:	77 94       	ror	r7
     50e:	67 94       	ror	r6
     510:	0a 94       	dec	r0
     512:	d2 f7       	brpl	.-12     	; 0x508 <_fpadd_parts+0x12a>
     514:	21 e0       	ldi	r18, 0x01	; 1
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	04 c0       	rjmp	.+8      	; 0x526 <_fpadd_parts+0x148>
     51e:	22 0f       	add	r18, r18
     520:	33 1f       	adc	r19, r19
     522:	44 1f       	adc	r20, r20
     524:	55 1f       	adc	r21, r21
     526:	6a 95       	dec	r22
     528:	d2 f7       	brpl	.-12     	; 0x51e <_fpadd_parts+0x140>
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	30 40       	sbci	r19, 0x00	; 0
     52e:	40 40       	sbci	r20, 0x00	; 0
     530:	50 40       	sbci	r21, 0x00	; 0
     532:	2a 21       	and	r18, r10
     534:	3b 21       	and	r19, r11
     536:	4c 21       	and	r20, r12
     538:	5d 21       	and	r21, r13
     53a:	21 15       	cp	r18, r1
     53c:	31 05       	cpc	r19, r1
     53e:	41 05       	cpc	r20, r1
     540:	51 05       	cpc	r21, r1
     542:	21 f0       	breq	.+8      	; 0x54c <_fpadd_parts+0x16e>
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	59 01       	movw	r10, r18
     54e:	6a 01       	movw	r12, r20
     550:	a6 28       	or	r10, r6
     552:	b7 28       	or	r11, r7
     554:	c8 28       	or	r12, r8
     556:	d9 28       	or	r13, r9
     558:	0b c0       	rjmp	.+22     	; 0x570 <_fpadd_parts+0x192>
     55a:	82 15       	cp	r24, r2
     55c:	93 05       	cpc	r25, r3
     55e:	2c f0       	brlt	.+10     	; 0x56a <_fpadd_parts+0x18c>
     560:	1c 01       	movw	r2, r24
     562:	aa 24       	eor	r10, r10
     564:	bb 24       	eor	r11, r11
     566:	65 01       	movw	r12, r10
     568:	03 c0       	rjmp	.+6      	; 0x570 <_fpadd_parts+0x192>
     56a:	ee 24       	eor	r14, r14
     56c:	ff 24       	eor	r15, r15
     56e:	87 01       	movw	r16, r14
     570:	11 96       	adiw	r26, 0x01	; 1
     572:	9c 91       	ld	r25, X
     574:	d2 01       	movw	r26, r4
     576:	11 96       	adiw	r26, 0x01	; 1
     578:	8c 91       	ld	r24, X
     57a:	98 17       	cp	r25, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <_fpadd_parts+0x1a2>
     57e:	45 c0       	rjmp	.+138    	; 0x60a <_fpadd_parts+0x22c>
     580:	99 23       	and	r25, r25
     582:	39 f0       	breq	.+14     	; 0x592 <_fpadd_parts+0x1b4>
     584:	a8 01       	movw	r20, r16
     586:	97 01       	movw	r18, r14
     588:	2a 19       	sub	r18, r10
     58a:	3b 09       	sbc	r19, r11
     58c:	4c 09       	sbc	r20, r12
     58e:	5d 09       	sbc	r21, r13
     590:	06 c0       	rjmp	.+12     	; 0x59e <_fpadd_parts+0x1c0>
     592:	a6 01       	movw	r20, r12
     594:	95 01       	movw	r18, r10
     596:	2e 19       	sub	r18, r14
     598:	3f 09       	sbc	r19, r15
     59a:	40 0b       	sbc	r20, r16
     59c:	51 0b       	sbc	r21, r17
     59e:	57 fd       	sbrc	r21, 7
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <_fpadd_parts+0x1d4>
     5a2:	11 82       	std	Z+1, r1	; 0x01
     5a4:	33 82       	std	Z+3, r3	; 0x03
     5a6:	22 82       	std	Z+2, r2	; 0x02
     5a8:	24 83       	std	Z+4, r18	; 0x04
     5aa:	35 83       	std	Z+5, r19	; 0x05
     5ac:	46 83       	std	Z+6, r20	; 0x06
     5ae:	57 83       	std	Z+7, r21	; 0x07
     5b0:	1d c0       	rjmp	.+58     	; 0x5ec <_fpadd_parts+0x20e>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	81 83       	std	Z+1, r24	; 0x01
     5b6:	33 82       	std	Z+3, r3	; 0x03
     5b8:	22 82       	std	Z+2, r2	; 0x02
     5ba:	88 27       	eor	r24, r24
     5bc:	99 27       	eor	r25, r25
     5be:	dc 01       	movw	r26, r24
     5c0:	82 1b       	sub	r24, r18
     5c2:	93 0b       	sbc	r25, r19
     5c4:	a4 0b       	sbc	r26, r20
     5c6:	b5 0b       	sbc	r27, r21
     5c8:	84 83       	std	Z+4, r24	; 0x04
     5ca:	95 83       	std	Z+5, r25	; 0x05
     5cc:	a6 83       	std	Z+6, r26	; 0x06
     5ce:	b7 83       	std	Z+7, r27	; 0x07
     5d0:	0d c0       	rjmp	.+26     	; 0x5ec <_fpadd_parts+0x20e>
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	44 1f       	adc	r20, r20
     5d8:	55 1f       	adc	r21, r21
     5da:	24 83       	std	Z+4, r18	; 0x04
     5dc:	35 83       	std	Z+5, r19	; 0x05
     5de:	46 83       	std	Z+6, r20	; 0x06
     5e0:	57 83       	std	Z+7, r21	; 0x07
     5e2:	82 81       	ldd	r24, Z+2	; 0x02
     5e4:	93 81       	ldd	r25, Z+3	; 0x03
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	93 83       	std	Z+3, r25	; 0x03
     5ea:	82 83       	std	Z+2, r24	; 0x02
     5ec:	24 81       	ldd	r18, Z+4	; 0x04
     5ee:	35 81       	ldd	r19, Z+5	; 0x05
     5f0:	46 81       	ldd	r20, Z+6	; 0x06
     5f2:	57 81       	ldd	r21, Z+7	; 0x07
     5f4:	da 01       	movw	r26, r20
     5f6:	c9 01       	movw	r24, r18
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	a1 09       	sbc	r26, r1
     5fc:	b1 09       	sbc	r27, r1
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	9f 4f       	sbci	r25, 0xFF	; 255
     602:	af 4f       	sbci	r26, 0xFF	; 255
     604:	bf 43       	sbci	r27, 0x3F	; 63
     606:	28 f3       	brcs	.-54     	; 0x5d2 <_fpadd_parts+0x1f4>
     608:	0b c0       	rjmp	.+22     	; 0x620 <_fpadd_parts+0x242>
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	33 82       	std	Z+3, r3	; 0x03
     60e:	22 82       	std	Z+2, r2	; 0x02
     610:	ea 0c       	add	r14, r10
     612:	fb 1c       	adc	r15, r11
     614:	0c 1d       	adc	r16, r12
     616:	1d 1d       	adc	r17, r13
     618:	e4 82       	std	Z+4, r14	; 0x04
     61a:	f5 82       	std	Z+5, r15	; 0x05
     61c:	06 83       	std	Z+6, r16	; 0x06
     61e:	17 83       	std	Z+7, r17	; 0x07
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	80 83       	st	Z, r24
     624:	24 81       	ldd	r18, Z+4	; 0x04
     626:	35 81       	ldd	r19, Z+5	; 0x05
     628:	46 81       	ldd	r20, Z+6	; 0x06
     62a:	57 81       	ldd	r21, Z+7	; 0x07
     62c:	57 ff       	sbrs	r21, 7
     62e:	1a c0       	rjmp	.+52     	; 0x664 <_fpadd_parts+0x286>
     630:	c9 01       	movw	r24, r18
     632:	aa 27       	eor	r26, r26
     634:	97 fd       	sbrc	r25, 7
     636:	a0 95       	com	r26
     638:	ba 2f       	mov	r27, r26
     63a:	81 70       	andi	r24, 0x01	; 1
     63c:	90 70       	andi	r25, 0x00	; 0
     63e:	a0 70       	andi	r26, 0x00	; 0
     640:	b0 70       	andi	r27, 0x00	; 0
     642:	56 95       	lsr	r21
     644:	47 95       	ror	r20
     646:	37 95       	ror	r19
     648:	27 95       	ror	r18
     64a:	82 2b       	or	r24, r18
     64c:	93 2b       	or	r25, r19
     64e:	a4 2b       	or	r26, r20
     650:	b5 2b       	or	r27, r21
     652:	84 83       	std	Z+4, r24	; 0x04
     654:	95 83       	std	Z+5, r25	; 0x05
     656:	a6 83       	std	Z+6, r26	; 0x06
     658:	b7 83       	std	Z+7, r27	; 0x07
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	93 83       	std	Z+3, r25	; 0x03
     662:	82 83       	std	Z+2, r24	; 0x02
     664:	df 01       	movw	r26, r30
     666:	01 c0       	rjmp	.+2      	; 0x66a <_fpadd_parts+0x28c>
     668:	d2 01       	movw	r26, r4
     66a:	cd 01       	movw	r24, r26
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	e2 e1       	ldi	r30, 0x12	; 18
     672:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <__epilogue_restores__>

00000676 <__subsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <__prologue_saves__+0x18>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	e9 e0       	ldi	r30, 0x09	; 9
     694:	ee 2e       	mov	r14, r30
     696:	f1 2c       	mov	r15, r1
     698:	ec 0e       	add	r14, r28
     69a:	fd 1e       	adc	r15, r29
     69c:	ce 01       	movw	r24, r28
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	b7 01       	movw	r22, r14
     6a2:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     6a6:	8e 01       	movw	r16, r28
     6a8:	0f 5e       	subi	r16, 0xEF	; 239
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	ce 01       	movw	r24, r28
     6ae:	05 96       	adiw	r24, 0x05	; 5
     6b0:	b8 01       	movw	r22, r16
     6b2:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     6b6:	8a 89       	ldd	r24, Y+18	; 0x12
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	89 27       	eor	r24, r25
     6bc:	8a 8b       	std	Y+18, r24	; 0x12
     6be:	c7 01       	movw	r24, r14
     6c0:	b8 01       	movw	r22, r16
     6c2:	ae 01       	movw	r20, r28
     6c4:	47 5e       	subi	r20, 0xE7	; 231
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
     6c8:	0e 94 ef 01 	call	0x3de	; 0x3de <_fpadd_parts>
     6cc:	0e 94 79 07 	call	0xef2	; 0xef2 <__pack_f>
     6d0:	a0 96       	adiw	r28, 0x20	; 32
     6d2:	e6 e0       	ldi	r30, 0x06	; 6
     6d4:	0c 94 71 3b 	jmp	0x76e2	; 0x76e2 <__epilogue_restores__+0x18>

000006d8 <__addsf3>:
     6d8:	a0 e2       	ldi	r26, 0x20	; 32
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	e2 e7       	ldi	r30, 0x72	; 114
     6de:	f3 e0       	ldi	r31, 0x03	; 3
     6e0:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <__prologue_saves__+0x18>
     6e4:	69 83       	std	Y+1, r22	; 0x01
     6e6:	7a 83       	std	Y+2, r23	; 0x02
     6e8:	8b 83       	std	Y+3, r24	; 0x03
     6ea:	9c 83       	std	Y+4, r25	; 0x04
     6ec:	2d 83       	std	Y+5, r18	; 0x05
     6ee:	3e 83       	std	Y+6, r19	; 0x06
     6f0:	4f 83       	std	Y+7, r20	; 0x07
     6f2:	58 87       	std	Y+8, r21	; 0x08
     6f4:	f9 e0       	ldi	r31, 0x09	; 9
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f1 2c       	mov	r15, r1
     6fa:	ec 0e       	add	r14, r28
     6fc:	fd 1e       	adc	r15, r29
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	b7 01       	movw	r22, r14
     704:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     708:	8e 01       	movw	r16, r28
     70a:	0f 5e       	subi	r16, 0xEF	; 239
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
     70e:	ce 01       	movw	r24, r28
     710:	05 96       	adiw	r24, 0x05	; 5
     712:	b8 01       	movw	r22, r16
     714:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     718:	c7 01       	movw	r24, r14
     71a:	b8 01       	movw	r22, r16
     71c:	ae 01       	movw	r20, r28
     71e:	47 5e       	subi	r20, 0xE7	; 231
     720:	5f 4f       	sbci	r21, 0xFF	; 255
     722:	0e 94 ef 01 	call	0x3de	; 0x3de <_fpadd_parts>
     726:	0e 94 79 07 	call	0xef2	; 0xef2 <__pack_f>
     72a:	a0 96       	adiw	r28, 0x20	; 32
     72c:	e6 e0       	ldi	r30, 0x06	; 6
     72e:	0c 94 71 3b 	jmp	0x76e2	; 0x76e2 <__epilogue_restores__+0x18>

00000732 <__mulsf3>:
     732:	a0 e2       	ldi	r26, 0x20	; 32
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	ef e9       	ldi	r30, 0x9F	; 159
     738:	f3 e0       	ldi	r31, 0x03	; 3
     73a:	0c 94 49 3b 	jmp	0x7692	; 0x7692 <__prologue_saves__>
     73e:	69 83       	std	Y+1, r22	; 0x01
     740:	7a 83       	std	Y+2, r23	; 0x02
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	9c 83       	std	Y+4, r25	; 0x04
     746:	2d 83       	std	Y+5, r18	; 0x05
     748:	3e 83       	std	Y+6, r19	; 0x06
     74a:	4f 83       	std	Y+7, r20	; 0x07
     74c:	58 87       	std	Y+8, r21	; 0x08
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	be 01       	movw	r22, r28
     754:	67 5f       	subi	r22, 0xF7	; 247
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     75c:	ce 01       	movw	r24, r28
     75e:	05 96       	adiw	r24, 0x05	; 5
     760:	be 01       	movw	r22, r28
     762:	6f 5e       	subi	r22, 0xEF	; 239
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     76a:	99 85       	ldd	r25, Y+9	; 0x09
     76c:	92 30       	cpi	r25, 0x02	; 2
     76e:	88 f0       	brcs	.+34     	; 0x792 <__mulsf3+0x60>
     770:	89 89       	ldd	r24, Y+17	; 0x11
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	c8 f0       	brcs	.+50     	; 0x7a8 <__mulsf3+0x76>
     776:	94 30       	cpi	r25, 0x04	; 4
     778:	19 f4       	brne	.+6      	; 0x780 <__mulsf3+0x4e>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	51 f4       	brne	.+20     	; 0x792 <__mulsf3+0x60>
     77e:	04 c0       	rjmp	.+8      	; 0x788 <__mulsf3+0x56>
     780:	84 30       	cpi	r24, 0x04	; 4
     782:	29 f4       	brne	.+10     	; 0x78e <__mulsf3+0x5c>
     784:	92 30       	cpi	r25, 0x02	; 2
     786:	81 f4       	brne	.+32     	; 0x7a8 <__mulsf3+0x76>
     788:	82 e9       	ldi	r24, 0x92	; 146
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	c6 c0       	rjmp	.+396    	; 0x91a <__stack+0xbb>
     78e:	92 30       	cpi	r25, 0x02	; 2
     790:	49 f4       	brne	.+18     	; 0x7a4 <__mulsf3+0x72>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	9a 85       	ldd	r25, Y+10	; 0x0a
     796:	8a 89       	ldd	r24, Y+18	; 0x12
     798:	98 13       	cpse	r25, r24
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	2a 87       	std	Y+10, r18	; 0x0a
     79e:	ce 01       	movw	r24, r28
     7a0:	09 96       	adiw	r24, 0x09	; 9
     7a2:	bb c0       	rjmp	.+374    	; 0x91a <__stack+0xbb>
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	49 f4       	brne	.+18     	; 0x7ba <__mulsf3+0x88>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ac:	8a 89       	ldd	r24, Y+18	; 0x12
     7ae:	98 13       	cpse	r25, r24
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	2a 8b       	std	Y+18, r18	; 0x12
     7b4:	ce 01       	movw	r24, r28
     7b6:	41 96       	adiw	r24, 0x11	; 17
     7b8:	b0 c0       	rjmp	.+352    	; 0x91a <__stack+0xbb>
     7ba:	2d 84       	ldd	r2, Y+13	; 0x0d
     7bc:	3e 84       	ldd	r3, Y+14	; 0x0e
     7be:	4f 84       	ldd	r4, Y+15	; 0x0f
     7c0:	58 88       	ldd	r5, Y+16	; 0x10
     7c2:	6d 88       	ldd	r6, Y+21	; 0x15
     7c4:	7e 88       	ldd	r7, Y+22	; 0x16
     7c6:	8f 88       	ldd	r8, Y+23	; 0x17
     7c8:	98 8c       	ldd	r9, Y+24	; 0x18
     7ca:	ee 24       	eor	r14, r14
     7cc:	ff 24       	eor	r15, r15
     7ce:	87 01       	movw	r16, r14
     7d0:	aa 24       	eor	r10, r10
     7d2:	bb 24       	eor	r11, r11
     7d4:	65 01       	movw	r12, r10
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	e0 e0       	ldi	r30, 0x00	; 0
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	c1 01       	movw	r24, r2
     7e4:	81 70       	andi	r24, 0x01	; 1
     7e6:	90 70       	andi	r25, 0x00	; 0
     7e8:	89 2b       	or	r24, r25
     7ea:	e9 f0       	breq	.+58     	; 0x826 <__mulsf3+0xf4>
     7ec:	e6 0c       	add	r14, r6
     7ee:	f7 1c       	adc	r15, r7
     7f0:	08 1d       	adc	r16, r8
     7f2:	19 1d       	adc	r17, r9
     7f4:	9a 01       	movw	r18, r20
     7f6:	ab 01       	movw	r20, r22
     7f8:	2a 0d       	add	r18, r10
     7fa:	3b 1d       	adc	r19, r11
     7fc:	4c 1d       	adc	r20, r12
     7fe:	5d 1d       	adc	r21, r13
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	a0 e0       	ldi	r26, 0x00	; 0
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	e6 14       	cp	r14, r6
     80a:	f7 04       	cpc	r15, r7
     80c:	08 05       	cpc	r16, r8
     80e:	19 05       	cpc	r17, r9
     810:	20 f4       	brcc	.+8      	; 0x81a <__mulsf3+0xe8>
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	a0 e0       	ldi	r26, 0x00	; 0
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	ba 01       	movw	r22, r20
     81c:	a9 01       	movw	r20, r18
     81e:	48 0f       	add	r20, r24
     820:	59 1f       	adc	r21, r25
     822:	6a 1f       	adc	r22, r26
     824:	7b 1f       	adc	r23, r27
     826:	aa 0c       	add	r10, r10
     828:	bb 1c       	adc	r11, r11
     82a:	cc 1c       	adc	r12, r12
     82c:	dd 1c       	adc	r13, r13
     82e:	97 fe       	sbrs	r9, 7
     830:	08 c0       	rjmp	.+16     	; 0x842 <__mulsf3+0x110>
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	a0 e0       	ldi	r26, 0x00	; 0
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	a8 2a       	or	r10, r24
     83c:	b9 2a       	or	r11, r25
     83e:	ca 2a       	or	r12, r26
     840:	db 2a       	or	r13, r27
     842:	31 96       	adiw	r30, 0x01	; 1
     844:	e0 32       	cpi	r30, 0x20	; 32
     846:	f1 05       	cpc	r31, r1
     848:	49 f0       	breq	.+18     	; 0x85c <__mulsf3+0x12a>
     84a:	66 0c       	add	r6, r6
     84c:	77 1c       	adc	r7, r7
     84e:	88 1c       	adc	r8, r8
     850:	99 1c       	adc	r9, r9
     852:	56 94       	lsr	r5
     854:	47 94       	ror	r4
     856:	37 94       	ror	r3
     858:	27 94       	ror	r2
     85a:	c3 cf       	rjmp	.-122    	; 0x7e2 <__mulsf3+0xb0>
     85c:	fa 85       	ldd	r31, Y+10	; 0x0a
     85e:	ea 89       	ldd	r30, Y+18	; 0x12
     860:	2b 89       	ldd	r18, Y+19	; 0x13
     862:	3c 89       	ldd	r19, Y+20	; 0x14
     864:	8b 85       	ldd	r24, Y+11	; 0x0b
     866:	9c 85       	ldd	r25, Y+12	; 0x0c
     868:	28 0f       	add	r18, r24
     86a:	39 1f       	adc	r19, r25
     86c:	2e 5f       	subi	r18, 0xFE	; 254
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	17 c0       	rjmp	.+46     	; 0x8a0 <__stack+0x41>
     872:	ca 01       	movw	r24, r20
     874:	81 70       	andi	r24, 0x01	; 1
     876:	90 70       	andi	r25, 0x00	; 0
     878:	89 2b       	or	r24, r25
     87a:	61 f0       	breq	.+24     	; 0x894 <__stack+0x35>
     87c:	16 95       	lsr	r17
     87e:	07 95       	ror	r16
     880:	f7 94       	ror	r15
     882:	e7 94       	ror	r14
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e8       	ldi	r27, 0x80	; 128
     88c:	e8 2a       	or	r14, r24
     88e:	f9 2a       	or	r15, r25
     890:	0a 2b       	or	r16, r26
     892:	1b 2b       	or	r17, r27
     894:	76 95       	lsr	r23
     896:	67 95       	ror	r22
     898:	57 95       	ror	r21
     89a:	47 95       	ror	r20
     89c:	2f 5f       	subi	r18, 0xFF	; 255
     89e:	3f 4f       	sbci	r19, 0xFF	; 255
     8a0:	77 fd       	sbrc	r23, 7
     8a2:	e7 cf       	rjmp	.-50     	; 0x872 <__stack+0x13>
     8a4:	0c c0       	rjmp	.+24     	; 0x8be <__stack+0x5f>
     8a6:	44 0f       	add	r20, r20
     8a8:	55 1f       	adc	r21, r21
     8aa:	66 1f       	adc	r22, r22
     8ac:	77 1f       	adc	r23, r23
     8ae:	17 fd       	sbrc	r17, 7
     8b0:	41 60       	ori	r20, 0x01	; 1
     8b2:	ee 0c       	add	r14, r14
     8b4:	ff 1c       	adc	r15, r15
     8b6:	00 1f       	adc	r16, r16
     8b8:	11 1f       	adc	r17, r17
     8ba:	21 50       	subi	r18, 0x01	; 1
     8bc:	30 40       	sbci	r19, 0x00	; 0
     8be:	40 30       	cpi	r20, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	59 07       	cpc	r21, r25
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	69 07       	cpc	r22, r25
     8c8:	90 e4       	ldi	r25, 0x40	; 64
     8ca:	79 07       	cpc	r23, r25
     8cc:	60 f3       	brcs	.-40     	; 0x8a6 <__stack+0x47>
     8ce:	2b 8f       	std	Y+27, r18	; 0x1b
     8d0:	3c 8f       	std	Y+28, r19	; 0x1c
     8d2:	db 01       	movw	r26, r22
     8d4:	ca 01       	movw	r24, r20
     8d6:	8f 77       	andi	r24, 0x7F	; 127
     8d8:	90 70       	andi	r25, 0x00	; 0
     8da:	a0 70       	andi	r26, 0x00	; 0
     8dc:	b0 70       	andi	r27, 0x00	; 0
     8de:	80 34       	cpi	r24, 0x40	; 64
     8e0:	91 05       	cpc	r25, r1
     8e2:	a1 05       	cpc	r26, r1
     8e4:	b1 05       	cpc	r27, r1
     8e6:	61 f4       	brne	.+24     	; 0x900 <__stack+0xa1>
     8e8:	47 fd       	sbrc	r20, 7
     8ea:	0a c0       	rjmp	.+20     	; 0x900 <__stack+0xa1>
     8ec:	e1 14       	cp	r14, r1
     8ee:	f1 04       	cpc	r15, r1
     8f0:	01 05       	cpc	r16, r1
     8f2:	11 05       	cpc	r17, r1
     8f4:	29 f0       	breq	.+10     	; 0x900 <__stack+0xa1>
     8f6:	40 5c       	subi	r20, 0xC0	; 192
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	6f 4f       	sbci	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	40 78       	andi	r20, 0x80	; 128
     900:	1a 8e       	std	Y+26, r1	; 0x1a
     902:	fe 17       	cp	r31, r30
     904:	11 f0       	breq	.+4      	; 0x90a <__stack+0xab>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	8a 8f       	std	Y+26, r24	; 0x1a
     90a:	4d 8f       	std	Y+29, r20	; 0x1d
     90c:	5e 8f       	std	Y+30, r21	; 0x1e
     90e:	6f 8f       	std	Y+31, r22	; 0x1f
     910:	78 a3       	std	Y+32, r23	; 0x20
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 8f       	std	Y+25, r24	; 0x19
     916:	ce 01       	movw	r24, r28
     918:	49 96       	adiw	r24, 0x19	; 25
     91a:	0e 94 79 07 	call	0xef2	; 0xef2 <__pack_f>
     91e:	a0 96       	adiw	r28, 0x20	; 32
     920:	e2 e1       	ldi	r30, 0x12	; 18
     922:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <__epilogue_restores__>

00000926 <__divsf3>:
     926:	a8 e1       	ldi	r26, 0x18	; 24
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e9 e9       	ldi	r30, 0x99	; 153
     92c:	f4 e0       	ldi	r31, 0x04	; 4
     92e:	0c 94 51 3b 	jmp	0x76a2	; 0x76a2 <__prologue_saves__+0x10>
     932:	69 83       	std	Y+1, r22	; 0x01
     934:	7a 83       	std	Y+2, r23	; 0x02
     936:	8b 83       	std	Y+3, r24	; 0x03
     938:	9c 83       	std	Y+4, r25	; 0x04
     93a:	2d 83       	std	Y+5, r18	; 0x05
     93c:	3e 83       	std	Y+6, r19	; 0x06
     93e:	4f 83       	std	Y+7, r20	; 0x07
     940:	58 87       	std	Y+8, r21	; 0x08
     942:	b9 e0       	ldi	r27, 0x09	; 9
     944:	eb 2e       	mov	r14, r27
     946:	f1 2c       	mov	r15, r1
     948:	ec 0e       	add	r14, r28
     94a:	fd 1e       	adc	r15, r29
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	b7 01       	movw	r22, r14
     952:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     956:	8e 01       	movw	r16, r28
     958:	0f 5e       	subi	r16, 0xEF	; 239
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	ce 01       	movw	r24, r28
     95e:	05 96       	adiw	r24, 0x05	; 5
     960:	b8 01       	movw	r22, r16
     962:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     966:	29 85       	ldd	r18, Y+9	; 0x09
     968:	22 30       	cpi	r18, 0x02	; 2
     96a:	08 f4       	brcc	.+2      	; 0x96e <__divsf3+0x48>
     96c:	7e c0       	rjmp	.+252    	; 0xa6a <__divsf3+0x144>
     96e:	39 89       	ldd	r19, Y+17	; 0x11
     970:	32 30       	cpi	r19, 0x02	; 2
     972:	10 f4       	brcc	.+4      	; 0x978 <__divsf3+0x52>
     974:	b8 01       	movw	r22, r16
     976:	7c c0       	rjmp	.+248    	; 0xa70 <__divsf3+0x14a>
     978:	8a 85       	ldd	r24, Y+10	; 0x0a
     97a:	9a 89       	ldd	r25, Y+18	; 0x12
     97c:	89 27       	eor	r24, r25
     97e:	8a 87       	std	Y+10, r24	; 0x0a
     980:	24 30       	cpi	r18, 0x04	; 4
     982:	11 f0       	breq	.+4      	; 0x988 <__divsf3+0x62>
     984:	22 30       	cpi	r18, 0x02	; 2
     986:	31 f4       	brne	.+12     	; 0x994 <__divsf3+0x6e>
     988:	23 17       	cp	r18, r19
     98a:	09 f0       	breq	.+2      	; 0x98e <__divsf3+0x68>
     98c:	6e c0       	rjmp	.+220    	; 0xa6a <__divsf3+0x144>
     98e:	62 e9       	ldi	r22, 0x92	; 146
     990:	71 e0       	ldi	r23, 0x01	; 1
     992:	6e c0       	rjmp	.+220    	; 0xa70 <__divsf3+0x14a>
     994:	34 30       	cpi	r19, 0x04	; 4
     996:	39 f4       	brne	.+14     	; 0x9a6 <__divsf3+0x80>
     998:	1d 86       	std	Y+13, r1	; 0x0d
     99a:	1e 86       	std	Y+14, r1	; 0x0e
     99c:	1f 86       	std	Y+15, r1	; 0x0f
     99e:	18 8a       	std	Y+16, r1	; 0x10
     9a0:	1c 86       	std	Y+12, r1	; 0x0c
     9a2:	1b 86       	std	Y+11, r1	; 0x0b
     9a4:	04 c0       	rjmp	.+8      	; 0x9ae <__divsf3+0x88>
     9a6:	32 30       	cpi	r19, 0x02	; 2
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <__divsf3+0x8c>
     9aa:	84 e0       	ldi	r24, 0x04	; 4
     9ac:	89 87       	std	Y+9, r24	; 0x09
     9ae:	b7 01       	movw	r22, r14
     9b0:	5f c0       	rjmp	.+190    	; 0xa70 <__divsf3+0x14a>
     9b2:	2b 85       	ldd	r18, Y+11	; 0x0b
     9b4:	3c 85       	ldd	r19, Y+12	; 0x0c
     9b6:	8b 89       	ldd	r24, Y+19	; 0x13
     9b8:	9c 89       	ldd	r25, Y+20	; 0x14
     9ba:	28 1b       	sub	r18, r24
     9bc:	39 0b       	sbc	r19, r25
     9be:	3c 87       	std	Y+12, r19	; 0x0c
     9c0:	2b 87       	std	Y+11, r18	; 0x0b
     9c2:	ed 84       	ldd	r14, Y+13	; 0x0d
     9c4:	fe 84       	ldd	r15, Y+14	; 0x0e
     9c6:	0f 85       	ldd	r16, Y+15	; 0x0f
     9c8:	18 89       	ldd	r17, Y+16	; 0x10
     9ca:	ad 88       	ldd	r10, Y+21	; 0x15
     9cc:	be 88       	ldd	r11, Y+22	; 0x16
     9ce:	cf 88       	ldd	r12, Y+23	; 0x17
     9d0:	d8 8c       	ldd	r13, Y+24	; 0x18
     9d2:	ea 14       	cp	r14, r10
     9d4:	fb 04       	cpc	r15, r11
     9d6:	0c 05       	cpc	r16, r12
     9d8:	1d 05       	cpc	r17, r13
     9da:	40 f4       	brcc	.+16     	; 0x9ec <__divsf3+0xc6>
     9dc:	ee 0c       	add	r14, r14
     9de:	ff 1c       	adc	r15, r15
     9e0:	00 1f       	adc	r16, r16
     9e2:	11 1f       	adc	r17, r17
     9e4:	21 50       	subi	r18, 0x01	; 1
     9e6:	30 40       	sbci	r19, 0x00	; 0
     9e8:	3c 87       	std	Y+12, r19	; 0x0c
     9ea:	2b 87       	std	Y+11, r18	; 0x0b
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e4       	ldi	r27, 0x40	; 64
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	ea 14       	cp	r14, r10
     a02:	fb 04       	cpc	r15, r11
     a04:	0c 05       	cpc	r16, r12
     a06:	1d 05       	cpc	r17, r13
     a08:	40 f0       	brcs	.+16     	; 0xa1a <__divsf3+0xf4>
     a0a:	28 2b       	or	r18, r24
     a0c:	39 2b       	or	r19, r25
     a0e:	4a 2b       	or	r20, r26
     a10:	5b 2b       	or	r21, r27
     a12:	ea 18       	sub	r14, r10
     a14:	fb 08       	sbc	r15, r11
     a16:	0c 09       	sbc	r16, r12
     a18:	1d 09       	sbc	r17, r13
     a1a:	b6 95       	lsr	r27
     a1c:	a7 95       	ror	r26
     a1e:	97 95       	ror	r25
     a20:	87 95       	ror	r24
     a22:	ee 0c       	add	r14, r14
     a24:	ff 1c       	adc	r15, r15
     a26:	00 1f       	adc	r16, r16
     a28:	11 1f       	adc	r17, r17
     a2a:	6f 5f       	subi	r22, 0xFF	; 255
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	6f 31       	cpi	r22, 0x1F	; 31
     a30:	71 05       	cpc	r23, r1
     a32:	31 f7       	brne	.-52     	; 0xa00 <__divsf3+0xda>
     a34:	da 01       	movw	r26, r20
     a36:	c9 01       	movw	r24, r18
     a38:	8f 77       	andi	r24, 0x7F	; 127
     a3a:	90 70       	andi	r25, 0x00	; 0
     a3c:	a0 70       	andi	r26, 0x00	; 0
     a3e:	b0 70       	andi	r27, 0x00	; 0
     a40:	80 34       	cpi	r24, 0x40	; 64
     a42:	91 05       	cpc	r25, r1
     a44:	a1 05       	cpc	r26, r1
     a46:	b1 05       	cpc	r27, r1
     a48:	61 f4       	brne	.+24     	; 0xa62 <__divsf3+0x13c>
     a4a:	27 fd       	sbrc	r18, 7
     a4c:	0a c0       	rjmp	.+20     	; 0xa62 <__divsf3+0x13c>
     a4e:	e1 14       	cp	r14, r1
     a50:	f1 04       	cpc	r15, r1
     a52:	01 05       	cpc	r16, r1
     a54:	11 05       	cpc	r17, r1
     a56:	29 f0       	breq	.+10     	; 0xa62 <__divsf3+0x13c>
     a58:	20 5c       	subi	r18, 0xC0	; 192
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	4f 4f       	sbci	r20, 0xFF	; 255
     a5e:	5f 4f       	sbci	r21, 0xFF	; 255
     a60:	20 78       	andi	r18, 0x80	; 128
     a62:	2d 87       	std	Y+13, r18	; 0x0d
     a64:	3e 87       	std	Y+14, r19	; 0x0e
     a66:	4f 87       	std	Y+15, r20	; 0x0f
     a68:	58 8b       	std	Y+16, r21	; 0x10
     a6a:	be 01       	movw	r22, r28
     a6c:	67 5f       	subi	r22, 0xF7	; 247
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	cb 01       	movw	r24, r22
     a72:	0e 94 79 07 	call	0xef2	; 0xef2 <__pack_f>
     a76:	68 96       	adiw	r28, 0x18	; 24
     a78:	ea e0       	ldi	r30, 0x0A	; 10
     a7a:	0c 94 6d 3b 	jmp	0x76da	; 0x76da <__epilogue_restores__+0x10>

00000a7e <__eqsf2>:
     a7e:	a8 e1       	ldi	r26, 0x18	; 24
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e5 e4       	ldi	r30, 0x45	; 69
     a84:	f5 e0       	ldi	r31, 0x05	; 5
     a86:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <__prologue_saves__+0x18>
     a8a:	69 83       	std	Y+1, r22	; 0x01
     a8c:	7a 83       	std	Y+2, r23	; 0x02
     a8e:	8b 83       	std	Y+3, r24	; 0x03
     a90:	9c 83       	std	Y+4, r25	; 0x04
     a92:	2d 83       	std	Y+5, r18	; 0x05
     a94:	3e 83       	std	Y+6, r19	; 0x06
     a96:	4f 83       	std	Y+7, r20	; 0x07
     a98:	58 87       	std	Y+8, r21	; 0x08
     a9a:	89 e0       	ldi	r24, 0x09	; 9
     a9c:	e8 2e       	mov	r14, r24
     a9e:	f1 2c       	mov	r15, r1
     aa0:	ec 0e       	add	r14, r28
     aa2:	fd 1e       	adc	r15, r29
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	b7 01       	movw	r22, r14
     aaa:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     aae:	8e 01       	movw	r16, r28
     ab0:	0f 5e       	subi	r16, 0xEF	; 239
     ab2:	1f 4f       	sbci	r17, 0xFF	; 255
     ab4:	ce 01       	movw	r24, r28
     ab6:	05 96       	adiw	r24, 0x05	; 5
     ab8:	b8 01       	movw	r22, r16
     aba:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     abe:	89 85       	ldd	r24, Y+9	; 0x09
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	40 f0       	brcs	.+16     	; 0xad4 <__eqsf2+0x56>
     ac4:	89 89       	ldd	r24, Y+17	; 0x11
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	28 f0       	brcs	.+10     	; 0xad4 <__eqsf2+0x56>
     aca:	c7 01       	movw	r24, r14
     acc:	b8 01       	movw	r22, r16
     ace:	0e 94 c6 08 	call	0x118c	; 0x118c <__fpcmp_parts_f>
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <__eqsf2+0x58>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	68 96       	adiw	r28, 0x18	; 24
     ad8:	e6 e0       	ldi	r30, 0x06	; 6
     ada:	0c 94 71 3b 	jmp	0x76e2	; 0x76e2 <__epilogue_restores__+0x18>

00000ade <__gtsf2>:
     ade:	a8 e1       	ldi	r26, 0x18	; 24
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	e5 e7       	ldi	r30, 0x75	; 117
     ae4:	f5 e0       	ldi	r31, 0x05	; 5
     ae6:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <__prologue_saves__+0x18>
     aea:	69 83       	std	Y+1, r22	; 0x01
     aec:	7a 83       	std	Y+2, r23	; 0x02
     aee:	8b 83       	std	Y+3, r24	; 0x03
     af0:	9c 83       	std	Y+4, r25	; 0x04
     af2:	2d 83       	std	Y+5, r18	; 0x05
     af4:	3e 83       	std	Y+6, r19	; 0x06
     af6:	4f 83       	std	Y+7, r20	; 0x07
     af8:	58 87       	std	Y+8, r21	; 0x08
     afa:	89 e0       	ldi	r24, 0x09	; 9
     afc:	e8 2e       	mov	r14, r24
     afe:	f1 2c       	mov	r15, r1
     b00:	ec 0e       	add	r14, r28
     b02:	fd 1e       	adc	r15, r29
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	b7 01       	movw	r22, r14
     b0a:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     b0e:	8e 01       	movw	r16, r28
     b10:	0f 5e       	subi	r16, 0xEF	; 239
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	ce 01       	movw	r24, r28
     b16:	05 96       	adiw	r24, 0x05	; 5
     b18:	b8 01       	movw	r22, r16
     b1a:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	40 f0       	brcs	.+16     	; 0xb34 <__gtsf2+0x56>
     b24:	89 89       	ldd	r24, Y+17	; 0x11
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	28 f0       	brcs	.+10     	; 0xb34 <__gtsf2+0x56>
     b2a:	c7 01       	movw	r24, r14
     b2c:	b8 01       	movw	r22, r16
     b2e:	0e 94 c6 08 	call	0x118c	; 0x118c <__fpcmp_parts_f>
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <__gtsf2+0x58>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	68 96       	adiw	r28, 0x18	; 24
     b38:	e6 e0       	ldi	r30, 0x06	; 6
     b3a:	0c 94 71 3b 	jmp	0x76e2	; 0x76e2 <__epilogue_restores__+0x18>

00000b3e <__gesf2>:
     b3e:	a8 e1       	ldi	r26, 0x18	; 24
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e5 ea       	ldi	r30, 0xA5	; 165
     b44:	f5 e0       	ldi	r31, 0x05	; 5
     b46:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <__prologue_saves__+0x18>
     b4a:	69 83       	std	Y+1, r22	; 0x01
     b4c:	7a 83       	std	Y+2, r23	; 0x02
     b4e:	8b 83       	std	Y+3, r24	; 0x03
     b50:	9c 83       	std	Y+4, r25	; 0x04
     b52:	2d 83       	std	Y+5, r18	; 0x05
     b54:	3e 83       	std	Y+6, r19	; 0x06
     b56:	4f 83       	std	Y+7, r20	; 0x07
     b58:	58 87       	std	Y+8, r21	; 0x08
     b5a:	89 e0       	ldi	r24, 0x09	; 9
     b5c:	e8 2e       	mov	r14, r24
     b5e:	f1 2c       	mov	r15, r1
     b60:	ec 0e       	add	r14, r28
     b62:	fd 1e       	adc	r15, r29
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	b7 01       	movw	r22, r14
     b6a:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     b6e:	8e 01       	movw	r16, r28
     b70:	0f 5e       	subi	r16, 0xEF	; 239
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	ce 01       	movw	r24, r28
     b76:	05 96       	adiw	r24, 0x05	; 5
     b78:	b8 01       	movw	r22, r16
     b7a:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     b7e:	89 85       	ldd	r24, Y+9	; 0x09
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	40 f0       	brcs	.+16     	; 0xb94 <__gesf2+0x56>
     b84:	89 89       	ldd	r24, Y+17	; 0x11
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	28 f0       	brcs	.+10     	; 0xb94 <__gesf2+0x56>
     b8a:	c7 01       	movw	r24, r14
     b8c:	b8 01       	movw	r22, r16
     b8e:	0e 94 c6 08 	call	0x118c	; 0x118c <__fpcmp_parts_f>
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <__gesf2+0x58>
     b94:	8f ef       	ldi	r24, 0xFF	; 255
     b96:	68 96       	adiw	r28, 0x18	; 24
     b98:	e6 e0       	ldi	r30, 0x06	; 6
     b9a:	0c 94 71 3b 	jmp	0x76e2	; 0x76e2 <__epilogue_restores__+0x18>

00000b9e <__ltsf2>:
     b9e:	a8 e1       	ldi	r26, 0x18	; 24
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <__prologue_saves__+0x18>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	2d 83       	std	Y+5, r18	; 0x05
     bb4:	3e 83       	std	Y+6, r19	; 0x06
     bb6:	4f 83       	std	Y+7, r20	; 0x07
     bb8:	58 87       	std	Y+8, r21	; 0x08
     bba:	89 e0       	ldi	r24, 0x09	; 9
     bbc:	e8 2e       	mov	r14, r24
     bbe:	f1 2c       	mov	r15, r1
     bc0:	ec 0e       	add	r14, r28
     bc2:	fd 1e       	adc	r15, r29
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	b7 01       	movw	r22, r14
     bca:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     bce:	8e 01       	movw	r16, r28
     bd0:	0f 5e       	subi	r16, 0xEF	; 239
     bd2:	1f 4f       	sbci	r17, 0xFF	; 255
     bd4:	ce 01       	movw	r24, r28
     bd6:	05 96       	adiw	r24, 0x05	; 5
     bd8:	b8 01       	movw	r22, r16
     bda:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     bde:	89 85       	ldd	r24, Y+9	; 0x09
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	40 f0       	brcs	.+16     	; 0xbf4 <__ltsf2+0x56>
     be4:	89 89       	ldd	r24, Y+17	; 0x11
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	28 f0       	brcs	.+10     	; 0xbf4 <__ltsf2+0x56>
     bea:	c7 01       	movw	r24, r14
     bec:	b8 01       	movw	r22, r16
     bee:	0e 94 c6 08 	call	0x118c	; 0x118c <__fpcmp_parts_f>
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <__ltsf2+0x58>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	68 96       	adiw	r28, 0x18	; 24
     bf8:	e6 e0       	ldi	r30, 0x06	; 6
     bfa:	0c 94 71 3b 	jmp	0x76e2	; 0x76e2 <__epilogue_restores__+0x18>

00000bfe <__floatsisf>:
     bfe:	a8 e0       	ldi	r26, 0x08	; 8
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e5 e0       	ldi	r30, 0x05	; 5
     c04:	f6 e0       	ldi	r31, 0x06	; 6
     c06:	0c 94 52 3b 	jmp	0x76a4	; 0x76a4 <__prologue_saves__+0x12>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	da 01       	movw	r26, r20
     c14:	c9 01       	movw	r24, r18
     c16:	88 27       	eor	r24, r24
     c18:	b7 fd       	sbrc	r27, 7
     c1a:	83 95       	inc	r24
     c1c:	99 27       	eor	r25, r25
     c1e:	aa 27       	eor	r26, r26
     c20:	bb 27       	eor	r27, r27
     c22:	b8 2e       	mov	r11, r24
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	41 05       	cpc	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	19 f4       	brne	.+6      	; 0xc34 <__floatsisf+0x36>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	3a c0       	rjmp	.+116    	; 0xca8 <__floatsisf+0xaa>
     c34:	88 23       	and	r24, r24
     c36:	a9 f0       	breq	.+42     	; 0xc62 <__floatsisf+0x64>
     c38:	20 30       	cpi	r18, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	38 07       	cpc	r19, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	48 07       	cpc	r20, r24
     c42:	80 e8       	ldi	r24, 0x80	; 128
     c44:	58 07       	cpc	r21, r24
     c46:	29 f4       	brne	.+10     	; 0xc52 <__floatsisf+0x54>
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	9f ec       	ldi	r25, 0xCF	; 207
     c50:	30 c0       	rjmp	.+96     	; 0xcb2 <__floatsisf+0xb4>
     c52:	ee 24       	eor	r14, r14
     c54:	ff 24       	eor	r15, r15
     c56:	87 01       	movw	r16, r14
     c58:	e2 1a       	sub	r14, r18
     c5a:	f3 0a       	sbc	r15, r19
     c5c:	04 0b       	sbc	r16, r20
     c5e:	15 0b       	sbc	r17, r21
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <__floatsisf+0x68>
     c62:	79 01       	movw	r14, r18
     c64:	8a 01       	movw	r16, r20
     c66:	8e e1       	ldi	r24, 0x1E	; 30
     c68:	c8 2e       	mov	r12, r24
     c6a:	d1 2c       	mov	r13, r1
     c6c:	dc 82       	std	Y+4, r13	; 0x04
     c6e:	cb 82       	std	Y+3, r12	; 0x03
     c70:	ed 82       	std	Y+5, r14	; 0x05
     c72:	fe 82       	std	Y+6, r15	; 0x06
     c74:	0f 83       	std	Y+7, r16	; 0x07
     c76:	18 87       	std	Y+8, r17	; 0x08
     c78:	c8 01       	movw	r24, r16
     c7a:	b7 01       	movw	r22, r14
     c7c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__clzsi2>
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	18 16       	cp	r1, r24
     c84:	19 06       	cpc	r1, r25
     c86:	84 f4       	brge	.+32     	; 0xca8 <__floatsisf+0xaa>
     c88:	08 2e       	mov	r0, r24
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__floatsisf+0x96>
     c8c:	ee 0c       	add	r14, r14
     c8e:	ff 1c       	adc	r15, r15
     c90:	00 1f       	adc	r16, r16
     c92:	11 1f       	adc	r17, r17
     c94:	0a 94       	dec	r0
     c96:	d2 f7       	brpl	.-12     	; 0xc8c <__floatsisf+0x8e>
     c98:	ed 82       	std	Y+5, r14	; 0x05
     c9a:	fe 82       	std	Y+6, r15	; 0x06
     c9c:	0f 83       	std	Y+7, r16	; 0x07
     c9e:	18 87       	std	Y+8, r17	; 0x08
     ca0:	c8 1a       	sub	r12, r24
     ca2:	d9 0a       	sbc	r13, r25
     ca4:	dc 82       	std	Y+4, r13	; 0x04
     ca6:	cb 82       	std	Y+3, r12	; 0x03
     ca8:	ba 82       	std	Y+2, r11	; 0x02
     caa:	ce 01       	movw	r24, r28
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	0e 94 79 07 	call	0xef2	; 0xef2 <__pack_f>
     cb2:	28 96       	adiw	r28, 0x08	; 8
     cb4:	e9 e0       	ldi	r30, 0x09	; 9
     cb6:	0c 94 6e 3b 	jmp	0x76dc	; 0x76dc <__epilogue_restores__+0x12>

00000cba <__fixsfsi>:
     cba:	ac e0       	ldi	r26, 0x0C	; 12
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e3 e6       	ldi	r30, 0x63	; 99
     cc0:	f6 e0       	ldi	r31, 0x06	; 6
     cc2:	0c 94 59 3b 	jmp	0x76b2	; 0x76b2 <__prologue_saves__+0x20>
     cc6:	69 83       	std	Y+1, r22	; 0x01
     cc8:	7a 83       	std	Y+2, r23	; 0x02
     cca:	8b 83       	std	Y+3, r24	; 0x03
     ccc:	9c 83       	std	Y+4, r25	; 0x04
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	be 01       	movw	r22, r28
     cd4:	6b 5f       	subi	r22, 0xFB	; 251
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	0e 94 4e 08 	call	0x109c	; 0x109c <__unpack_f>
     cdc:	8d 81       	ldd	r24, Y+5	; 0x05
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	61 f1       	breq	.+88     	; 0xd3a <__fixsfsi+0x80>
     ce2:	82 30       	cpi	r24, 0x02	; 2
     ce4:	50 f1       	brcs	.+84     	; 0xd3a <__fixsfsi+0x80>
     ce6:	84 30       	cpi	r24, 0x04	; 4
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <__fixsfsi+0x38>
     cea:	8e 81       	ldd	r24, Y+6	; 0x06
     cec:	88 23       	and	r24, r24
     cee:	51 f1       	breq	.+84     	; 0xd44 <__fixsfsi+0x8a>
     cf0:	2e c0       	rjmp	.+92     	; 0xd4e <__fixsfsi+0x94>
     cf2:	2f 81       	ldd	r18, Y+7	; 0x07
     cf4:	38 85       	ldd	r19, Y+8	; 0x08
     cf6:	37 fd       	sbrc	r19, 7
     cf8:	20 c0       	rjmp	.+64     	; 0xd3a <__fixsfsi+0x80>
     cfa:	6e 81       	ldd	r22, Y+6	; 0x06
     cfc:	2f 31       	cpi	r18, 0x1F	; 31
     cfe:	31 05       	cpc	r19, r1
     d00:	1c f0       	brlt	.+6      	; 0xd08 <__fixsfsi+0x4e>
     d02:	66 23       	and	r22, r22
     d04:	f9 f0       	breq	.+62     	; 0xd44 <__fixsfsi+0x8a>
     d06:	23 c0       	rjmp	.+70     	; 0xd4e <__fixsfsi+0x94>
     d08:	8e e1       	ldi	r24, 0x1E	; 30
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	82 1b       	sub	r24, r18
     d0e:	93 0b       	sbc	r25, r19
     d10:	29 85       	ldd	r18, Y+9	; 0x09
     d12:	3a 85       	ldd	r19, Y+10	; 0x0a
     d14:	4b 85       	ldd	r20, Y+11	; 0x0b
     d16:	5c 85       	ldd	r21, Y+12	; 0x0c
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__fixsfsi+0x68>
     d1a:	56 95       	lsr	r21
     d1c:	47 95       	ror	r20
     d1e:	37 95       	ror	r19
     d20:	27 95       	ror	r18
     d22:	8a 95       	dec	r24
     d24:	d2 f7       	brpl	.-12     	; 0xd1a <__fixsfsi+0x60>
     d26:	66 23       	and	r22, r22
     d28:	b1 f0       	breq	.+44     	; 0xd56 <__fixsfsi+0x9c>
     d2a:	50 95       	com	r21
     d2c:	40 95       	com	r20
     d2e:	30 95       	com	r19
     d30:	21 95       	neg	r18
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	4f 4f       	sbci	r20, 0xFF	; 255
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	0e c0       	rjmp	.+28     	; 0xd56 <__fixsfsi+0x9c>
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <__fixsfsi+0x9c>
     d44:	2f ef       	ldi	r18, 0xFF	; 255
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f ef       	ldi	r20, 0xFF	; 255
     d4a:	5f e7       	ldi	r21, 0x7F	; 127
     d4c:	04 c0       	rjmp	.+8      	; 0xd56 <__fixsfsi+0x9c>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e8       	ldi	r21, 0x80	; 128
     d56:	b9 01       	movw	r22, r18
     d58:	ca 01       	movw	r24, r20
     d5a:	2c 96       	adiw	r28, 0x0c	; 12
     d5c:	e2 e0       	ldi	r30, 0x02	; 2
     d5e:	0c 94 75 3b 	jmp	0x76ea	; 0x76ea <__epilogue_restores__+0x20>

00000d62 <__floatunsisf>:
     d62:	a8 e0       	ldi	r26, 0x08	; 8
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 eb       	ldi	r30, 0xB7	; 183
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	0c 94 51 3b 	jmp	0x76a2	; 0x76a2 <__prologue_saves__+0x10>
     d6e:	7b 01       	movw	r14, r22
     d70:	8c 01       	movw	r16, r24
     d72:	61 15       	cp	r22, r1
     d74:	71 05       	cpc	r23, r1
     d76:	81 05       	cpc	r24, r1
     d78:	91 05       	cpc	r25, r1
     d7a:	19 f4       	brne	.+6      	; 0xd82 <__floatunsisf+0x20>
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	60 c0       	rjmp	.+192    	; 0xe42 <__floatunsisf+0xe0>
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	8e e1       	ldi	r24, 0x1E	; 30
     d88:	c8 2e       	mov	r12, r24
     d8a:	d1 2c       	mov	r13, r1
     d8c:	dc 82       	std	Y+4, r13	; 0x04
     d8e:	cb 82       	std	Y+3, r12	; 0x03
     d90:	ed 82       	std	Y+5, r14	; 0x05
     d92:	fe 82       	std	Y+6, r15	; 0x06
     d94:	0f 83       	std	Y+7, r16	; 0x07
     d96:	18 87       	std	Y+8, r17	; 0x08
     d98:	c8 01       	movw	r24, r16
     d9a:	b7 01       	movw	r22, r14
     d9c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__clzsi2>
     da0:	fc 01       	movw	r30, r24
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	f7 ff       	sbrs	r31, 7
     da6:	3b c0       	rjmp	.+118    	; 0xe1e <__floatunsisf+0xbc>
     da8:	22 27       	eor	r18, r18
     daa:	33 27       	eor	r19, r19
     dac:	2e 1b       	sub	r18, r30
     dae:	3f 0b       	sbc	r19, r31
     db0:	57 01       	movw	r10, r14
     db2:	68 01       	movw	r12, r16
     db4:	02 2e       	mov	r0, r18
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <__floatunsisf+0x5e>
     db8:	d6 94       	lsr	r13
     dba:	c7 94       	ror	r12
     dbc:	b7 94       	ror	r11
     dbe:	a7 94       	ror	r10
     dc0:	0a 94       	dec	r0
     dc2:	d2 f7       	brpl	.-12     	; 0xdb8 <__floatunsisf+0x56>
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a0 e0       	ldi	r26, 0x00	; 0
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <__floatunsisf+0x7c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	aa 1f       	adc	r26, r26
     ddc:	bb 1f       	adc	r27, r27
     dde:	2a 95       	dec	r18
     de0:	d2 f7       	brpl	.-12     	; 0xdd6 <__floatunsisf+0x74>
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	a1 09       	sbc	r26, r1
     de6:	b1 09       	sbc	r27, r1
     de8:	8e 21       	and	r24, r14
     dea:	9f 21       	and	r25, r15
     dec:	a0 23       	and	r26, r16
     dee:	b1 23       	and	r27, r17
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	a1 05       	cpc	r26, r1
     df4:	b1 05       	cpc	r27, r1
     df6:	21 f0       	breq	.+8      	; 0xe00 <__floatunsisf+0x9e>
     df8:	41 e0       	ldi	r20, 0x01	; 1
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	4a 29       	or	r20, r10
     e02:	5b 29       	or	r21, r11
     e04:	6c 29       	or	r22, r12
     e06:	7d 29       	or	r23, r13
     e08:	4d 83       	std	Y+5, r20	; 0x05
     e0a:	5e 83       	std	Y+6, r21	; 0x06
     e0c:	6f 83       	std	Y+7, r22	; 0x07
     e0e:	78 87       	std	Y+8, r23	; 0x08
     e10:	8e e1       	ldi	r24, 0x1E	; 30
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	8e 1b       	sub	r24, r30
     e16:	9f 0b       	sbc	r25, r31
     e18:	9c 83       	std	Y+4, r25	; 0x04
     e1a:	8b 83       	std	Y+3, r24	; 0x03
     e1c:	12 c0       	rjmp	.+36     	; 0xe42 <__floatunsisf+0xe0>
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	81 f0       	breq	.+32     	; 0xe42 <__floatunsisf+0xe0>
     e22:	0e 2e       	mov	r0, r30
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <__floatunsisf+0xcc>
     e26:	ee 0c       	add	r14, r14
     e28:	ff 1c       	adc	r15, r15
     e2a:	00 1f       	adc	r16, r16
     e2c:	11 1f       	adc	r17, r17
     e2e:	0a 94       	dec	r0
     e30:	d2 f7       	brpl	.-12     	; 0xe26 <__floatunsisf+0xc4>
     e32:	ed 82       	std	Y+5, r14	; 0x05
     e34:	fe 82       	std	Y+6, r15	; 0x06
     e36:	0f 83       	std	Y+7, r16	; 0x07
     e38:	18 87       	std	Y+8, r17	; 0x08
     e3a:	ce 1a       	sub	r12, r30
     e3c:	df 0a       	sbc	r13, r31
     e3e:	dc 82       	std	Y+4, r13	; 0x04
     e40:	cb 82       	std	Y+3, r12	; 0x03
     e42:	1a 82       	std	Y+2, r1	; 0x02
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	0e 94 79 07 	call	0xef2	; 0xef2 <__pack_f>
     e4c:	28 96       	adiw	r28, 0x08	; 8
     e4e:	ea e0       	ldi	r30, 0x0A	; 10
     e50:	0c 94 6d 3b 	jmp	0x76da	; 0x76da <__epilogue_restores__+0x10>

00000e54 <__clzsi2>:
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	7b 01       	movw	r14, r22
     e5e:	8c 01       	movw	r16, r24
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	e8 16       	cp	r14, r24
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	f8 06       	cpc	r15, r24
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	08 07       	cpc	r16, r24
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	18 07       	cpc	r17, r24
     e70:	88 f4       	brcc	.+34     	; 0xe94 <__clzsi2+0x40>
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	e8 16       	cp	r14, r24
     e76:	f1 04       	cpc	r15, r1
     e78:	01 05       	cpc	r16, r1
     e7a:	11 05       	cpc	r17, r1
     e7c:	31 f0       	breq	.+12     	; 0xe8a <__clzsi2+0x36>
     e7e:	28 f0       	brcs	.+10     	; 0xe8a <__clzsi2+0x36>
     e80:	88 e0       	ldi	r24, 0x08	; 8
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	17 c0       	rjmp	.+46     	; 0xeb8 <__clzsi2+0x64>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a0 e0       	ldi	r26, 0x00	; 0
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	12 c0       	rjmp	.+36     	; 0xeb8 <__clzsi2+0x64>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	e8 16       	cp	r14, r24
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	f8 06       	cpc	r15, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	08 07       	cpc	r16, r24
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	18 07       	cpc	r17, r24
     ea4:	28 f0       	brcs	.+10     	; 0xeb0 <__clzsi2+0x5c>
     ea6:	88 e1       	ldi	r24, 0x18	; 24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a0 e0       	ldi	r26, 0x00	; 0
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <__clzsi2+0x64>
     eb0:	80 e1       	ldi	r24, 0x10	; 16
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a0 e0       	ldi	r26, 0x00	; 0
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	20 e2       	ldi	r18, 0x20	; 32
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	28 1b       	sub	r18, r24
     ec2:	39 0b       	sbc	r19, r25
     ec4:	4a 0b       	sbc	r20, r26
     ec6:	5b 0b       	sbc	r21, r27
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <__clzsi2+0x7e>
     eca:	16 95       	lsr	r17
     ecc:	07 95       	ror	r16
     ece:	f7 94       	ror	r15
     ed0:	e7 94       	ror	r14
     ed2:	8a 95       	dec	r24
     ed4:	d2 f7       	brpl	.-12     	; 0xeca <__clzsi2+0x76>
     ed6:	f7 01       	movw	r30, r14
     ed8:	e6 56       	subi	r30, 0x66	; 102
     eda:	fe 4f       	sbci	r31, 0xFE	; 254
     edc:	80 81       	ld	r24, Z
     ede:	28 1b       	sub	r18, r24
     ee0:	31 09       	sbc	r19, r1
     ee2:	41 09       	sbc	r20, r1
     ee4:	51 09       	sbc	r21, r1
     ee6:	c9 01       	movw	r24, r18
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	08 95       	ret

00000ef2 <__pack_f>:
     ef2:	df 92       	push	r13
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	fc 01       	movw	r30, r24
     efe:	e4 80       	ldd	r14, Z+4	; 0x04
     f00:	f5 80       	ldd	r15, Z+5	; 0x05
     f02:	06 81       	ldd	r16, Z+6	; 0x06
     f04:	17 81       	ldd	r17, Z+7	; 0x07
     f06:	d1 80       	ldd	r13, Z+1	; 0x01
     f08:	80 81       	ld	r24, Z
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	48 f4       	brcc	.+18     	; 0xf20 <__pack_f+0x2e>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a0 e1       	ldi	r26, 0x10	; 16
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e8 2a       	or	r14, r24
     f18:	f9 2a       	or	r15, r25
     f1a:	0a 2b       	or	r16, r26
     f1c:	1b 2b       	or	r17, r27
     f1e:	a5 c0       	rjmp	.+330    	; 0x106a <__pack_f+0x178>
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	09 f4       	brne	.+2      	; 0xf26 <__pack_f+0x34>
     f24:	9f c0       	rjmp	.+318    	; 0x1064 <__pack_f+0x172>
     f26:	82 30       	cpi	r24, 0x02	; 2
     f28:	21 f4       	brne	.+8      	; 0xf32 <__pack_f+0x40>
     f2a:	ee 24       	eor	r14, r14
     f2c:	ff 24       	eor	r15, r15
     f2e:	87 01       	movw	r16, r14
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <__pack_f+0x4a>
     f32:	e1 14       	cp	r14, r1
     f34:	f1 04       	cpc	r15, r1
     f36:	01 05       	cpc	r16, r1
     f38:	11 05       	cpc	r17, r1
     f3a:	19 f4       	brne	.+6      	; 0xf42 <__pack_f+0x50>
     f3c:	e0 e0       	ldi	r30, 0x00	; 0
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	96 c0       	rjmp	.+300    	; 0x106e <__pack_f+0x17c>
     f42:	62 81       	ldd	r22, Z+2	; 0x02
     f44:	73 81       	ldd	r23, Z+3	; 0x03
     f46:	9f ef       	ldi	r25, 0xFF	; 255
     f48:	62 38       	cpi	r22, 0x82	; 130
     f4a:	79 07       	cpc	r23, r25
     f4c:	0c f0       	brlt	.+2      	; 0xf50 <__pack_f+0x5e>
     f4e:	5b c0       	rjmp	.+182    	; 0x1006 <__pack_f+0x114>
     f50:	22 e8       	ldi	r18, 0x82	; 130
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	26 1b       	sub	r18, r22
     f56:	37 0b       	sbc	r19, r23
     f58:	2a 31       	cpi	r18, 0x1A	; 26
     f5a:	31 05       	cpc	r19, r1
     f5c:	2c f0       	brlt	.+10     	; 0xf68 <__pack_f+0x76>
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	2a c0       	rjmp	.+84     	; 0xfbc <__pack_f+0xca>
     f68:	b8 01       	movw	r22, r16
     f6a:	a7 01       	movw	r20, r14
     f6c:	02 2e       	mov	r0, r18
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <__pack_f+0x86>
     f70:	76 95       	lsr	r23
     f72:	67 95       	ror	r22
     f74:	57 95       	ror	r21
     f76:	47 95       	ror	r20
     f78:	0a 94       	dec	r0
     f7a:	d2 f7       	brpl	.-12     	; 0xf70 <__pack_f+0x7e>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	a0 e0       	ldi	r26, 0x00	; 0
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <__pack_f+0x9c>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	aa 1f       	adc	r26, r26
     f8c:	bb 1f       	adc	r27, r27
     f8e:	2a 95       	dec	r18
     f90:	d2 f7       	brpl	.-12     	; 0xf86 <__pack_f+0x94>
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	a1 09       	sbc	r26, r1
     f96:	b1 09       	sbc	r27, r1
     f98:	8e 21       	and	r24, r14
     f9a:	9f 21       	and	r25, r15
     f9c:	a0 23       	and	r26, r16
     f9e:	b1 23       	and	r27, r17
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	a1 05       	cpc	r26, r1
     fa4:	b1 05       	cpc	r27, r1
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <__pack_f+0xbe>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	9a 01       	movw	r18, r20
     fb2:	ab 01       	movw	r20, r22
     fb4:	28 2b       	or	r18, r24
     fb6:	39 2b       	or	r19, r25
     fb8:	4a 2b       	or	r20, r26
     fba:	5b 2b       	or	r21, r27
     fbc:	da 01       	movw	r26, r20
     fbe:	c9 01       	movw	r24, r18
     fc0:	8f 77       	andi	r24, 0x7F	; 127
     fc2:	90 70       	andi	r25, 0x00	; 0
     fc4:	a0 70       	andi	r26, 0x00	; 0
     fc6:	b0 70       	andi	r27, 0x00	; 0
     fc8:	80 34       	cpi	r24, 0x40	; 64
     fca:	91 05       	cpc	r25, r1
     fcc:	a1 05       	cpc	r26, r1
     fce:	b1 05       	cpc	r27, r1
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <__pack_f+0xee>
     fd2:	27 ff       	sbrs	r18, 7
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <__pack_f+0xf6>
     fd6:	20 5c       	subi	r18, 0xC0	; 192
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	4f 4f       	sbci	r20, 0xFF	; 255
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <__pack_f+0xf6>
     fe0:	21 5c       	subi	r18, 0xC1	; 193
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	4f 4f       	sbci	r20, 0xFF	; 255
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	e0 e0       	ldi	r30, 0x00	; 0
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	20 30       	cpi	r18, 0x00	; 0
     fee:	a0 e0       	ldi	r26, 0x00	; 0
     ff0:	3a 07       	cpc	r19, r26
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	4a 07       	cpc	r20, r26
     ff6:	a0 e4       	ldi	r26, 0x40	; 64
     ff8:	5a 07       	cpc	r21, r26
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <__pack_f+0x10e>
     ffc:	e1 e0       	ldi	r30, 0x01	; 1
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	79 01       	movw	r14, r18
    1002:	8a 01       	movw	r16, r20
    1004:	27 c0       	rjmp	.+78     	; 0x1054 <__pack_f+0x162>
    1006:	60 38       	cpi	r22, 0x80	; 128
    1008:	71 05       	cpc	r23, r1
    100a:	64 f5       	brge	.+88     	; 0x1064 <__pack_f+0x172>
    100c:	fb 01       	movw	r30, r22
    100e:	e1 58       	subi	r30, 0x81	; 129
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	d8 01       	movw	r26, r16
    1014:	c7 01       	movw	r24, r14
    1016:	8f 77       	andi	r24, 0x7F	; 127
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	a0 70       	andi	r26, 0x00	; 0
    101c:	b0 70       	andi	r27, 0x00	; 0
    101e:	80 34       	cpi	r24, 0x40	; 64
    1020:	91 05       	cpc	r25, r1
    1022:	a1 05       	cpc	r26, r1
    1024:	b1 05       	cpc	r27, r1
    1026:	39 f4       	brne	.+14     	; 0x1036 <__pack_f+0x144>
    1028:	e7 fe       	sbrs	r14, 7
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <__pack_f+0x154>
    102c:	80 e4       	ldi	r24, 0x40	; 64
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	04 c0       	rjmp	.+8      	; 0x103e <__pack_f+0x14c>
    1036:	8f e3       	ldi	r24, 0x3F	; 63
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e0       	ldi	r26, 0x00	; 0
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e8 0e       	add	r14, r24
    1040:	f9 1e       	adc	r15, r25
    1042:	0a 1f       	adc	r16, r26
    1044:	1b 1f       	adc	r17, r27
    1046:	17 ff       	sbrs	r17, 7
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <__pack_f+0x162>
    104a:	16 95       	lsr	r17
    104c:	07 95       	ror	r16
    104e:	f7 94       	ror	r15
    1050:	e7 94       	ror	r14
    1052:	31 96       	adiw	r30, 0x01	; 1
    1054:	87 e0       	ldi	r24, 0x07	; 7
    1056:	16 95       	lsr	r17
    1058:	07 95       	ror	r16
    105a:	f7 94       	ror	r15
    105c:	e7 94       	ror	r14
    105e:	8a 95       	dec	r24
    1060:	d1 f7       	brne	.-12     	; 0x1056 <__pack_f+0x164>
    1062:	05 c0       	rjmp	.+10     	; 0x106e <__pack_f+0x17c>
    1064:	ee 24       	eor	r14, r14
    1066:	ff 24       	eor	r15, r15
    1068:	87 01       	movw	r16, r14
    106a:	ef ef       	ldi	r30, 0xFF	; 255
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	6e 2f       	mov	r22, r30
    1070:	67 95       	ror	r22
    1072:	66 27       	eor	r22, r22
    1074:	67 95       	ror	r22
    1076:	90 2f       	mov	r25, r16
    1078:	9f 77       	andi	r25, 0x7F	; 127
    107a:	d7 94       	ror	r13
    107c:	dd 24       	eor	r13, r13
    107e:	d7 94       	ror	r13
    1080:	8e 2f       	mov	r24, r30
    1082:	86 95       	lsr	r24
    1084:	49 2f       	mov	r20, r25
    1086:	46 2b       	or	r20, r22
    1088:	58 2f       	mov	r21, r24
    108a:	5d 29       	or	r21, r13
    108c:	b7 01       	movw	r22, r14
    108e:	ca 01       	movw	r24, r20
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	08 95       	ret

0000109c <__unpack_f>:
    109c:	fc 01       	movw	r30, r24
    109e:	db 01       	movw	r26, r22
    10a0:	40 81       	ld	r20, Z
    10a2:	51 81       	ldd	r21, Z+1	; 0x01
    10a4:	22 81       	ldd	r18, Z+2	; 0x02
    10a6:	62 2f       	mov	r22, r18
    10a8:	6f 77       	andi	r22, 0x7F	; 127
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	22 1f       	adc	r18, r18
    10ae:	22 27       	eor	r18, r18
    10b0:	22 1f       	adc	r18, r18
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	89 2f       	mov	r24, r25
    10b6:	88 0f       	add	r24, r24
    10b8:	82 2b       	or	r24, r18
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	99 1f       	adc	r25, r25
    10c0:	99 27       	eor	r25, r25
    10c2:	99 1f       	adc	r25, r25
    10c4:	11 96       	adiw	r26, 0x01	; 1
    10c6:	9c 93       	st	X, r25
    10c8:	11 97       	sbiw	r26, 0x01	; 1
    10ca:	21 15       	cp	r18, r1
    10cc:	31 05       	cpc	r19, r1
    10ce:	a9 f5       	brne	.+106    	; 0x113a <__unpack_f+0x9e>
    10d0:	41 15       	cp	r20, r1
    10d2:	51 05       	cpc	r21, r1
    10d4:	61 05       	cpc	r22, r1
    10d6:	71 05       	cpc	r23, r1
    10d8:	11 f4       	brne	.+4      	; 0x10de <__unpack_f+0x42>
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	37 c0       	rjmp	.+110    	; 0x114c <__unpack_f+0xb0>
    10de:	82 e8       	ldi	r24, 0x82	; 130
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
    10e2:	13 96       	adiw	r26, 0x03	; 3
    10e4:	9c 93       	st	X, r25
    10e6:	8e 93       	st	-X, r24
    10e8:	12 97       	sbiw	r26, 0x02	; 2
    10ea:	9a 01       	movw	r18, r20
    10ec:	ab 01       	movw	r20, r22
    10ee:	67 e0       	ldi	r22, 0x07	; 7
    10f0:	22 0f       	add	r18, r18
    10f2:	33 1f       	adc	r19, r19
    10f4:	44 1f       	adc	r20, r20
    10f6:	55 1f       	adc	r21, r21
    10f8:	6a 95       	dec	r22
    10fa:	d1 f7       	brne	.-12     	; 0x10f0 <__unpack_f+0x54>
    10fc:	83 e0       	ldi	r24, 0x03	; 3
    10fe:	8c 93       	st	X, r24
    1100:	0d c0       	rjmp	.+26     	; 0x111c <__unpack_f+0x80>
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	44 1f       	adc	r20, r20
    1108:	55 1f       	adc	r21, r21
    110a:	12 96       	adiw	r26, 0x02	; 2
    110c:	8d 91       	ld	r24, X+
    110e:	9c 91       	ld	r25, X
    1110:	13 97       	sbiw	r26, 0x03	; 3
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	13 96       	adiw	r26, 0x03	; 3
    1116:	9c 93       	st	X, r25
    1118:	8e 93       	st	-X, r24
    111a:	12 97       	sbiw	r26, 0x02	; 2
    111c:	20 30       	cpi	r18, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	38 07       	cpc	r19, r24
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	48 07       	cpc	r20, r24
    1126:	80 e4       	ldi	r24, 0x40	; 64
    1128:	58 07       	cpc	r21, r24
    112a:	58 f3       	brcs	.-42     	; 0x1102 <__unpack_f+0x66>
    112c:	14 96       	adiw	r26, 0x04	; 4
    112e:	2d 93       	st	X+, r18
    1130:	3d 93       	st	X+, r19
    1132:	4d 93       	st	X+, r20
    1134:	5c 93       	st	X, r21
    1136:	17 97       	sbiw	r26, 0x07	; 7
    1138:	08 95       	ret
    113a:	2f 3f       	cpi	r18, 0xFF	; 255
    113c:	31 05       	cpc	r19, r1
    113e:	79 f4       	brne	.+30     	; 0x115e <__unpack_f+0xc2>
    1140:	41 15       	cp	r20, r1
    1142:	51 05       	cpc	r21, r1
    1144:	61 05       	cpc	r22, r1
    1146:	71 05       	cpc	r23, r1
    1148:	19 f4       	brne	.+6      	; 0x1150 <__unpack_f+0xb4>
    114a:	84 e0       	ldi	r24, 0x04	; 4
    114c:	8c 93       	st	X, r24
    114e:	08 95       	ret
    1150:	64 ff       	sbrs	r22, 4
    1152:	03 c0       	rjmp	.+6      	; 0x115a <__unpack_f+0xbe>
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	8c 93       	st	X, r24
    1158:	12 c0       	rjmp	.+36     	; 0x117e <__unpack_f+0xe2>
    115a:	1c 92       	st	X, r1
    115c:	10 c0       	rjmp	.+32     	; 0x117e <__unpack_f+0xe2>
    115e:	2f 57       	subi	r18, 0x7F	; 127
    1160:	30 40       	sbci	r19, 0x00	; 0
    1162:	13 96       	adiw	r26, 0x03	; 3
    1164:	3c 93       	st	X, r19
    1166:	2e 93       	st	-X, r18
    1168:	12 97       	sbiw	r26, 0x02	; 2
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	8c 93       	st	X, r24
    116e:	87 e0       	ldi	r24, 0x07	; 7
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	66 1f       	adc	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	8a 95       	dec	r24
    117a:	d1 f7       	brne	.-12     	; 0x1170 <__unpack_f+0xd4>
    117c:	70 64       	ori	r23, 0x40	; 64
    117e:	14 96       	adiw	r26, 0x04	; 4
    1180:	4d 93       	st	X+, r20
    1182:	5d 93       	st	X+, r21
    1184:	6d 93       	st	X+, r22
    1186:	7c 93       	st	X, r23
    1188:	17 97       	sbiw	r26, 0x07	; 7
    118a:	08 95       	ret

0000118c <__fpcmp_parts_f>:
    118c:	1f 93       	push	r17
    118e:	dc 01       	movw	r26, r24
    1190:	fb 01       	movw	r30, r22
    1192:	9c 91       	ld	r25, X
    1194:	92 30       	cpi	r25, 0x02	; 2
    1196:	08 f4       	brcc	.+2      	; 0x119a <__fpcmp_parts_f+0xe>
    1198:	47 c0       	rjmp	.+142    	; 0x1228 <__fpcmp_parts_f+0x9c>
    119a:	80 81       	ld	r24, Z
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <__fpcmp_parts_f+0x16>
    11a0:	43 c0       	rjmp	.+134    	; 0x1228 <__fpcmp_parts_f+0x9c>
    11a2:	94 30       	cpi	r25, 0x04	; 4
    11a4:	51 f4       	brne	.+20     	; 0x11ba <__fpcmp_parts_f+0x2e>
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	1c 91       	ld	r17, X
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	99 f5       	brne	.+102    	; 0x1214 <__fpcmp_parts_f+0x88>
    11ae:	81 81       	ldd	r24, Z+1	; 0x01
    11b0:	68 2f       	mov	r22, r24
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	61 1b       	sub	r22, r17
    11b6:	71 09       	sbc	r23, r1
    11b8:	3f c0       	rjmp	.+126    	; 0x1238 <__fpcmp_parts_f+0xac>
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	21 f0       	breq	.+8      	; 0x11c6 <__fpcmp_parts_f+0x3a>
    11be:	92 30       	cpi	r25, 0x02	; 2
    11c0:	31 f4       	brne	.+12     	; 0x11ce <__fpcmp_parts_f+0x42>
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	b9 f1       	breq	.+110    	; 0x1234 <__fpcmp_parts_f+0xa8>
    11c6:	81 81       	ldd	r24, Z+1	; 0x01
    11c8:	88 23       	and	r24, r24
    11ca:	89 f1       	breq	.+98     	; 0x122e <__fpcmp_parts_f+0xa2>
    11cc:	2d c0       	rjmp	.+90     	; 0x1228 <__fpcmp_parts_f+0x9c>
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	1c 91       	ld	r17, X
    11d2:	11 97       	sbiw	r26, 0x01	; 1
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	f1 f0       	breq	.+60     	; 0x1214 <__fpcmp_parts_f+0x88>
    11d8:	81 81       	ldd	r24, Z+1	; 0x01
    11da:	18 17       	cp	r17, r24
    11dc:	d9 f4       	brne	.+54     	; 0x1214 <__fpcmp_parts_f+0x88>
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	2d 91       	ld	r18, X+
    11e2:	3c 91       	ld	r19, X
    11e4:	13 97       	sbiw	r26, 0x03	; 3
    11e6:	82 81       	ldd	r24, Z+2	; 0x02
    11e8:	93 81       	ldd	r25, Z+3	; 0x03
    11ea:	82 17       	cp	r24, r18
    11ec:	93 07       	cpc	r25, r19
    11ee:	94 f0       	brlt	.+36     	; 0x1214 <__fpcmp_parts_f+0x88>
    11f0:	28 17       	cp	r18, r24
    11f2:	39 07       	cpc	r19, r25
    11f4:	bc f0       	brlt	.+46     	; 0x1224 <__fpcmp_parts_f+0x98>
    11f6:	14 96       	adiw	r26, 0x04	; 4
    11f8:	8d 91       	ld	r24, X+
    11fa:	9d 91       	ld	r25, X+
    11fc:	0d 90       	ld	r0, X+
    11fe:	bc 91       	ld	r27, X
    1200:	a0 2d       	mov	r26, r0
    1202:	24 81       	ldd	r18, Z+4	; 0x04
    1204:	35 81       	ldd	r19, Z+5	; 0x05
    1206:	46 81       	ldd	r20, Z+6	; 0x06
    1208:	57 81       	ldd	r21, Z+7	; 0x07
    120a:	28 17       	cp	r18, r24
    120c:	39 07       	cpc	r19, r25
    120e:	4a 07       	cpc	r20, r26
    1210:	5b 07       	cpc	r21, r27
    1212:	18 f4       	brcc	.+6      	; 0x121a <__fpcmp_parts_f+0x8e>
    1214:	11 23       	and	r17, r17
    1216:	41 f0       	breq	.+16     	; 0x1228 <__fpcmp_parts_f+0x9c>
    1218:	0a c0       	rjmp	.+20     	; 0x122e <__fpcmp_parts_f+0xa2>
    121a:	82 17       	cp	r24, r18
    121c:	93 07       	cpc	r25, r19
    121e:	a4 07       	cpc	r26, r20
    1220:	b5 07       	cpc	r27, r21
    1222:	40 f4       	brcc	.+16     	; 0x1234 <__fpcmp_parts_f+0xa8>
    1224:	11 23       	and	r17, r17
    1226:	19 f0       	breq	.+6      	; 0x122e <__fpcmp_parts_f+0xa2>
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <__fpcmp_parts_f+0xac>
    122e:	6f ef       	ldi	r22, 0xFF	; 255
    1230:	7f ef       	ldi	r23, 0xFF	; 255
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <__fpcmp_parts_f+0xac>
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	cb 01       	movw	r24, r22
    123a:	1f 91       	pop	r17
    123c:	08 95       	ret

0000123e <TIMER_enuInit>:
extern TIMER_t TIMER_astrTimerConfig[];

static u16 LOC_u16OVF , LOC_u16OVFCounts , LOC_u16OCRValue , LOC_u16CTC, LOC_u16CTCCounts;
static u8 LOC_u8Preload;

ES_t TIMER_enuInit(void){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <TIMER_enuInit+0x6>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iter;

	for(Local_u8Iter = 0 ; Local_u8Iter < TIMER_u8PinNum ; Local_u8Iter++){
    124c:	19 82       	std	Y+1, r1	; 0x01
    124e:	83 c0       	rjmp	.+262    	; 0x1356 <TIMER_enuInit+0x118>

		enuSetWaveGenMode(TIMER_astrTimerConfig[Local_u8Iter].timerpin,TIMER_astrTimerConfig[Local_u8Iter].timerwaveformmode);
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	c9 01       	movw	r24, r18
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	82 0f       	add	r24, r18
    1262:	93 1f       	adc	r25, r19
    1264:	fc 01       	movw	r30, r24
    1266:	eb 55       	subi	r30, 0x5B	; 91
    1268:	fd 4f       	sbci	r31, 0xFD	; 253
    126a:	40 81       	ld	r20, Z
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	c9 01       	movw	r24, r18
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	fc 01       	movw	r30, r24
    1282:	ea 55       	subi	r30, 0x5A	; 90
    1284:	fd 4f       	sbci	r31, 0xFD	; 253
    1286:	90 81       	ld	r25, Z
    1288:	84 2f       	mov	r24, r20
    128a:	69 2f       	mov	r22, r25
    128c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>
		enuSetPrescaler(TIMER_astrTimerConfig[Local_u8Iter].timerpin,TIMER_astrTimerConfig[Local_u8Iter].timerclockspeed);
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	c9 01       	movw	r24, r18
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	82 0f       	add	r24, r18
    12a2:	93 1f       	adc	r25, r19
    12a4:	fc 01       	movw	r30, r24
    12a6:	eb 55       	subi	r30, 0x5B	; 91
    12a8:	fd 4f       	sbci	r31, 0xFD	; 253
    12aa:	40 81       	ld	r20, Z
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	c9 01       	movw	r24, r18
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	fc 01       	movw	r30, r24
    12c2:	e8 55       	subi	r30, 0x58	; 88
    12c4:	fd 4f       	sbci	r31, 0xFD	; 253
    12c6:	90 81       	ld	r25, Z
    12c8:	84 2f       	mov	r24, r20
    12ca:	69 2f       	mov	r22, r25
    12cc:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <enuSetPrescaler>
		enuSetInterruptMode(TIMER_astrTimerConfig[Local_u8Iter].timerpin,TIMER_astrTimerConfig[Local_u8Iter].timerintmode);
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	c9 01       	movw	r24, r18
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	82 0f       	add	r24, r18
    12e2:	93 1f       	adc	r25, r19
    12e4:	fc 01       	movw	r30, r24
    12e6:	eb 55       	subi	r30, 0x5B	; 91
    12e8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ea:	40 81       	ld	r20, Z
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	c9 01       	movw	r24, r18
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	fc 01       	movw	r30, r24
    1302:	e7 55       	subi	r30, 0x57	; 87
    1304:	fd 4f       	sbci	r31, 0xFD	; 253
    1306:	90 81       	ld	r25, Z
    1308:	84 2f       	mov	r24, r20
    130a:	69 2f       	mov	r22, r25
    130c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
		enuSetCompNonPWMMode(TIMER_astrTimerConfig[Local_u8Iter].timerpin,TIMER_astrTimerConfig[Local_u8Iter].timercompoutputmode);
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	c9 01       	movw	r24, r18
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	82 0f       	add	r24, r18
    1322:	93 1f       	adc	r25, r19
    1324:	fc 01       	movw	r30, r24
    1326:	eb 55       	subi	r30, 0x5B	; 91
    1328:	fd 4f       	sbci	r31, 0xFD	; 253
    132a:	40 81       	ld	r20, Z
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	c9 01       	movw	r24, r18
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	82 0f       	add	r24, r18
    133e:	93 1f       	adc	r25, r19
    1340:	fc 01       	movw	r30, r24
    1342:	e9 55       	subi	r30, 0x59	; 89
    1344:	fd 4f       	sbci	r31, 0xFD	; 253
    1346:	90 81       	ld	r25, Z
    1348:	84 2f       	mov	r24, r20
    134a:	69 2f       	mov	r22, r25
    134c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <enuSetCompNonPWMMode>

	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_u8Iter;

	for(Local_u8Iter = 0 ; Local_u8Iter < TIMER_u8PinNum ; Local_u8Iter++){
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	90 91 a4 02 	lds	r25, 0x02A4
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	89 17       	cp	r24, r25
    135e:	08 f4       	brcc	.+2      	; 0x1362 <TIMER_enuInit+0x124>
    1360:	77 cf       	rjmp	.-274    	; 0x1250 <TIMER_enuInit+0x12>
		enuSetPrescaler(TIMER_astrTimerConfig[Local_u8Iter].timerpin,TIMER_astrTimerConfig[Local_u8Iter].timerclockspeed);
		enuSetInterruptMode(TIMER_astrTimerConfig[Local_u8Iter].timerpin,TIMER_astrTimerConfig[Local_u8Iter].timerintmode);
		enuSetCompNonPWMMode(TIMER_astrTimerConfig[Local_u8Iter].timerpin,TIMER_astrTimerConfig[Local_u8Iter].timercompoutputmode);
	}

	return Local_enuErrorState;
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <TIMER_enuSetWaveGenMode>:

ES_t TIMER_enuSetWaveGenMode(u8 Copy_u8IntPin , u8 Copy_u8WaveForm){
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <TIMER_enuSetWaveGenMode+0x6>
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	8a 83       	std	Y+2, r24	; 0x02
    137c:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetWaveGenMode(Copy_u8IntPin,Copy_u8WaveForm);
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	6b 81       	ldd	r22, Y+3	; 0x03
    1386:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>
    138a:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	88 23       	and	r24, r24
    1390:	79 f4       	brne	.+30     	; 0x13b0 <TIMER_enuSetWaveGenMode+0x42>

		TIMER_astrTimerConfig[Copy_u8IntPin].timerwaveformmode = Copy_u8WaveForm;
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	c9 01       	movw	r24, r18
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	fc 01       	movw	r30, r24
    13a8:	ea 55       	subi	r30, 0x5A	; 90
    13aa:	fd 4f       	sbci	r31, 0xFD	; 253
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	80 83       	st	Z, r24
	}
	else{}

	return Local_enuErrorState;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <TIMER_enuSetPrescaler>:

ES_t TIMER_enuSetPrescaler(u8 Copy_u8IntPin , u8 Copy_u8Prescaler){
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <TIMER_enuSetPrescaler+0x6>
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	8a 83       	std	Y+2, r24	; 0x02
    13cc:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState;

	Local_enuErrorState = enuSetPrescaler(Copy_u8IntPin,Copy_u8Prescaler);
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	6b 81       	ldd	r22, Y+3	; 0x03
    13d2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <enuSetPrescaler>
    13d6:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	88 23       	and	r24, r24
    13dc:	79 f4       	brne	.+30     	; 0x13fc <TIMER_enuSetPrescaler+0x3e>

		TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed = Copy_u8Prescaler;
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	c9 01       	movw	r24, r18
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	82 0f       	add	r24, r18
    13f0:	93 1f       	adc	r25, r19
    13f2:	fc 01       	movw	r30, r24
    13f4:	e8 55       	subi	r30, 0x58	; 88
    13f6:	fd 4f       	sbci	r31, 0xFD	; 253
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	80 83       	st	Z, r24
	}
	else{}

	return Local_enuErrorState;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <TIMER_enuSetCompNonPWMMode>:

ES_t TIMER_enuSetCompNonPWMMode(u8 Copy_u8IntPin , u8 Copy_u8Mode){
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <TIMER_enuSetCompNonPWMMode+0x6>
    1410:	0f 92       	push	r0
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetCompNonPWMMode(Copy_u8IntPin,Copy_u8Mode);
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	6b 81       	ldd	r22, Y+3	; 0x03
    1422:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <enuSetCompNonPWMMode>
    1426:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	88 23       	and	r24, r24
    142c:	79 f4       	brne	.+30     	; 0x144c <TIMER_enuSetCompNonPWMMode+0x42>

		TIMER_astrTimerConfig[Copy_u8IntPin].timercompoutputmode = Copy_u8Mode;
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	c9 01       	movw	r24, r18
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	82 0f       	add	r24, r18
    1440:	93 1f       	adc	r25, r19
    1442:	fc 01       	movw	r30, r24
    1444:	e9 55       	subi	r30, 0x59	; 89
    1446:	fd 4f       	sbci	r31, 0xFD	; 253
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	80 83       	st	Z, r24
	}
	else{}

	return Local_enuErrorState;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <TIMER_enuSyncDelayms>:

ES_t TIMER_enuSyncDelayms(u8 Copy_u8IntPin , u16 Copy_u16DelayTime){
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	2e 97       	sbiw	r28, 0x0e	; 14
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	8a 87       	std	Y+10, r24	; 0x0a
    1478:	7c 87       	std	Y+12, r23	; 0x0c
    147a:	6b 87       	std	Y+11, r22	; 0x0b

	ES_t Local_enuErrorState = ES_NOK;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	89 87       	std	Y+9, r24	; 0x09


	switch(Copy_u8IntPin){
    1480:	8a 85       	ldd	r24, Y+10	; 0x0a
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3e 87       	std	Y+14, r19	; 0x0e
    1488:	2d 87       	std	Y+13, r18	; 0x0d
    148a:	8d 85       	ldd	r24, Y+13	; 0x0d
    148c:	9e 85       	ldd	r25, Y+14	; 0x0e
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	39 f0       	breq	.+14     	; 0x14a0 <TIMER_enuSyncDelayms+0x46>
    1492:	2d 85       	ldd	r18, Y+13	; 0x0d
    1494:	3e 85       	ldd	r19, Y+14	; 0x0e
    1496:	21 30       	cpi	r18, 0x01	; 1
    1498:	31 05       	cpc	r19, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <TIMER_enuSyncDelayms+0x44>
    149c:	3b c1       	rjmp	.+630    	; 0x1714 <TIMER_enuSyncDelayms+0x2ba>
    149e:	38 c1       	rjmp	.+624    	; 0x1710 <TIMER_enuSyncDelayms+0x2b6>

	    f32 Local_f32OVFTime = (LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1] * 256.0) / (16000);

	    case TIMER_INT0 :
	    	if(Local_f32OVFTime <= Copy_u16DelayTime){
    14a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a4:	cc 01       	movw	r24, r24
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 b1 06 	call	0xd62	; 0xd62 <__floatunsisf>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	2d 81       	ldd	r18, Y+5	; 0x05
    14bc:	3e 81       	ldd	r19, Y+6	; 0x06
    14be:	4f 81       	ldd	r20, Y+7	; 0x07
    14c0:	58 85       	ldd	r21, Y+8	; 0x08
    14c2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__gesf2>
    14c6:	88 23       	and	r24, r24
    14c8:	0c f4       	brge	.+2      	; 0x14cc <TIMER_enuSyncDelayms+0x72>
    14ca:	86 c0       	rjmp	.+268    	; 0x15d8 <TIMER_enuSyncDelayms+0x17e>

	    		enuSetWaveGenMode(TIMER_INT0,TIMER0_WAVEFORM_GEN_MODE_NORMAL);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>
	    		//enuSetPrescaler(TIMER_INT0,TIMER0_NO_CLK_SOURCE);

	    		u16 Local_u16CyclesNum = (Copy_u16DelayTime * 16000UL) /
	    				(LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1]) ;
    14d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d8:	cc 01       	movw	r24, r24
    14da:	a0 e0       	ldi	r26, 0x00	; 0
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	20 e8       	ldi	r18, 0x80	; 128
    14e0:	3e e3       	ldi	r19, 0x3E	; 62
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
    14ee:	7b 01       	movw	r14, r22
    14f0:	8c 01       	movw	r16, r24
    14f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	c9 01       	movw	r24, r18
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	82 0f       	add	r24, r18
    1504:	93 1f       	adc	r25, r19
    1506:	fc 01       	movw	r30, r24
    1508:	e8 55       	subi	r30, 0x58	; 88
    150a:	fd 4f       	sbci	r31, 0xFD	; 253
    150c:	80 81       	ld	r24, Z
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	fc 01       	movw	r30, r24
    151a:	e6 55       	subi	r30, 0x56	; 86
    151c:	fd 4f       	sbci	r31, 0xFD	; 253
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	9c 01       	movw	r18, r24
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	c8 01       	movw	r24, r16
    152a:	b7 01       	movw	r22, r14
    152c:	0e 94 0c 3b 	call	0x7618	; 0x7618 <__udivmodsi4>
    1530:	da 01       	movw	r26, r20
    1532:	c9 01       	movw	r24, r18
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03

	    		LOC_u16OVF = (Local_u16CyclesNum + 255) / (256);
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	81 50       	subi	r24, 0x01	; 1
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	89 2f       	mov	r24, r25
    1542:	99 27       	eor	r25, r25
    1544:	90 93 2b 03 	sts	0x032B, r25
    1548:	80 93 2a 03 	sts	0x032A, r24

	    		u8 Local_u8PreLoad = 256 - (Local_u16CyclesNum % 256);
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	81 95       	neg	r24
    1550:	8a 83       	std	Y+2, r24	; 0x02

	    		LOC_u8Preload = Local_u8PreLoad;
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 93 34 03 	sts	0x0334, r24
	    		LOC_u16OVFCounts = LOC_u16OVF;
    1558:	80 91 2a 03 	lds	r24, 0x032A
    155c:	90 91 2b 03 	lds	r25, 0x032B
    1560:	90 93 2d 03 	sts	0x032D, r25
    1564:	80 93 2c 03 	sts	0x032C, r24
	    		TIMER_TCNT0 = Local_u8PreLoad;
    1568:	e2 e5       	ldi	r30, 0x52	; 82
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	80 83       	st	Z, r24
    1570:	19 c0       	rjmp	.+50     	; 0x15a4 <TIMER_enuSyncDelayms+0x14a>

	    		while(LOC_u16OVF != 0){

	    			//enuSetPrescaler(TIMER_INT0,TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed);

	    			while((TIMER_TIFR & 1) != 1);
    1572:	e8 e5       	ldi	r30, 0x58	; 88
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	81 70       	andi	r24, 0x01	; 1
    157e:	90 70       	andi	r25, 0x00	; 0
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	b9 f3       	breq	.-18     	; 0x1572 <TIMER_enuSyncDelayms+0x118>

	    			TIMER_TIFR |= (1<<0);
    1584:	a8 e5       	ldi	r26, 0x58	; 88
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e5       	ldi	r30, 0x58	; 88
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	81 60       	ori	r24, 0x01	; 1
    1590:	8c 93       	st	X, r24

	    			LOC_u16OVF--;
    1592:	80 91 2a 03 	lds	r24, 0x032A
    1596:	90 91 2b 03 	lds	r25, 0x032B
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	90 93 2b 03 	sts	0x032B, r25
    15a0:	80 93 2a 03 	sts	0x032A, r24

	    		LOC_u8Preload = Local_u8PreLoad;
	    		LOC_u16OVFCounts = LOC_u16OVF;
	    		TIMER_TCNT0 = Local_u8PreLoad;

	    		while(LOC_u16OVF != 0){
    15a4:	80 91 2a 03 	lds	r24, 0x032A
    15a8:	90 91 2b 03 	lds	r25, 0x032B
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	09 f7       	brne	.-62     	; 0x1572 <TIMER_enuSyncDelayms+0x118>
	    			TIMER_TIFR |= (1<<0);

	    			LOC_u16OVF--;
	    		}

	    		enuSetWaveGenMode(TIMER_INT0,TIMER_astrTimerConfig[Copy_u8IntPin].timerwaveformmode);
    15b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	c9 01       	movw	r24, r18
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	82 0f       	add	r24, r18
    15c2:	93 1f       	adc	r25, r19
    15c4:	fc 01       	movw	r30, r24
    15c6:	ea 55       	subi	r30, 0x5A	; 90
    15c8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ca:	90 81       	ld	r25, Z
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	69 2f       	mov	r22, r25
    15d0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>

	    		Local_enuErrorState = ES_OK;
    15d4:	19 86       	std	Y+9, r1	; 0x09
    15d6:	9e c0       	rjmp	.+316    	; 0x1714 <TIMER_enuSyncDelayms+0x2ba>

	    	}
	    	else if(Local_f32OVFTime > Copy_u16DelayTime){
    15d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15da:	9c 85       	ldd	r25, Y+12	; 0x0c
    15dc:	cc 01       	movw	r24, r24
    15de:	a0 e0       	ldi	r26, 0x00	; 0
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 b1 06 	call	0xd62	; 0xd62 <__floatunsisf>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	2d 81       	ldd	r18, Y+5	; 0x05
    15f4:	3e 81       	ldd	r19, Y+6	; 0x06
    15f6:	4f 81       	ldd	r20, Y+7	; 0x07
    15f8:	58 85       	ldd	r21, Y+8	; 0x08
    15fa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	0c f0       	brlt	.+2      	; 0x1604 <TIMER_enuSyncDelayms+0x1aa>
    1602:	88 c0       	rjmp	.+272    	; 0x1714 <TIMER_enuSyncDelayms+0x2ba>

	    		enuSetWaveGenMode(TIMER_INT0,TIMER0_WAVEFORM_GEN_MODE_CTC);
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	62 e0       	ldi	r22, 0x02	; 2
    1608:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>
	    		//enuSetPrescaler(TIMER_INT0,TIMER0_NO_CLK_SOURCE);

	    		u8 Local_u8CyclesNum = (Copy_u16DelayTime * 16000UL) /
	    				(LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1]) ;
    160c:	8b 85       	ldd	r24, Y+11	; 0x0b
    160e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1610:	cc 01       	movw	r24, r24
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	20 e8       	ldi	r18, 0x80	; 128
    1618:	3e e3       	ldi	r19, 0x3E	; 62
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
    1626:	7b 01       	movw	r14, r22
    1628:	8c 01       	movw	r16, r24
    162a:	8a 85       	ldd	r24, Y+10	; 0x0a
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	c9 01       	movw	r24, r18
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	82 0f       	add	r24, r18
    163c:	93 1f       	adc	r25, r19
    163e:	fc 01       	movw	r30, r24
    1640:	e8 55       	subi	r30, 0x58	; 88
    1642:	fd 4f       	sbci	r31, 0xFD	; 253
    1644:	80 81       	ld	r24, Z
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	fc 01       	movw	r30, r24
    1652:	e6 55       	subi	r30, 0x56	; 86
    1654:	fd 4f       	sbci	r31, 0xFD	; 253
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	9c 01       	movw	r18, r24
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	c8 01       	movw	r24, r16
    1662:	b7 01       	movw	r22, r14
    1664:	0e 94 0c 3b 	call	0x7618	; 0x7618 <__udivmodsi4>
    1668:	da 01       	movw	r26, r20
    166a:	c9 01       	movw	r24, r18
    166c:	89 83       	std	Y+1, r24	; 0x01

	    		LOC_u16OVF = 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 2b 03 	sts	0x032B, r25
    1676:	80 93 2a 03 	sts	0x032A, r24
	    		TIMER_OCR0 = Local_u8CyclesNum;
    167a:	ec e5       	ldi	r30, 0x5C	; 92
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	2c c0       	rjmp	.+88     	; 0x16dc <TIMER_enuSyncDelayms+0x282>

	    		while(LOC_u16OVF != 0){

	    			enuSetPrescaler(TIMER_INT0,TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed);
    1684:	8a 85       	ldd	r24, Y+10	; 0x0a
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	c9 01       	movw	r24, r18
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	82 0f       	add	r24, r18
    1696:	93 1f       	adc	r25, r19
    1698:	fc 01       	movw	r30, r24
    169a:	e8 55       	subi	r30, 0x58	; 88
    169c:	fd 4f       	sbci	r31, 0xFD	; 253
    169e:	90 81       	ld	r25, Z
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	69 2f       	mov	r22, r25
    16a4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <enuSetPrescaler>

	    			while(((TIMER_TIFR>>1) & 1) != 1);
    16a8:	e8 e5       	ldi	r30, 0x58	; 88
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	86 95       	lsr	r24
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	81 70       	andi	r24, 0x01	; 1
    16b6:	90 70       	andi	r25, 0x00	; 0
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	b1 f3       	breq	.-20     	; 0x16a8 <TIMER_enuSyncDelayms+0x24e>

	    			TIMER_TIFR |= (1<<1);
    16bc:	a8 e5       	ldi	r26, 0x58	; 88
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e8 e5       	ldi	r30, 0x58	; 88
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	82 60       	ori	r24, 0x02	; 2
    16c8:	8c 93       	st	X, r24

	    			LOC_u16OVF--;
    16ca:	80 91 2a 03 	lds	r24, 0x032A
    16ce:	90 91 2b 03 	lds	r25, 0x032B
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	90 93 2b 03 	sts	0x032B, r25
    16d8:	80 93 2a 03 	sts	0x032A, r24
	    				(LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1]) ;

	    		LOC_u16OVF = 1;
	    		TIMER_OCR0 = Local_u8CyclesNum;

	    		while(LOC_u16OVF != 0){
    16dc:	80 91 2a 03 	lds	r24, 0x032A
    16e0:	90 91 2b 03 	lds	r25, 0x032B
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	71 f6       	brne	.-100    	; 0x1684 <TIMER_enuSyncDelayms+0x22a>
	    			TIMER_TIFR |= (1<<1);

	    			LOC_u16OVF--;
	    		}

	    		enuSetWaveGenMode(TIMER_INT0,TIMER_astrTimerConfig[Copy_u8IntPin].timerwaveformmode);
    16e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	c9 01       	movw	r24, r18
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	82 0f       	add	r24, r18
    16fa:	93 1f       	adc	r25, r19
    16fc:	fc 01       	movw	r30, r24
    16fe:	ea 55       	subi	r30, 0x5A	; 90
    1700:	fd 4f       	sbci	r31, 0xFD	; 253
    1702:	90 81       	ld	r25, Z
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	69 2f       	mov	r22, r25
    1708:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>

	    		Local_enuErrorState = ES_OK;
    170c:	19 86       	std	Y+9, r1	; 0x09
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <TIMER_enuSyncDelayms+0x2ba>

	    case TIMER_INT1 :
	    	break;

	    default:
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	89 87       	std	Y+9, r24	; 0x09
	    	break;
	}

	return Local_enuErrorState;
    1714:	89 85       	ldd	r24, Y+9	; 0x09
}
    1716:	2e 96       	adiw	r28, 0x0e	; 14
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	08 95       	ret

00001730 <TIMER_enuAsyncDelayms>:

ES_t TIMER_enuAsyncDelayms(u8 Copy_u8IntPin , u16 Copy_u16DelayTime){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	2a 97       	sbiw	r28, 0x0a	; 10
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	8e 83       	std	Y+6, r24	; 0x06
    1746:	78 87       	std	Y+8, r23	; 0x08
    1748:	6f 83       	std	Y+7, r22	; 0x07

	ES_t Local_enuErrorState = ES_NOK;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	8d 83       	std	Y+5, r24	; 0x05


	switch(Copy_u8IntPin){
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3a 87       	std	Y+10, r19	; 0x0a
    1756:	29 87       	std	Y+9, r18	; 0x09
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	31 f0       	breq	.+12     	; 0x176c <TIMER_enuAsyncDelayms+0x3c>
    1760:	29 85       	ldd	r18, Y+9	; 0x09
    1762:	3a 85       	ldd	r19, Y+10	; 0x0a
    1764:	21 30       	cpi	r18, 0x01	; 1
    1766:	31 05       	cpc	r19, r1
    1768:	59 f0       	breq	.+22     	; 0x1780 <TIMER_enuAsyncDelayms+0x50>
    176a:	08 c0       	rjmp	.+16     	; 0x177c <TIMER_enuAsyncDelayms+0x4c>

	    f32 Local_f32OVFTime = (LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1] * 256.0) / (16000);

	    case TIMER_INT0 :
	    	Local_enuErrorState = enuCalculateOVFNOCR(Copy_u8IntPin,Copy_u16DelayTime);
    176c:	2f 81       	ldd	r18, Y+7	; 0x07
    176e:	38 85       	ldd	r19, Y+8	; 0x08
    1770:	8e 81       	ldd	r24, Y+6	; 0x06
    1772:	b9 01       	movw	r22, r18
    1774:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <enuCalculateOVFNOCR>
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <TIMER_enuAsyncDelayms+0x50>

	    case TIMER_INT1 :
	    	break;

	    default:
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	8d 83       	std	Y+5, r24	; 0x05
	    	break;
	}

	return Local_enuErrorState;
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1782:	2a 96       	adiw	r28, 0x0a	; 10
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <TIMER_enuSetOCRValue>:

ES_t TIMER_enuSetOCRValue(u8 Copy_u8IntPin , u16 Copy_u16Cycles){
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <TIMER_enuSetOCRValue+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <TIMER_enuSetOCRValue+0x8>
    179c:	00 d0       	rcall	.+0      	; 0x179e <TIMER_enuSetOCRValue+0xa>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	8a 83       	std	Y+2, r24	; 0x02
    17a4:	7c 83       	std	Y+4, r23	; 0x04
    17a6:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPin){
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3e 83       	std	Y+6, r19	; 0x06
    17b4:	2d 83       	std	Y+5, r18	; 0x05
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	31 f0       	breq	.+12     	; 0x17ca <TIMER_enuSetOCRValue+0x36>
    17be:	2d 81       	ldd	r18, Y+5	; 0x05
    17c0:	3e 81       	ldd	r19, Y+6	; 0x06
    17c2:	21 30       	cpi	r18, 0x01	; 1
    17c4:	31 05       	cpc	r19, r1
    17c6:	69 f0       	breq	.+26     	; 0x17e2 <TIMER_enuSetOCRValue+0x4e>
    17c8:	0a c0       	rjmp	.+20     	; 0x17de <TIMER_enuSetOCRValue+0x4a>

	    case TIMER_INT0 :
	    	TIMER_OCR0 = Copy_u16Cycles;
    17ca:	ec e5       	ldi	r30, 0x5C	; 92
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	80 83       	st	Z, r24
	    	TIMER_TCNT0 = 0x01;
    17d2:	e2 e5       	ldi	r30, 0x52	; 82
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 83       	st	Z, r24
	    	Local_enuErrorState = ES_OK;
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <TIMER_enuSetOCRValue+0x4e>
	    	break;
	    case TIMER_INT1 :

	    	break;
	    default :
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	89 83       	std	Y+1, r24	; 0x01
	    	break;
	}

	return Local_enuErrorState;
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e4:	26 96       	adiw	r28, 0x06	; 6
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <TIMER_enuGetTimerCounts>:

ES_t TIMER_enuGetTimerCounts(u8 Copy_u8IntPin , u16 * Copy_pu16Counts){
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <TIMER_enuGetTimerCounts+0x6>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <TIMER_enuGetTimerCounts+0x8>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <TIMER_enuGetTimerCounts+0xa>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	8a 83       	std	Y+2, r24	; 0x02
    1806:	7c 83       	std	Y+4, r23	; 0x04
    1808:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPin){
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3e 83       	std	Y+6, r19	; 0x06
    1816:	2d 83       	std	Y+5, r18	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	31 f0       	breq	.+12     	; 0x182c <TIMER_enuGetTimerCounts+0x36>
    1820:	2d 81       	ldd	r18, Y+5	; 0x05
    1822:	3e 81       	ldd	r19, Y+6	; 0x06
    1824:	21 30       	cpi	r18, 0x01	; 1
    1826:	31 05       	cpc	r19, r1
    1828:	99 f0       	breq	.+38     	; 0x1850 <TIMER_enuGetTimerCounts+0x5a>
    182a:	19 c0       	rjmp	.+50     	; 0x185e <TIMER_enuGetTimerCounts+0x68>

	    case TIMER_INT0 :
	    	if(Copy_pu16Counts != NULL){
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	59 f0       	breq	.+22     	; 0x184a <TIMER_enuGetTimerCounts+0x54>
	    		*Copy_pu16Counts = TIMER_TCNT0;
    1834:	e2 e5       	ldi	r30, 0x52	; 82
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	eb 81       	ldd	r30, Y+3	; 0x03
    1840:	fc 81       	ldd	r31, Y+4	; 0x04
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
	    		Local_enuErrorState = ES_OK;
    1846:	19 82       	std	Y+1, r1	; 0x01
    1848:	0c c0       	rjmp	.+24     	; 0x1862 <TIMER_enuGetTimerCounts+0x6c>
	    	}
	    	else{
	    		Local_enuErrorState = ES_NULL_POINTER;
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <TIMER_enuGetTimerCounts+0x6c>
	    	}
	    	break;
	    case TIMER_INT1 :
	    	if(Copy_pu16Counts != NULL){}
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	29 f4       	brne	.+10     	; 0x1862 <TIMER_enuGetTimerCounts+0x6c>
	    	else{
	    		Local_enuErrorState = ES_NULL_POINTER;
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <TIMER_enuGetTimerCounts+0x6c>
	    	}
	    	break;
	    default :
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	89 83       	std	Y+1, r24	; 0x01
	    	break;
	}

	return Local_enuErrorState;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
}
    1864:	26 96       	adiw	r28, 0x06	; 6
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <TIMER_enuOCEnable>:

ES_t TIMER_enuOCEnable(u8 Copy_u8IntPin){
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <TIMER_enuOCEnable+0x6>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetInterruptMode(Copy_u8IntPin,TIMER_OCINT);
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	6c e5       	ldi	r22, 0x5C	; 92
    188a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
    188e:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	88 23       	and	r24, r24
    1894:	79 f4       	brne	.+30     	; 0x18b4 <TIMER_enuOCEnable+0x3e>

		TIMER_astrTimerConfig[Copy_u8IntPin].timerintmode = TIMER_OCINT;
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	c9 01       	movw	r24, r18
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	fc 01       	movw	r30, r24
    18ac:	e7 55       	subi	r30, 0x57	; 87
    18ae:	fd 4f       	sbci	r31, 0xFD	; 253
    18b0:	8c e5       	ldi	r24, 0x5C	; 92
    18b2:	80 83       	st	Z, r24
	}
	else{}

	return Local_enuErrorState;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <TIMER_enuOCDisable>:

ES_t TIMER_enuOCDisable(u8 Copy_u8IntPin){
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <TIMER_enuOCDisable+0x6>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetInterruptMode(Copy_u8IntPin,TIMER_POLLING);
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	6a e5       	ldi	r22, 0x5A	; 90
    18d4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
    18d8:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	88 23       	and	r24, r24
    18de:	79 f4       	brne	.+30     	; 0x18fe <TIMER_enuOCDisable+0x3e>

		TIMER_astrTimerConfig[Copy_u8IntPin].timerintmode = TIMER_POLLING;
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	c9 01       	movw	r24, r18
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	82 0f       	add	r24, r18
    18f2:	93 1f       	adc	r25, r19
    18f4:	fc 01       	movw	r30, r24
    18f6:	e7 55       	subi	r30, 0x57	; 87
    18f8:	fd 4f       	sbci	r31, 0xFD	; 253
    18fa:	8a e5       	ldi	r24, 0x5A	; 90
    18fc:	80 83       	st	Z, r24
	}
	else{}

	return Local_enuErrorState;
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <TIMER_enuOVFEnable>:

ES_t TIMER_enuOVFEnable(u8 Copy_u8IntPin){
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	00 d0       	rcall	.+0      	; 0x1910 <TIMER_enuOVFEnable+0x6>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetInterruptMode(Copy_u8IntPin,TIMER_OVFINT);
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	6b e5       	ldi	r22, 0x5B	; 91
    191e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
    1922:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	88 23       	and	r24, r24
    1928:	79 f4       	brne	.+30     	; 0x1948 <TIMER_enuOVFEnable+0x3e>

		TIMER_astrTimerConfig[Copy_u8IntPin].timerintmode = TIMER_OVFINT;
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	c9 01       	movw	r24, r18
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	82 0f       	add	r24, r18
    193c:	93 1f       	adc	r25, r19
    193e:	fc 01       	movw	r30, r24
    1940:	e7 55       	subi	r30, 0x57	; 87
    1942:	fd 4f       	sbci	r31, 0xFD	; 253
    1944:	8b e5       	ldi	r24, 0x5B	; 91
    1946:	80 83       	st	Z, r24
	}
	else{}

	return Local_enuErrorState;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <TIMER_enuOVFDisable>:

ES_t TIMER_enuOVFDisable(u8 Copy_u8IntPin){
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <TIMER_enuOVFDisable+0x6>
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetInterruptMode(Copy_u8IntPin,TIMER_POLLING);
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	6a e5       	ldi	r22, 0x5A	; 90
    1968:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
    196c:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	88 23       	and	r24, r24
    1972:	79 f4       	brne	.+30     	; 0x1992 <TIMER_enuOVFDisable+0x3e>

		TIMER_astrTimerConfig[Copy_u8IntPin].timerintmode = TIMER_POLLING;
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	c9 01       	movw	r24, r18
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	82 0f       	add	r24, r18
    1986:	93 1f       	adc	r25, r19
    1988:	fc 01       	movw	r30, r24
    198a:	e7 55       	subi	r30, 0x57	; 87
    198c:	fd 4f       	sbci	r31, 0xFD	; 253
    198e:	8a e5       	ldi	r24, 0x5A	; 90
    1990:	80 83       	st	Z, r24
	}
	else{}

	return Local_enuErrorState;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <TIMER_enuInterruptDisable>:

ES_t TIMER_enuInterruptDisable(u8 Copy_u8IntPin){
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <TIMER_enuInterruptDisable+0x6>
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetInterruptMode(Copy_u8IntPin,TIMER_POLLING);
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	6a e5       	ldi	r22, 0x5A	; 90
    19b2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
    19b6:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 23       	and	r24, r24
    19bc:	79 f4       	brne	.+30     	; 0x19dc <TIMER_enuInterruptDisable+0x3e>

		TIMER_astrTimerConfig[Copy_u8IntPin].timerintmode = TIMER_POLLING;
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	c9 01       	movw	r24, r18
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	82 0f       	add	r24, r18
    19d0:	93 1f       	adc	r25, r19
    19d2:	fc 01       	movw	r30, r24
    19d4:	e7 55       	subi	r30, 0x57	; 87
    19d6:	fd 4f       	sbci	r31, 0xFD	; 253
    19d8:	8a e5       	ldi	r24, 0x5A	; 90
    19da:	80 83       	st	Z, r24
	}
	else{}

	return Local_enuErrorState;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <TIMER_enuDisable>:

ES_t TIMER_enuDisable(u8 Copy_u8IntPin){
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <TIMER_enuDisable+0x6>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetPrescaler(Copy_u8IntPin,TIMER0_NO_CLK_SOURCE);
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <enuSetPrescaler>
    1a00:	89 83       	std	Y+1, r24	; 0x01

	if(Local_enuErrorState == ES_OK){
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	88 23       	and	r24, r24
    1a06:	71 f4       	brne	.+28     	; 0x1a24 <TIMER_enuDisable+0x3c>

		TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed = TIMER0_NO_CLK_SOURCE;
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	c9 01       	movw	r24, r18
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	82 0f       	add	r24, r18
    1a1a:	93 1f       	adc	r25, r19
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	e8 55       	subi	r30, 0x58	; 88
    1a20:	fd 4f       	sbci	r31, 0xFD	; 253
    1a22:	10 82       	st	Z, r1
	}
	else{}

	return Local_enuErrorState;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <TIMER_enuSetCallBack>:

ES_t TIMER_enuSetCallBack(void(* Copy_pfuncAppFunc)(void*),void * Copy_pvidParameter){
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <TIMER_enuSetCallBack+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <TIMER_enuSetCallBack+0x8>
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	9b 83       	std	Y+3, r25	; 0x03
    1a40:	8a 83       	std	Y+2, r24	; 0x02
    1a42:	7d 83       	std	Y+5, r23	; 0x05
    1a44:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pfuncAppFunc != NULL) && (Copy_pvidParameter != NULL)){
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	91 f0       	breq	.+36     	; 0x1a76 <TIMER_enuSetCallBack+0x46>
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	9d 81       	ldd	r25, Y+5	; 0x05
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	71 f0       	breq	.+28     	; 0x1a76 <TIMER_enuSetCallBack+0x46>

		LOC_pISRFunc = Copy_pfuncAppFunc;
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5e:	90 93 27 03 	sts	0x0327, r25
    1a62:	80 93 26 03 	sts	0x0326, r24
		LOC_pISRFuncParameters = Copy_pvidParameter;
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6a:	90 93 29 03 	sts	0x0329, r25
    1a6e:	80 93 28 03 	sts	0x0328, r24
		Local_enuErrorState = ES_OK;
    1a72:	19 82       	std	Y+1, r1	; 0x01
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <TIMER_enuSetCallBack+0x4a>
	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <enuSetWaveGenMode>:

ES_t enuSetWaveGenMode(u8 Copy_u8IntPin , u8 Copy_u8IntMode){
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <enuSetWaveGenMode+0x6>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <enuSetWaveGenMode+0x8>
    1a94:	0f 92       	push	r0
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	8a 83       	std	Y+2, r24	; 0x02
    1a9c:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01


	switch(Copy_u8IntPin){
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3d 83       	std	Y+5, r19	; 0x05
    1aaa:	2c 83       	std	Y+4, r18	; 0x04
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <enuSetWaveGenMode+0x2c>
    1ab6:	46 c0       	rjmp	.+140    	; 0x1b44 <enuSetWaveGenMode+0xb8>
    1ab8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aba:	3d 81       	ldd	r19, Y+5	; 0x05
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <enuSetWaveGenMode+0x38>
    1ac2:	40 c0       	rjmp	.+128    	; 0x1b44 <enuSetWaveGenMode+0xb8>
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	d1 f5       	brne	.+116    	; 0x1b40 <enuSetWaveGenMode+0xb4>

	    case TIMER_INT0 :
	    	TIMER_TCCR0 &= 0xB7;
    1acc:	a3 e5       	ldi	r26, 0x53	; 83
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e3 e5       	ldi	r30, 0x53	; 83
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	87 7b       	andi	r24, 0xB7	; 183
    1ad8:	8c 93       	st	X, r24
	    	if(Copy_u8IntMode == TIMER0_WAVEFORM_GEN_MODE_NORMAL){
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 23       	and	r24, r24
    1ade:	49 f4       	brne	.+18     	; 0x1af2 <enuSetWaveGenMode+0x66>
		    	TIMER_TCCR0 &= 0xB7;
    1ae0:	a3 e5       	ldi	r26, 0x53	; 83
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e3 e5       	ldi	r30, 0x53	; 83
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	87 7b       	andi	r24, 0xB7	; 183
    1aec:	8c 93       	st	X, r24
		    	Local_enuErrorState = ES_OK;
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	29 c0       	rjmp	.+82     	; 0x1b44 <enuSetWaveGenMode+0xb8>
	    	}
	    	else if(Copy_u8IntMode == TIMER0_WAVEFORM_GEN_MODE_PWM){
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	49 f4       	brne	.+18     	; 0x1b0a <enuSetWaveGenMode+0x7e>
	    		TIMER_TCCR0 |= 0x40;
    1af8:	a3 e5       	ldi	r26, 0x53	; 83
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e3 e5       	ldi	r30, 0x53	; 83
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 64       	ori	r24, 0x40	; 64
    1b04:	8c 93       	st	X, r24
		    	Local_enuErrorState = ES_OK;
    1b06:	19 82       	std	Y+1, r1	; 0x01
    1b08:	1d c0       	rjmp	.+58     	; 0x1b44 <enuSetWaveGenMode+0xb8>
	    	}
	    	else if(Copy_u8IntMode == TIMER0_WAVEFORM_GEN_MODE_CTC){
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	49 f4       	brne	.+18     	; 0x1b22 <enuSetWaveGenMode+0x96>
	    		TIMER_TCCR0 |= 0x08;
    1b10:	a3 e5       	ldi	r26, 0x53	; 83
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e3 e5       	ldi	r30, 0x53	; 83
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	88 60       	ori	r24, 0x08	; 8
    1b1c:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1b1e:	19 82       	std	Y+1, r1	; 0x01
    1b20:	11 c0       	rjmp	.+34     	; 0x1b44 <enuSetWaveGenMode+0xb8>
	    	}
	    	else if(Copy_u8IntMode == TIMER0_WAVEFORM_GEN_MODE_FASTPWM){
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	83 30       	cpi	r24, 0x03	; 3
    1b26:	49 f4       	brne	.+18     	; 0x1b3a <enuSetWaveGenMode+0xae>
	    		TIMER_TCCR0 |= 0x48;
    1b28:	a3 e5       	ldi	r26, 0x53	; 83
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e3 e5       	ldi	r30, 0x53	; 83
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	88 64       	ori	r24, 0x48	; 72
    1b34:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1b36:	19 82       	std	Y+1, r1	; 0x01
    1b38:	05 c0       	rjmp	.+10     	; 0x1b44 <enuSetWaveGenMode+0xb8>
	    	}
	    	else{

	    		Local_enuErrorState = ES_OUT_OF_RANGE;
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <enuSetWaveGenMode+0xb8>
	    case TIMER_INT1 :
	    	break;
	    case TIMER_INT2 :
	    	break;
	    default :
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	89 83       	std	Y+1, r24	; 0x01
	    	break;
	}

	return Local_enuErrorState;
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <enuSetPrescaler>:

ES_t enuSetPrescaler(u8 Copy_u8IntPin , u8 Copy_u8Prescaler){
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <enuSetPrescaler+0x6>
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <enuSetPrescaler+0x8>
    1b5e:	0f 92       	push	r0
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	8a 83       	std	Y+2, r24	; 0x02
    1b66:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPin){
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	3d 83       	std	Y+5, r19	; 0x05
    1b74:	2c 83       	std	Y+4, r18	; 0x04
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <enuSetPrescaler+0x2c>
    1b80:	77 c0       	rjmp	.+238    	; 0x1c70 <enuSetPrescaler+0x11a>
    1b82:	2c 81       	ldd	r18, Y+4	; 0x04
    1b84:	3d 81       	ldd	r19, Y+5	; 0x05
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	31 05       	cpc	r19, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <enuSetPrescaler+0x38>
    1b8c:	71 c0       	rjmp	.+226    	; 0x1c70 <enuSetPrescaler+0x11a>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <enuSetPrescaler+0x42>
    1b96:	6a c0       	rjmp	.+212    	; 0x1c6c <enuSetPrescaler+0x116>

		case TIMER_INT0 :

			TIMER_TCCR0 &= 0xF8;
    1b98:	a3 e5       	ldi	r26, 0x53	; 83
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e3 e5       	ldi	r30, 0x53	; 83
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 7f       	andi	r24, 0xF8	; 248
    1ba4:	8c 93       	st	X, r24
		    if(Copy_u8Prescaler == TIMER0_NO_CLK_SOURCE){
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	88 23       	and	r24, r24
    1baa:	49 f4       	brne	.+18     	; 0x1bbe <enuSetPrescaler+0x68>
			    TIMER_TCCR0 &= 0xF8;
    1bac:	a3 e5       	ldi	r26, 0x53	; 83
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e3 e5       	ldi	r30, 0x53	; 83
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	88 7f       	andi	r24, 0xF8	; 248
    1bb8:	8c 93       	st	X, r24
			    Local_enuErrorState = ES_OK;
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	59 c0       	rjmp	.+178    	; 0x1c70 <enuSetPrescaler+0x11a>
		    }
		    else if(Copy_u8Prescaler == TIMER0_PRESCALER_1){
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	49 f4       	brne	.+18     	; 0x1bd6 <enuSetPrescaler+0x80>
		    	TIMER_TCCR0 |= 0x01;
    1bc4:	a3 e5       	ldi	r26, 0x53	; 83
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e3 e5       	ldi	r30, 0x53	; 83
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	81 60       	ori	r24, 0x01	; 1
    1bd0:	8c 93       	st	X, r24
			    Local_enuErrorState = ES_OK;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	4d c0       	rjmp	.+154    	; 0x1c70 <enuSetPrescaler+0x11a>
		    }
		    else if(Copy_u8Prescaler == TIMER0_PRESCALER_8){
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	49 f4       	brne	.+18     	; 0x1bee <enuSetPrescaler+0x98>
		    	TIMER_TCCR0 |= 0x02;
    1bdc:	a3 e5       	ldi	r26, 0x53	; 83
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e3 e5       	ldi	r30, 0x53	; 83
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	82 60       	ori	r24, 0x02	; 2
    1be8:	8c 93       	st	X, r24
		    	Local_enuErrorState = ES_OK;
    1bea:	19 82       	std	Y+1, r1	; 0x01
    1bec:	41 c0       	rjmp	.+130    	; 0x1c70 <enuSetPrescaler+0x11a>
		    }
		    else if(Copy_u8Prescaler == TIMER0_PRESCALER_64){
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	49 f4       	brne	.+18     	; 0x1c06 <enuSetPrescaler+0xb0>
		    	TIMER_TCCR0 |= 0x03;
    1bf4:	a3 e5       	ldi	r26, 0x53	; 83
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e3 e5       	ldi	r30, 0x53	; 83
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	83 60       	ori	r24, 0x03	; 3
    1c00:	8c 93       	st	X, r24
		    	Local_enuErrorState = ES_OK;
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	35 c0       	rjmp	.+106    	; 0x1c70 <enuSetPrescaler+0x11a>
		    }
		    else if(Copy_u8Prescaler == TIMER0_PRESCALER_256){
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	49 f4       	brne	.+18     	; 0x1c1e <enuSetPrescaler+0xc8>
		    	TIMER_TCCR0 |= 0x04;
    1c0c:	a3 e5       	ldi	r26, 0x53	; 83
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e3 e5       	ldi	r30, 0x53	; 83
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	84 60       	ori	r24, 0x04	; 4
    1c18:	8c 93       	st	X, r24
		    	Local_enuErrorState = ES_OK;
    1c1a:	19 82       	std	Y+1, r1	; 0x01
    1c1c:	29 c0       	rjmp	.+82     	; 0x1c70 <enuSetPrescaler+0x11a>
		    }
		    else if(Copy_u8Prescaler == TIMER0_PRESCALER_1024){
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	85 30       	cpi	r24, 0x05	; 5
    1c22:	49 f4       	brne	.+18     	; 0x1c36 <enuSetPrescaler+0xe0>
		    	TIMER_TCCR0 |= 0x05;
    1c24:	a3 e5       	ldi	r26, 0x53	; 83
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e3 e5       	ldi	r30, 0x53	; 83
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	85 60       	ori	r24, 0x05	; 5
    1c30:	8c 93       	st	X, r24
		    	Local_enuErrorState = ES_OK;
    1c32:	19 82       	std	Y+1, r1	; 0x01
    1c34:	1d c0       	rjmp	.+58     	; 0x1c70 <enuSetPrescaler+0x11a>
		    }
		    else if(Copy_u8Prescaler == TIMER0_EXT_CLK_FALLING){
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	86 30       	cpi	r24, 0x06	; 6
    1c3a:	49 f4       	brne	.+18     	; 0x1c4e <enuSetPrescaler+0xf8>
		    	TIMER_TCCR0 |= 0x06;
    1c3c:	a3 e5       	ldi	r26, 0x53	; 83
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e3 e5       	ldi	r30, 0x53	; 83
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	86 60       	ori	r24, 0x06	; 6
    1c48:	8c 93       	st	X, r24
		    	Local_enuErrorState = ES_OK;
    1c4a:	19 82       	std	Y+1, r1	; 0x01
    1c4c:	11 c0       	rjmp	.+34     	; 0x1c70 <enuSetPrescaler+0x11a>
		    }
		    else if(Copy_u8Prescaler == TIMER0_EXT_CLK_RISING){
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	87 30       	cpi	r24, 0x07	; 7
    1c52:	49 f4       	brne	.+18     	; 0x1c66 <enuSetPrescaler+0x110>
		    	TIMER_TCCR0 |= 0x07;
    1c54:	a3 e5       	ldi	r26, 0x53	; 83
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e3 e5       	ldi	r30, 0x53	; 83
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	87 60       	ori	r24, 0x07	; 7
    1c60:	8c 93       	st	X, r24
		    	Local_enuErrorState = ES_OK;
    1c62:	19 82       	std	Y+1, r1	; 0x01
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <enuSetPrescaler+0x11a>
		    }
		    else{
		    	Local_enuErrorState = ES_OUT_OF_RANGE;
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <enuSetPrescaler+0x11a>
		case TIMER_INT1 :
		    break;
		case TIMER_INT2 :
		    break;
		default :
		    Local_enuErrorState = ES_OUT_OF_RANGE;
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	89 83       	std	Y+1, r24	; 0x01
		    break;
	}

	return Local_enuErrorState;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <enuSetCompNonPWMMode>:
	}

	return Local_enuErrorState;
}*/

ES_t enuSetCompNonPWMMode(u8 Copy_u8IntPin , u8 Copy_u8Mode){
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <enuSetCompNonPWMMode+0x6>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <enuSetCompNonPWMMode+0x8>
    1c8a:	0f 92       	push	r0
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPin){
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	3d 83       	std	Y+5, r19	; 0x05
    1ca0:	2c 83       	std	Y+4, r18	; 0x04
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	91 05       	cpc	r25, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <enuSetCompNonPWMMode+0x2c>
    1cac:	46 c0       	rjmp	.+140    	; 0x1d3a <enuSetCompNonPWMMode+0xb8>
    1cae:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <enuSetCompNonPWMMode+0x38>
    1cb8:	40 c0       	rjmp	.+128    	; 0x1d3a <enuSetCompNonPWMMode+0xb8>
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	d1 f5       	brne	.+116    	; 0x1d36 <enuSetCompNonPWMMode+0xb4>

	    case TIMER_INT0 :

	    	TIMER_TCCR0 &= 0xCF;
    1cc2:	a3 e5       	ldi	r26, 0x53	; 83
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e3 e5       	ldi	r30, 0x53	; 83
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 7c       	andi	r24, 0xCF	; 207
    1cce:	8c 93       	st	X, r24
	    	if(Copy_u8Mode == TIMER0_COMP_OUTPUT_NON_PWM_NORMAL){
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 23       	and	r24, r24
    1cd4:	49 f4       	brne	.+18     	; 0x1ce8 <enuSetCompNonPWMMode+0x66>
	    		TIMER_TCCR0 &= 0xCF;
    1cd6:	a3 e5       	ldi	r26, 0x53	; 83
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e3 e5       	ldi	r30, 0x53	; 83
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	8f 7c       	andi	r24, 0xCF	; 207
    1ce2:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1ce4:	19 82       	std	Y+1, r1	; 0x01
    1ce6:	29 c0       	rjmp	.+82     	; 0x1d3a <enuSetCompNonPWMMode+0xb8>
	    	}
	    	else if(Copy_u8Mode == TIMER0_COMP_OUTPUT_NON_PWM_TOGGLE_OC2){
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	49 f4       	brne	.+18     	; 0x1d00 <enuSetCompNonPWMMode+0x7e>
	    		TIMER_TCCR0 |= 0x10;
    1cee:	a3 e5       	ldi	r26, 0x53	; 83
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e3 e5       	ldi	r30, 0x53	; 83
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 61       	ori	r24, 0x10	; 16
    1cfa:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1cfc:	19 82       	std	Y+1, r1	; 0x01
    1cfe:	1d c0       	rjmp	.+58     	; 0x1d3a <enuSetCompNonPWMMode+0xb8>
	    	}
	    	else if(Copy_u8Mode == TIMER0_COMP_OUTPUT_NON_PWM_CLEAR_OC2){
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	82 30       	cpi	r24, 0x02	; 2
    1d04:	49 f4       	brne	.+18     	; 0x1d18 <enuSetCompNonPWMMode+0x96>
	    		TIMER_TCCR0 |= 0x20;
    1d06:	a3 e5       	ldi	r26, 0x53	; 83
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e3 e5       	ldi	r30, 0x53	; 83
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	80 62       	ori	r24, 0x20	; 32
    1d12:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1d14:	19 82       	std	Y+1, r1	; 0x01
    1d16:	11 c0       	rjmp	.+34     	; 0x1d3a <enuSetCompNonPWMMode+0xb8>
	    	}
	    	else if(Copy_u8Mode == TIMER0_COMP_OUTPUT_NON_PWM_SET_OC2){
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	49 f4       	brne	.+18     	; 0x1d30 <enuSetCompNonPWMMode+0xae>
	    		TIMER_TCCR0 |= 0x30;
    1d1e:	a3 e5       	ldi	r26, 0x53	; 83
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e3 e5       	ldi	r30, 0x53	; 83
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 63       	ori	r24, 0x30	; 48
    1d2a:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1d2c:	19 82       	std	Y+1, r1	; 0x01
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <enuSetCompNonPWMMode+0xb8>
	    	}
	    	else{

	    		Local_enuErrorState = ES_OUT_OF_RANGE;
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <enuSetCompNonPWMMode+0xb8>
	    case TIMER_INT1 :
	    	break;
	    case TIMER_INT2 :
	    	break;
	    default :
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	89 83       	std	Y+1, r24	; 0x01
	    	break;
	}

	return Local_enuErrorState;
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <enuSetInterruptMode>:

ES_t enuSetInterruptMode(u8 Copy_u8IntPin , u8 Copy_u8IntMode){
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <enuSetInterruptMode+0x6>
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <enuSetInterruptMode+0x8>
    1d54:	0f 92       	push	r0
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	8a 83       	std	Y+2, r24	; 0x02
    1d5c:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPin){
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	3d 83       	std	Y+5, r19	; 0x05
    1d6a:	2c 83       	std	Y+4, r18	; 0x04
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	91 05       	cpc	r25, r1
    1d74:	c9 f1       	breq	.+114    	; 0x1de8 <enuSetInterruptMode+0x9c>
    1d76:	2c 81       	ldd	r18, Y+4	; 0x04
    1d78:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7a:	22 30       	cpi	r18, 0x02	; 2
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	a1 f1       	breq	.+104    	; 0x1de8 <enuSetInterruptMode+0x9c>
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	9d 81       	ldd	r25, Y+5	; 0x05
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	71 f5       	brne	.+92     	; 0x1de4 <enuSetInterruptMode+0x98>

	    case TIMER_INT0 :

	    	TIMER_TIMSK &= 0xFC;
    1d88:	a9 e5       	ldi	r26, 0x59	; 89
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e9 e5       	ldi	r30, 0x59	; 89
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	8c 7f       	andi	r24, 0xFC	; 252
    1d94:	8c 93       	st	X, r24
	    	if(Copy_u8IntMode == TIMER_POLLING){
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	8a 35       	cpi	r24, 0x5A	; 90
    1d9a:	49 f4       	brne	.+18     	; 0x1dae <enuSetInterruptMode+0x62>
	    		TIMER_TIMSK &= 0xFC;
    1d9c:	a9 e5       	ldi	r26, 0x59	; 89
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e9 e5       	ldi	r30, 0x59	; 89
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8c 7f       	andi	r24, 0xFC	; 252
    1da8:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1daa:	19 82       	std	Y+1, r1	; 0x01
    1dac:	1d c0       	rjmp	.+58     	; 0x1de8 <enuSetInterruptMode+0x9c>
	    	}
	    	else if(Copy_u8IntMode == TIMER_OVFINT){
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	8b 35       	cpi	r24, 0x5B	; 91
    1db2:	49 f4       	brne	.+18     	; 0x1dc6 <enuSetInterruptMode+0x7a>
	    		TIMER_TIMSK |= 0x01;
    1db4:	a9 e5       	ldi	r26, 0x59	; 89
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e9 e5       	ldi	r30, 0x59	; 89
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	81 60       	ori	r24, 0x01	; 1
    1dc0:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1dc2:	19 82       	std	Y+1, r1	; 0x01
    1dc4:	11 c0       	rjmp	.+34     	; 0x1de8 <enuSetInterruptMode+0x9c>
	    	}
	    	else if(Copy_u8IntMode == TIMER_OCINT){
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	8c 35       	cpi	r24, 0x5C	; 92
    1dca:	49 f4       	brne	.+18     	; 0x1dde <enuSetInterruptMode+0x92>
	    		TIMER_TIMSK |= 0x02;
    1dcc:	a9 e5       	ldi	r26, 0x59	; 89
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e9 e5       	ldi	r30, 0x59	; 89
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	82 60       	ori	r24, 0x02	; 2
    1dd8:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    1dda:	19 82       	std	Y+1, r1	; 0x01
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <enuSetInterruptMode+0x9c>
	    	}
	    	else{

	    		Local_enuErrorState = ES_OUT_OF_RANGE;
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <enuSetInterruptMode+0x9c>
	    case TIMER_INT1 :
	    	break;
	    case TIMER_INT2 :
	    	break;
	    default :
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	89 83       	std	Y+1, r24	; 0x01
	    	break;
	}

	return Local_enuErrorState;
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <enuCalculateOVFNOCR>:

ES_t enuCalculateOVFNOCR(u8 Copy_u8IntPin , u16 Copy_u16DelayTime){
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	62 97       	sbiw	r28, 0x12	; 18
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	8e 87       	std	Y+14, r24	; 0x0e
    1e18:	78 8b       	std	Y+16, r23	; 0x10
    1e1a:	6f 87       	std	Y+15, r22	; 0x0f

	ES_t Local_enuErrorState = ES_NOK;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	8d 87       	std	Y+13, r24	; 0x0d

	switch(Copy_u8IntPin){
    1e20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	3a 8b       	std	Y+18, r19	; 0x12
    1e28:	29 8b       	std	Y+17, r18	; 0x11
    1e2a:	49 89       	ldd	r20, Y+17	; 0x11
    1e2c:	5a 89       	ldd	r21, Y+18	; 0x12
    1e2e:	41 30       	cpi	r20, 0x01	; 1
    1e30:	51 05       	cpc	r21, r1
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <enuCalculateOVFNOCR+0x3c>
    1e34:	c0 c1       	rjmp	.+896    	; 0x21b6 <enuCalculateOVFNOCR+0x3bc>
    1e36:	89 89       	ldd	r24, Y+17	; 0x11
    1e38:	9a 89       	ldd	r25, Y+18	; 0x12
    1e3a:	82 30       	cpi	r24, 0x02	; 2
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <enuCalculateOVFNOCR+0x48>
    1e40:	ba c1       	rjmp	.+884    	; 0x21b6 <enuCalculateOVFNOCR+0x3bc>
    1e42:	29 89       	ldd	r18, Y+17	; 0x11
    1e44:	3a 89       	ldd	r19, Y+18	; 0x12
    1e46:	21 15       	cp	r18, r1
    1e48:	31 05       	cpc	r19, r1
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <enuCalculateOVFNOCR+0x54>
    1e4c:	b2 c1       	rjmp	.+868    	; 0x21b2 <enuCalculateOVFNOCR+0x3b8>

	    case TIMER_INT0 :
	    	//f32 Local_f32OVFTime = (LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1] * 256.0) / (16000);

	    	if(TIMER_astrTimerConfig[TIMER_INT0].timerwaveformmode == TIMER0_WAVEFORM_GEN_MODE_NORMAL){
    1e4e:	80 91 a6 02 	lds	r24, 0x02A6
    1e52:	88 23       	and	r24, r24
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <enuCalculateOVFNOCR+0x5e>
    1e56:	0c c1       	rjmp	.+536    	; 0x2070 <enuCalculateOVFNOCR+0x276>

	    		f32 Local_f32OVFTime = (LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1] * 256.0) / (16000);
    1e58:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	c9 01       	movw	r24, r18
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	82 0f       	add	r24, r18
    1e6a:	93 1f       	adc	r25, r19
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e8 55       	subi	r30, 0x58	; 88
    1e70:	fd 4f       	sbci	r31, 0xFD	; 253
    1e72:	80 81       	ld	r24, Z
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e6 55       	subi	r30, 0x56	; 86
    1e82:	fd 4f       	sbci	r31, 0xFD	; 253
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	cc 01       	movw	r24, r24
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 b1 06 	call	0xd62	; 0xd62 <__floatunsisf>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	53 e4       	ldi	r21, 0x43	; 67
    1ea6:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a e7       	ldi	r20, 0x7A	; 122
    1eb8:	56 e4       	ldi	r21, 0x46	; 70
    1eba:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	89 87       	std	Y+9, r24	; 0x09
    1ec4:	9a 87       	std	Y+10, r25	; 0x0a
    1ec6:	ab 87       	std	Y+11, r26	; 0x0b
    1ec8:	bc 87       	std	Y+12, r27	; 0x0c

	    		if(Local_f32OVFTime <= Copy_u16DelayTime){
    1eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ecc:	98 89       	ldd	r25, Y+16	; 0x10
    1ece:	cc 01       	movw	r24, r24
    1ed0:	a0 e0       	ldi	r26, 0x00	; 0
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 b1 06 	call	0xd62	; 0xd62 <__floatunsisf>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	29 85       	ldd	r18, Y+9	; 0x09
    1ee6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ee8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1eea:	5c 85       	ldd	r21, Y+12	; 0x0c
    1eec:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__gesf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	0c f4       	brge	.+2      	; 0x1ef6 <enuCalculateOVFNOCR+0xfc>
    1ef4:	62 c0       	rjmp	.+196    	; 0x1fba <enuCalculateOVFNOCR+0x1c0>

	    			DIO_enuSetPinDirection(DIO_GROUP_D,DIO_PIN_7,DIO_OUTPUT);
    1ef6:	83 e0       	ldi	r24, 0x03	; 3
    1ef8:	67 e0       	ldi	r22, 0x07	; 7
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	    			DIO_enuSetPinValue(DIO_GROUP_D,DIO_PIN_7,DIO_HIGH);
    1f00:	83 e0       	ldi	r24, 0x03	; 3
    1f02:	67 e0       	ldi	r22, 0x07	; 7
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

	    			enuSetWaveGenMode(TIMER_INT0,TIMER0_WAVEFORM_GEN_MODE_NORMAL);
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>

	    			u16 Local_u16CyclesNum = (Copy_u16DelayTime * 16000UL) /
	    					(LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1]) ;
    1f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f14:	98 89       	ldd	r25, Y+16	; 0x10
    1f16:	cc 01       	movw	r24, r24
    1f18:	a0 e0       	ldi	r26, 0x00	; 0
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	20 e8       	ldi	r18, 0x80	; 128
    1f1e:	3e e3       	ldi	r19, 0x3E	; 62
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
    1f2c:	7b 01       	movw	r14, r22
    1f2e:	8c 01       	movw	r16, r24
    1f30:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	c9 01       	movw	r24, r18
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	fc 01       	movw	r30, r24
    1f46:	e8 55       	subi	r30, 0x58	; 88
    1f48:	fd 4f       	sbci	r31, 0xFD	; 253
    1f4a:	80 81       	ld	r24, Z
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	fc 01       	movw	r30, r24
    1f58:	e6 55       	subi	r30, 0x56	; 86
    1f5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	9c 01       	movw	r18, r24
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	c8 01       	movw	r24, r16
    1f68:	b7 01       	movw	r22, r14
    1f6a:	0e 94 0c 3b 	call	0x7618	; 0x7618 <__udivmodsi4>
    1f6e:	da 01       	movw	r26, r20
    1f70:	c9 01       	movw	r24, r18
    1f72:	98 87       	std	Y+8, r25	; 0x08
    1f74:	8f 83       	std	Y+7, r24	; 0x07

	    		    LOC_u16OVF = (Local_u16CyclesNum + 255) / (256);
    1f76:	8f 81       	ldd	r24, Y+7	; 0x07
    1f78:	98 85       	ldd	r25, Y+8	; 0x08
    1f7a:	81 50       	subi	r24, 0x01	; 1
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	89 2f       	mov	r24, r25
    1f80:	99 27       	eor	r25, r25
    1f82:	90 93 2b 03 	sts	0x032B, r25
    1f86:	80 93 2a 03 	sts	0x032A, r24

	    		    u8 Local_u8PreLoad = 256 - (Local_u16CyclesNum % 256);
    1f8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f8c:	81 95       	neg	r24
    1f8e:	8e 83       	std	Y+6, r24	; 0x06


	    		    LOC_u8Preload = Local_u8PreLoad;
    1f90:	8e 81       	ldd	r24, Y+6	; 0x06
    1f92:	80 93 34 03 	sts	0x0334, r24
	    		    LOC_u16OVFCounts = LOC_u16OVF;
    1f96:	80 91 2a 03 	lds	r24, 0x032A
    1f9a:	90 91 2b 03 	lds	r25, 0x032B
    1f9e:	90 93 2d 03 	sts	0x032D, r25
    1fa2:	80 93 2c 03 	sts	0x032C, r24
	    			TIMER_TCNT0 = Local_u8PreLoad;
    1fa6:	e2 e5       	ldi	r30, 0x52	; 82
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	8e 81       	ldd	r24, Y+6	; 0x06
    1fac:	80 83       	st	Z, r24

	    		    Local_enuErrorState = ES_OK;
    1fae:	1d 86       	std	Y+13, r1	; 0x0d

	    		    enuSetInterruptMode(Copy_u8IntPin,TIMER_OVFINT);
    1fb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb2:	6b e5       	ldi	r22, 0x5B	; 91
    1fb4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
    1fb8:	fe c0       	rjmp	.+508    	; 0x21b6 <enuCalculateOVFNOCR+0x3bc>
	    		}
	    		else if(Local_f32OVFTime > Copy_u16DelayTime){
    1fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbc:	98 89       	ldd	r25, Y+16	; 0x10
    1fbe:	cc 01       	movw	r24, r24
    1fc0:	a0 e0       	ldi	r26, 0x00	; 0
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 b1 06 	call	0xd62	; 0xd62 <__floatunsisf>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	29 85       	ldd	r18, Y+9	; 0x09
    1fd6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fda:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fdc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	0c f0       	brlt	.+2      	; 0x1fe6 <enuCalculateOVFNOCR+0x1ec>
    1fe4:	e8 c0       	rjmp	.+464    	; 0x21b6 <enuCalculateOVFNOCR+0x3bc>

	    			//DIO_enuSetPinDirection(DIO_GROUP_D,DIO_PIN_7,DIO_OUTPUT);
	    	        //DIO_enuSetPinValue(DIO_GROUP_D,DIO_PIN_7,DIO_HIGH);

	    			enuSetWaveGenMode(TIMER_INT0,TIMER0_WAVEFORM_GEN_MODE_CTC);
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>

	    			u8 Local_u8CyclesNum = (Copy_u16DelayTime * 16000UL) /
	    					(LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1]);
    1fee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff0:	98 89       	ldd	r25, Y+16	; 0x10
    1ff2:	cc 01       	movw	r24, r24
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	20 e8       	ldi	r18, 0x80	; 128
    1ffa:	3e e3       	ldi	r19, 0x3E	; 62
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
    2008:	7b 01       	movw	r14, r22
    200a:	8c 01       	movw	r16, r24
    200c:	8e 85       	ldd	r24, Y+14	; 0x0e
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	c9 01       	movw	r24, r18
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	82 0f       	add	r24, r18
    201e:	93 1f       	adc	r25, r19
    2020:	fc 01       	movw	r30, r24
    2022:	e8 55       	subi	r30, 0x58	; 88
    2024:	fd 4f       	sbci	r31, 0xFD	; 253
    2026:	80 81       	ld	r24, Z
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	fc 01       	movw	r30, r24
    2034:	e6 55       	subi	r30, 0x56	; 86
    2036:	fd 4f       	sbci	r31, 0xFD	; 253
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	9c 01       	movw	r18, r24
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	c8 01       	movw	r24, r16
    2044:	b7 01       	movw	r22, r14
    2046:	0e 94 0c 3b 	call	0x7618	; 0x7618 <__udivmodsi4>
    204a:	da 01       	movw	r26, r20
    204c:	c9 01       	movw	r24, r18
    204e:	8d 83       	std	Y+5, r24	; 0x05

	    		    LOC_u16OVF = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	90 93 2b 03 	sts	0x032B, r25
    2058:	80 93 2a 03 	sts	0x032A, r24
	    		    TIMER_OCR0 = Local_u8CyclesNum;
    205c:	ec e5       	ldi	r30, 0x5C	; 92
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	80 83       	st	Z, r24

	    			Local_enuErrorState = ES_OK;
    2064:	1d 86       	std	Y+13, r1	; 0x0d

	    		    enuSetInterruptMode(Copy_u8IntPin,TIMER_OCINT);
    2066:	8e 85       	ldd	r24, Y+14	; 0x0e
    2068:	6c e5       	ldi	r22, 0x5C	; 92
    206a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
    206e:	a3 c0       	rjmp	.+326    	; 0x21b6 <enuCalculateOVFNOCR+0x3bc>
	    		}
	    	}
	    	else if(TIMER_astrTimerConfig[TIMER_INT0].timerwaveformmode == TIMER0_WAVEFORM_GEN_MODE_CTC){
    2070:	80 91 a6 02 	lds	r24, 0x02A6
    2074:	82 30       	cpi	r24, 0x02	; 2
    2076:	09 f0       	breq	.+2      	; 0x207a <enuCalculateOVFNOCR+0x280>
    2078:	9e c0       	rjmp	.+316    	; 0x21b6 <enuCalculateOVFNOCR+0x3bc>

	    		enuSetWaveGenMode(TIMER_INT0,TIMER0_WAVEFORM_GEN_MODE_CTC);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	62 e0       	ldi	r22, 0x02	; 2
    207e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>

	    		//DIO_enuSetPinDirection(DIO_GROUP_D,DIO_PIN_7,DIO_OUTPUT);
	    		//DIO_enuSetPinValue(DIO_GROUP_D,DIO_PIN_7,DIO_HIGH);

	    		f32 Local_f32OVFTime = (LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1] * 256.0) / (16000);
    2082:	8e 85       	ldd	r24, Y+14	; 0x0e
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	c9 01       	movw	r24, r18
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	82 0f       	add	r24, r18
    2094:	93 1f       	adc	r25, r19
    2096:	fc 01       	movw	r30, r24
    2098:	e8 55       	subi	r30, 0x58	; 88
    209a:	fd 4f       	sbci	r31, 0xFD	; 253
    209c:	80 81       	ld	r24, Z
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	fc 01       	movw	r30, r24
    20aa:	e6 55       	subi	r30, 0x56	; 86
    20ac:	fd 4f       	sbci	r31, 0xFD	; 253
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	cc 01       	movw	r24, r24
    20b4:	a0 e0       	ldi	r26, 0x00	; 0
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 b1 06 	call	0xd62	; 0xd62 <__floatunsisf>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	53 e4       	ldi	r21, 0x43	; 67
    20d0:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	56 e4       	ldi	r21, 0x46	; 70
    20e4:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	9a 83       	std	Y+2, r25	; 0x02
    20f0:	ab 83       	std	Y+3, r26	; 0x03
    20f2:	bc 83       	std	Y+4, r27	; 0x04

	    		LOC_u16OCRValue = ((u8)Local_f32OVFTime * 16000) /
    20f4:	69 81       	ldd	r22, Y+1	; 0x01
    20f6:	7a 81       	ldd	r23, Y+2	; 0x02
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	80 e8       	ldi	r24, 0x80	; 128
    210a:	9e e3       	ldi	r25, 0x3E	; 62
    210c:	ac 01       	movw	r20, r24
    210e:	24 9f       	mul	r18, r20
    2110:	c0 01       	movw	r24, r0
    2112:	25 9f       	mul	r18, r21
    2114:	90 0d       	add	r25, r0
    2116:	34 9f       	mul	r19, r20
    2118:	90 0d       	add	r25, r0
    211a:	11 24       	eor	r1, r1
    211c:	ac 01       	movw	r20, r24
    211e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	c9 01       	movw	r24, r18
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	fc 01       	movw	r30, r24
    2134:	e8 55       	subi	r30, 0x58	; 88
    2136:	fd 4f       	sbci	r31, 0xFD	; 253
    2138:	80 81       	ld	r24, Z
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	fc 01       	movw	r30, r24
    2146:	e6 55       	subi	r30, 0x56	; 86
    2148:	fd 4f       	sbci	r31, 0xFD	; 253
    214a:	20 81       	ld	r18, Z
    214c:	31 81       	ldd	r19, Z+1	; 0x01
    214e:	ca 01       	movw	r24, r20
    2150:	b9 01       	movw	r22, r18
    2152:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <__udivmodhi4>
    2156:	cb 01       	movw	r24, r22
    2158:	90 93 2f 03 	sts	0x032F, r25
    215c:	80 93 2e 03 	sts	0x032E, r24
	    				(LOC_au16PrescalerValues[TIMER_astrTimerConfig[Copy_u8IntPin].timerclockspeed - 1]);


	    		LOC_u16CTC = Copy_u16DelayTime / (u8)Local_f32OVFTime;
    2160:	69 81       	ldd	r22, Y+1	; 0x01
    2162:	7a 81       	ldd	r23, Y+2	; 0x02
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	8f 85       	ldd	r24, Y+15	; 0x0f
    2176:	98 89       	ldd	r25, Y+16	; 0x10
    2178:	b9 01       	movw	r22, r18
    217a:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <__udivmodhi4>
    217e:	cb 01       	movw	r24, r22
    2180:	90 93 31 03 	sts	0x0331, r25
    2184:	80 93 30 03 	sts	0x0330, r24
                LOC_u16CTCCounts = LOC_u16CTC;
    2188:	80 91 30 03 	lds	r24, 0x0330
    218c:	90 91 31 03 	lds	r25, 0x0331
    2190:	90 93 33 03 	sts	0x0333, r25
    2194:	80 93 32 03 	sts	0x0332, r24


				TIMER_OCR0 = (u8)LOC_u16OCRValue;
    2198:	ec e5       	ldi	r30, 0x5C	; 92
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 91 2e 03 	lds	r24, 0x032E
    21a0:	90 91 2f 03 	lds	r25, 0x032F
    21a4:	80 83       	st	Z, r24

				Local_enuErrorState = ES_OK;
    21a6:	1d 86       	std	Y+13, r1	; 0x0d

				enuSetInterruptMode(Copy_u8IntPin,TIMER_OCINT);
    21a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21aa:	6c e5       	ldi	r22, 0x5C	; 92
    21ac:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enuSetInterruptMode>
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <enuCalculateOVFNOCR+0x3bc>
	    case TIMER_INT1 :
	    	break;
	    case TIMER_INT2 :
	    	break;
	    default :
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	8d 87       	std	Y+13, r24	; 0x0d
	    	break;
	}


	return Local_enuErrorState;
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    21b8:	62 96       	adiw	r28, 0x12	; 18
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	08 95       	ret

000021d2 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_11(void)__attribute__((signal));

void __vector_10(void){
    21d2:	1f 92       	push	r1
    21d4:	0f 92       	push	r0
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	0f 92       	push	r0
    21da:	11 24       	eor	r1, r1
    21dc:	2f 93       	push	r18
    21de:	3f 93       	push	r19
    21e0:	4f 93       	push	r20
    21e2:	5f 93       	push	r21
    21e4:	6f 93       	push	r22
    21e6:	7f 93       	push	r23
    21e8:	8f 93       	push	r24
    21ea:	9f 93       	push	r25
    21ec:	af 93       	push	r26
    21ee:	bf 93       	push	r27
    21f0:	ef 93       	push	r30
    21f2:	ff 93       	push	r31
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62

	LOC_u16CTC--;
    21fc:	80 91 30 03 	lds	r24, 0x0330
    2200:	90 91 31 03 	lds	r25, 0x0331
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	90 93 31 03 	sts	0x0331, r25
    220a:	80 93 30 03 	sts	0x0330, r24
	if(LOC_u16CTC == 0){
    220e:	80 91 30 03 	lds	r24, 0x0330
    2212:	90 91 31 03 	lds	r25, 0x0331
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	d9 f4       	brne	.+54     	; 0x2250 <__vector_10+0x7e>
		LOC_pISRFunc(LOC_pISRFuncParameters);
    221a:	e0 91 26 03 	lds	r30, 0x0326
    221e:	f0 91 27 03 	lds	r31, 0x0327
    2222:	80 91 28 03 	lds	r24, 0x0328
    2226:	90 91 29 03 	lds	r25, 0x0329
    222a:	09 95       	icall
		DIO_enuTogglePinValue(DIO_GROUP_C,DIO_PIN_7);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	67 e0       	ldi	r22, 0x07	; 7
    2230:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <DIO_enuTogglePinValue>
		LOC_u16CTC = LOC_u16CTCCounts;
    2234:	80 91 32 03 	lds	r24, 0x0332
    2238:	90 91 33 03 	lds	r25, 0x0333
    223c:	90 93 31 03 	sts	0x0331, r25
    2240:	80 93 30 03 	sts	0x0330, r24
		enuSetWaveGenMode(TIMER_INT0,TIMER_astrTimerConfig[TIMER_INT0].timerwaveformmode);
    2244:	90 91 a6 02 	lds	r25, 0x02A6
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	69 2f       	mov	r22, r25
    224c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <enuSetWaveGenMode>
		//enuSetInterruptMode(0,TIMER_POLLING);
	}

}
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	ff 91       	pop	r31
    2256:	ef 91       	pop	r30
    2258:	bf 91       	pop	r27
    225a:	af 91       	pop	r26
    225c:	9f 91       	pop	r25
    225e:	8f 91       	pop	r24
    2260:	7f 91       	pop	r23
    2262:	6f 91       	pop	r22
    2264:	5f 91       	pop	r21
    2266:	4f 91       	pop	r20
    2268:	3f 91       	pop	r19
    226a:	2f 91       	pop	r18
    226c:	0f 90       	pop	r0
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	0f 90       	pop	r0
    2272:	1f 90       	pop	r1
    2274:	18 95       	reti

00002276 <__vector_11>:

void __vector_11(void){
    2276:	1f 92       	push	r1
    2278:	0f 92       	push	r0
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
    2280:	2f 93       	push	r18
    2282:	3f 93       	push	r19
    2284:	4f 93       	push	r20
    2286:	5f 93       	push	r21
    2288:	6f 93       	push	r22
    228a:	7f 93       	push	r23
    228c:	8f 93       	push	r24
    228e:	9f 93       	push	r25
    2290:	af 93       	push	r26
    2292:	bf 93       	push	r27
    2294:	ef 93       	push	r30
    2296:	ff 93       	push	r31
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62


	//TIMER_TIFR &= ~(1<<0);
	//DIO_enuSetPinDirection(DIO_GROUP_D,DIO_PIN_6,DIO_OUTPUT);
	DIO_enuTogglePinValue(DIO_GROUP_D,DIO_PIN_6);
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	66 e0       	ldi	r22, 0x06	; 6
    22a4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <DIO_enuTogglePinValue>
	LOC_u16OVF--;
    22a8:	80 91 2a 03 	lds	r24, 0x032A
    22ac:	90 91 2b 03 	lds	r25, 0x032B
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	90 93 2b 03 	sts	0x032B, r25
    22b6:	80 93 2a 03 	sts	0x032A, r24
	if(LOC_u16OVF == 0){
    22ba:	80 91 2a 03 	lds	r24, 0x032A
    22be:	90 91 2b 03 	lds	r25, 0x032B
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	69 f4       	brne	.+26     	; 0x22e0 <__vector_11+0x6a>
		LOC_pISRFunc(LOC_pISRFuncParameters);
    22c6:	e0 91 26 03 	lds	r30, 0x0326
    22ca:	f0 91 27 03 	lds	r31, 0x0327
    22ce:	80 91 28 03 	lds	r24, 0x0328
    22d2:	90 91 29 03 	lds	r25, 0x0329
    22d6:	09 95       	icall
		//enuSetWaveGenMode(TIMER_INT0,TIMER_astrTimerConfig[TIMER_INT0].timerwaveformmode);
		//enuSetInterruptMode(0,TIMER_POLLING);
		//TIMER_TCNT0 = LOC_u8Preload;
		//LOC_u16OVF = LOC_u16OVFCounts;
		//DIO_enuSetPinDirection(DIO_GROUP_B,DIO_PIN_7,DIO_OUTPUT);
		DIO_enuTogglePinValue(DIO_GROUP_C,DIO_PIN_7);
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	67 e0       	ldi	r22, 0x07	; 7
    22dc:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <DIO_enuTogglePinValue>

	}
}
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	ff 91       	pop	r31
    22e6:	ef 91       	pop	r30
    22e8:	bf 91       	pop	r27
    22ea:	af 91       	pop	r26
    22ec:	9f 91       	pop	r25
    22ee:	8f 91       	pop	r24
    22f0:	7f 91       	pop	r23
    22f2:	6f 91       	pop	r22
    22f4:	5f 91       	pop	r21
    22f6:	4f 91       	pop	r20
    22f8:	3f 91       	pop	r19
    22fa:	2f 91       	pop	r18
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	0f 90       	pop	r0
    2302:	1f 90       	pop	r1
    2304:	18 95       	reti

00002306 <GIE_vidEnable>:
#include "../../LIB/stdTypes.h"

// own lib
#include "GIE_priv.h"

void GIE_vidEnable(void){
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62

	GIE_SREG |= (1<<7);
    230e:	af e5       	ldi	r26, 0x5F	; 95
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	ef e5       	ldi	r30, 0x5F	; 95
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	80 68       	ori	r24, 0x80	; 128
    231a:	8c 93       	st	X, r24
	//asm("SEI");
	//__asm("SEI");
	//__asm__("SEI");
}
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <GIE_vidDisable>:

void GIE_vidDisable(void){
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62

	GIE_SREG &= ~(1<<7);
    232a:	af e5       	ldi	r26, 0x5F	; 95
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	ef e5       	ldi	r30, 0x5F	; 95
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8f 77       	andi	r24, 0x7F	; 127
    2336:	8c 93       	st	X, r24
	//asm("CLI");
	//__asm("CLI");
	//__asm__("CLI");
}
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <EXTI_enuInit>:
static pfuncISRFunc_t LOC_apISRFunc[EXTI_NUM_PINS] = {NULL,NULL,NULL};

static vidptr_t LOC_apISRFuncParameters[EXTI_NUM_PINS] = {NULL,NULL,NULL};

// enable GIE , PIE by setting mode to interrupt
ES_t EXTI_enuInit(void){
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	00 d0       	rcall	.+0      	; 0x2344 <EXTI_enuInit+0x6>
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iter;

	for(Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTIPinNum ; Local_u8Iter++){
    234c:	19 82       	std	Y+1, r1	; 0x01
    234e:	3b c0       	rjmp	.+118    	; 0x23c6 <EXTI_enuInit+0x88>

		enuSetSenseLevel(EXTI_astrEXTIConfig[Local_u8Iter].intPin,
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	c9 01       	movw	r24, r18
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	82 0f       	add	r24, r18
    235e:	93 1f       	adc	r25, r19
    2360:	fc 01       	movw	r30, r24
    2362:	eb 54       	subi	r30, 0x4B	; 75
    2364:	fd 4f       	sbci	r31, 0xFD	; 253
    2366:	40 81       	ld	r20, Z
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	c9 01       	movw	r24, r18
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	82 0f       	add	r24, r18
    2376:	93 1f       	adc	r25, r19
    2378:	fc 01       	movw	r30, r24
    237a:	ea 54       	subi	r30, 0x4A	; 74
    237c:	fd 4f       	sbci	r31, 0xFD	; 253
    237e:	90 81       	ld	r25, Z
    2380:	84 2f       	mov	r24, r20
    2382:	69 2f       	mov	r22, r25
    2384:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <enuSetSenseLevel>
				EXTI_astrEXTIConfig[Local_u8Iter].senselevel);

		enuSetIntMode(EXTI_astrEXTIConfig[Local_u8Iter].intPin,
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	c9 01       	movw	r24, r18
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	82 0f       	add	r24, r18
    2396:	93 1f       	adc	r25, r19
    2398:	fc 01       	movw	r30, r24
    239a:	eb 54       	subi	r30, 0x4B	; 75
    239c:	fd 4f       	sbci	r31, 0xFD	; 253
    239e:	40 81       	ld	r20, Z
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	c9 01       	movw	r24, r18
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	82 0f       	add	r24, r18
    23ae:	93 1f       	adc	r25, r19
    23b0:	fc 01       	movw	r30, r24
    23b2:	e9 54       	subi	r30, 0x49	; 73
    23b4:	fd 4f       	sbci	r31, 0xFD	; 253
    23b6:	90 81       	ld	r25, Z
    23b8:	84 2f       	mov	r24, r20
    23ba:	69 2f       	mov	r22, r25
    23bc:	0e 94 2a 13 	call	0x2654	; 0x2654 <enuSetIntMode>

	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_u8Iter;

	for(Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTIPinNum ; Local_u8Iter++){
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	90 91 b4 02 	lds	r25, 0x02B4
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	89 17       	cp	r24, r25
    23ce:	08 f4       	brcc	.+2      	; 0x23d2 <EXTI_enuInit+0x94>
    23d0:	bf cf       	rjmp	.-130    	; 0x2350 <EXTI_enuInit+0x12>
		enuSetIntMode(EXTI_astrEXTIConfig[Local_u8Iter].intPin,
				EXTI_astrEXTIConfig[Local_u8Iter].intMode);
	}


	return Local_enuErrorState;
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <EXTI_enuSetSenseLevel>:

// to set sense level to enable PIF if sense what specify
ES_t EXTI_enuSetSenseLevel(u8 Copy_u8IntPin , u8 Copy_u8SenseLevel){
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <EXTI_enuSetSenseLevel+0x6>
    23e4:	0f 92       	push	r0
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	8a 83       	std	Y+2, r24	; 0x02
    23ec:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetSenseLevel(Copy_u8IntPin,Copy_u8SenseLevel);
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	6b 81       	ldd	r22, Y+3	; 0x03
    23f6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <enuSetSenseLevel>
    23fa:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <EXTI_enuEnableInterrupt>:

// to enable PIE
ES_t EXTI_enuEnableInterrupt(u8 Copy_IntPin){
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <EXTI_enuEnableInterrupt+0x6>
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetSenseLevel(Copy_IntPin,EXTI_INTERRUPT_MODE);
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	60 e5       	ldi	r22, 0x50	; 80
    241e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <enuSetSenseLevel>
    2422:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2424:	89 81       	ldd	r24, Y+1	; 0x01
}
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <EXTI_enuDisableInterrupt>:

//to disable PIE
ES_t EXTI_enuDisableInterrupt(u8 Copy_IntPin){
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	00 d0       	rcall	.+0      	; 0x2436 <EXTI_enuDisableInterrupt+0x6>
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = enuSetSenseLevel(Copy_IntPin,EXTI_POOLING_MODE);
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	6a e5       	ldi	r22, 0x5A	; 90
    2444:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <enuSetSenseLevel>
    2448:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    244a:	89 81       	ldd	r24, Y+1	; 0x01
}
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <EXTI_enuSetCallBack>:

ES_t EXTI_enuSetCallBack(u8 Copy_u8IntPin , void(*Copy_pFuncAppFunc)(void),void * Copy_pvidParameter){
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <EXTI_enuSetCallBack+0x6>
    245c:	00 d0       	rcall	.+0      	; 0x245e <EXTI_enuSetCallBack+0x8>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <EXTI_enuSetCallBack+0xa>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	8a 83       	std	Y+2, r24	; 0x02
    2466:	7c 83       	std	Y+4, r23	; 0x04
    2468:	6b 83       	std	Y+3, r22	; 0x03
    246a:	5e 83       	std	Y+6, r21	; 0x06
    246c:	4d 83       	std	Y+5, r20	; 0x05

	ES_t Local_enuErrorState = ES_NOK;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pFuncAppFunc != NULL) && (Copy_pvidParameter != NULL)){
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	19 f1       	breq	.+70     	; 0x24c0 <EXTI_enuSetCallBack+0x6a>
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	f9 f0       	breq	.+62     	; 0x24c0 <EXTI_enuSetCallBack+0x6a>

		if((Copy_u8IntPin >= EXTI_INT0) && (Copy_u8IntPin <= EXTI_INT2)){
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	83 30       	cpi	r24, 0x03	; 3
    2486:	c8 f4       	brcc	.+50     	; 0x24ba <EXTI_enuSetCallBack+0x64>

			LOC_apISRFunc[Copy_u8IntPin] = Copy_pFuncAppFunc;
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	2b 81       	ldd	r18, Y+3	; 0x03
    2490:	3c 81       	ldd	r19, Y+4	; 0x04
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	fc 01       	movw	r30, r24
    2498:	eb 5c       	subi	r30, 0xCB	; 203
    249a:	fc 4f       	sbci	r31, 0xFC	; 252
    249c:	31 83       	std	Z+1, r19	; 0x01
    249e:	20 83       	st	Z, r18
			LOC_apISRFuncParameters[Copy_u8IntPin]= Copy_pvidParameter;
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	fc 01       	movw	r30, r24
    24ac:	e5 5c       	subi	r30, 0xC5	; 197
    24ae:	fc 4f       	sbci	r31, 0xFC	; 252
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	80 83       	st	Z, r24
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <EXTI_enuSetCallBack+0x6e>
		}
		else{

			Local_enuErrorState =  ES_OUT_OF_RANGE;
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <EXTI_enuSetCallBack+0x6e>
		}
	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c6:	26 96       	adiw	r28, 0x06	; 6
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	f8 94       	cli
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	0f be       	out	0x3f, r0	; 63
    24d0:	cd bf       	out	0x3d, r28	; 61
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <enuSetSenseLevel>:

ES_t enuSetSenseLevel(u8 Copy_u8IntPin , u8 Copy_u8SenseLevel){
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	00 d0       	rcall	.+0      	; 0x24de <enuSetSenseLevel+0x6>
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <enuSetSenseLevel+0x8>
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPin){
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	3d 83       	std	Y+5, r19	; 0x05
    24f6:	2c 83       	std	Y+4, r18	; 0x04
    24f8:	8c 81       	ldd	r24, Y+4	; 0x04
    24fa:	9d 81       	ldd	r25, Y+5	; 0x05
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	91 05       	cpc	r25, r1
    2500:	09 f4       	brne	.+2      	; 0x2504 <enuSetSenseLevel+0x2c>
    2502:	4a c0       	rjmp	.+148    	; 0x2598 <enuSetSenseLevel+0xc0>
    2504:	2c 81       	ldd	r18, Y+4	; 0x04
    2506:	3d 81       	ldd	r19, Y+5	; 0x05
    2508:	22 30       	cpi	r18, 0x02	; 2
    250a:	31 05       	cpc	r19, r1
    250c:	09 f4       	brne	.+2      	; 0x2510 <enuSetSenseLevel+0x38>
    250e:	82 c0       	rjmp	.+260    	; 0x2614 <enuSetSenseLevel+0x13c>
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	09 f0       	breq	.+2      	; 0x251a <enuSetSenseLevel+0x42>
    2518:	94 c0       	rjmp	.+296    	; 0x2642 <enuSetSenseLevel+0x16a>

	    case EXTI_INT0 :
	    	if(Copy_u8SenseLevel == EXTI_LOW_LEVEL){
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	8a 30       	cpi	r24, 0x0A	; 10
    251e:	49 f4       	brne	.+18     	; 0x2532 <enuSetSenseLevel+0x5a>
	    		MCUCR &= ~(3<<0);
    2520:	a5 e5       	ldi	r26, 0x55	; 85
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e5 e5       	ldi	r30, 0x55	; 85
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	8c 7f       	andi	r24, 0xFC	; 252
    252c:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    252e:	19 82       	std	Y+1, r1	; 0x01
    2530:	88 c0       	rjmp	.+272    	; 0x2642 <enuSetSenseLevel+0x16a>
	    	}
	    	else if(Copy_u8SenseLevel == EXTI_ANY_CHANGE){
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	8b 30       	cpi	r24, 0x0B	; 11
    2536:	81 f4       	brne	.+32     	; 0x2558 <enuSetSenseLevel+0x80>
	    		MCUCR &= ~(3<<0);
    2538:	a5 e5       	ldi	r26, 0x55	; 85
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e5 e5       	ldi	r30, 0x55	; 85
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	8c 7f       	andi	r24, 0xFC	; 252
    2544:	8c 93       	st	X, r24
	    		MCUCR |= (1<<0);
    2546:	a5 e5       	ldi	r26, 0x55	; 85
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e5 e5       	ldi	r30, 0x55	; 85
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	81 60       	ori	r24, 0x01	; 1
    2552:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    2554:	19 82       	std	Y+1, r1	; 0x01
    2556:	75 c0       	rjmp	.+234    	; 0x2642 <enuSetSenseLevel+0x16a>
	    	}
	    	else if(Copy_u8SenseLevel == EXTI_FALLING_EDGE){
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	8c 30       	cpi	r24, 0x0C	; 12
    255c:	81 f4       	brne	.+32     	; 0x257e <enuSetSenseLevel+0xa6>
	    		MCUCR &= ~(3<<0);
    255e:	a5 e5       	ldi	r26, 0x55	; 85
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e5 e5       	ldi	r30, 0x55	; 85
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8c 7f       	andi	r24, 0xFC	; 252
    256a:	8c 93       	st	X, r24
	    		MCUCR |= (1<<1);
    256c:	a5 e5       	ldi	r26, 0x55	; 85
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e5 e5       	ldi	r30, 0x55	; 85
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	82 60       	ori	r24, 0x02	; 2
    2578:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    257a:	19 82       	std	Y+1, r1	; 0x01
    257c:	62 c0       	rjmp	.+196    	; 0x2642 <enuSetSenseLevel+0x16a>
	    	}
	    	else if(Copy_u8SenseLevel == EXTI_RISING_EDGE){
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	8d 30       	cpi	r24, 0x0D	; 13
    2582:	09 f0       	breq	.+2      	; 0x2586 <enuSetSenseLevel+0xae>
    2584:	5e c0       	rjmp	.+188    	; 0x2642 <enuSetSenseLevel+0x16a>
	    		MCUCR |= (3<<0);
    2586:	a5 e5       	ldi	r26, 0x55	; 85
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e5 e5       	ldi	r30, 0x55	; 85
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	83 60       	ori	r24, 0x03	; 3
    2592:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	55 c0       	rjmp	.+170    	; 0x2642 <enuSetSenseLevel+0x16a>
	    	}
	    	else{}
	    	break;
	    case EXTI_INT1 :
	    	if(Copy_u8SenseLevel == EXTI_LOW_LEVEL){
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	8a 30       	cpi	r24, 0x0A	; 10
    259c:	49 f4       	brne	.+18     	; 0x25b0 <enuSetSenseLevel+0xd8>
	    		MCUCR &= ~(3<<2);
    259e:	a5 e5       	ldi	r26, 0x55	; 85
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e5 e5       	ldi	r30, 0x55	; 85
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	83 7f       	andi	r24, 0xF3	; 243
    25aa:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    25ac:	19 82       	std	Y+1, r1	; 0x01
    25ae:	49 c0       	rjmp	.+146    	; 0x2642 <enuSetSenseLevel+0x16a>
	    	}
	        else if(Copy_u8SenseLevel == EXTI_ANY_CHANGE){
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	8b 30       	cpi	r24, 0x0B	; 11
    25b4:	81 f4       	brne	.+32     	; 0x25d6 <enuSetSenseLevel+0xfe>
	        	MCUCR &= ~(3<<2);
    25b6:	a5 e5       	ldi	r26, 0x55	; 85
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e5 e5       	ldi	r30, 0x55	; 85
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	83 7f       	andi	r24, 0xF3	; 243
    25c2:	8c 93       	st	X, r24
	        	MCUCR |= (1<<2);
    25c4:	a5 e5       	ldi	r26, 0x55	; 85
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e5 e5       	ldi	r30, 0x55	; 85
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	84 60       	ori	r24, 0x04	; 4
    25d0:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    25d2:	19 82       	std	Y+1, r1	; 0x01
    25d4:	36 c0       	rjmp	.+108    	; 0x2642 <enuSetSenseLevel+0x16a>
	        }
	        else if(Copy_u8SenseLevel == EXTI_FALLING_EDGE){
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	8c 30       	cpi	r24, 0x0C	; 12
    25da:	81 f4       	brne	.+32     	; 0x25fc <enuSetSenseLevel+0x124>
	        	MCUCR &= ~(3<<2);
    25dc:	a5 e5       	ldi	r26, 0x55	; 85
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e5 e5       	ldi	r30, 0x55	; 85
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	83 7f       	andi	r24, 0xF3	; 243
    25e8:	8c 93       	st	X, r24
	        	MCUCR |= (1<<3);
    25ea:	a5 e5       	ldi	r26, 0x55	; 85
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e5 e5       	ldi	r30, 0x55	; 85
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	88 60       	ori	r24, 0x08	; 8
    25f6:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    25f8:	19 82       	std	Y+1, r1	; 0x01
    25fa:	23 c0       	rjmp	.+70     	; 0x2642 <enuSetSenseLevel+0x16a>
	        }
	    	else if(Copy_u8SenseLevel == EXTI_RISING_EDGE){
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	8d 30       	cpi	r24, 0x0D	; 13
    2600:	01 f5       	brne	.+64     	; 0x2642 <enuSetSenseLevel+0x16a>
	    		MCUCR |= (3<<2);
    2602:	a5 e5       	ldi	r26, 0x55	; 85
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e5 e5       	ldi	r30, 0x55	; 85
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	8c 60       	ori	r24, 0x0C	; 12
    260e:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    2610:	19 82       	std	Y+1, r1	; 0x01
    2612:	17 c0       	rjmp	.+46     	; 0x2642 <enuSetSenseLevel+0x16a>
	    	}
	    	else{}
	    	break;
	    case EXTI_INT2 :
	    	if(Copy_u8SenseLevel == EXTI_FALLING_EDGE){
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	8c 30       	cpi	r24, 0x0C	; 12
    2618:	49 f4       	brne	.+18     	; 0x262c <enuSetSenseLevel+0x154>
	    		MCUCSR &= ~(1<<6);
    261a:	a4 e5       	ldi	r26, 0x54	; 84
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e4 e5       	ldi	r30, 0x54	; 84
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8f 7b       	andi	r24, 0xBF	; 191
    2626:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    2628:	19 82       	std	Y+1, r1	; 0x01
    262a:	0b c0       	rjmp	.+22     	; 0x2642 <enuSetSenseLevel+0x16a>
	    	}
	        else if(Copy_u8SenseLevel == EXTI_RISING_EDGE){
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	8d 30       	cpi	r24, 0x0D	; 13
    2630:	41 f4       	brne	.+16     	; 0x2642 <enuSetSenseLevel+0x16a>
	    		MCUCSR |= (1<<6);
    2632:	a4 e5       	ldi	r26, 0x54	; 84
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e4 e5       	ldi	r30, 0x54	; 84
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	80 64       	ori	r24, 0x40	; 64
    263e:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    2640:	19 82       	std	Y+1, r1	; 0x01
	    	break;


	}

	return Local_enuErrorState;
    2642:	89 81       	ldd	r24, Y+1	; 0x01
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <enuSetIntMode>:

ES_t enuSetIntMode(u8 Copy_u8IntPin , u8 Copy_u8IntMode){
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <enuSetIntMode+0x6>
    265a:	00 d0       	rcall	.+0      	; 0x265c <enuSetIntMode+0x8>
    265c:	0f 92       	push	r0
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	8a 83       	std	Y+2, r24	; 0x02
    2664:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPin){
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	3d 83       	std	Y+5, r19	; 0x05
    2672:	2c 83       	std	Y+4, r18	; 0x04
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	9d 81       	ldd	r25, Y+5	; 0x05
    2678:	81 30       	cpi	r24, 0x01	; 1
    267a:	91 05       	cpc	r25, r1
    267c:	11 f1       	breq	.+68     	; 0x26c2 <enuSetIntMode+0x6e>
    267e:	2c 81       	ldd	r18, Y+4	; 0x04
    2680:	3d 81       	ldd	r19, Y+5	; 0x05
    2682:	22 30       	cpi	r18, 0x02	; 2
    2684:	31 05       	cpc	r19, r1
    2686:	a9 f1       	breq	.+106    	; 0x26f2 <enuSetIntMode+0x9e>
    2688:	8c 81       	ldd	r24, Y+4	; 0x04
    268a:	9d 81       	ldd	r25, Y+5	; 0x05
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	09 f0       	breq	.+2      	; 0x2692 <enuSetIntMode+0x3e>
    2690:	47 c0       	rjmp	.+142    	; 0x2720 <enuSetIntMode+0xcc>

	    case EXTI_INT0 :
	    	if(Copy_u8IntMode == EXTI_INTERRUPT_MODE){
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	80 35       	cpi	r24, 0x50	; 80
    2696:	49 f4       	brne	.+18     	; 0x26aa <enuSetIntMode+0x56>
	    		GICR |= (1<<6);
    2698:	ab e5       	ldi	r26, 0x5B	; 91
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	eb e5       	ldi	r30, 0x5B	; 91
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	80 64       	ori	r24, 0x40	; 64
    26a4:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    26a6:	19 82       	std	Y+1, r1	; 0x01
    26a8:	3b c0       	rjmp	.+118    	; 0x2720 <enuSetIntMode+0xcc>
	    	}
	    	else if(Copy_u8IntMode == EXTI_POOLING_MODE){
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	8a 35       	cpi	r24, 0x5A	; 90
    26ae:	c1 f5       	brne	.+112    	; 0x2720 <enuSetIntMode+0xcc>
	    		GICR &= ~(1<<6);
    26b0:	ab e5       	ldi	r26, 0x5B	; 91
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	eb e5       	ldi	r30, 0x5B	; 91
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	8f 7b       	andi	r24, 0xBF	; 191
    26bc:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    26be:	19 82       	std	Y+1, r1	; 0x01
    26c0:	2f c0       	rjmp	.+94     	; 0x2720 <enuSetIntMode+0xcc>
	    	}
	    	else{}
	    	break;
	    case EXTI_INT1 :
	    	if(Copy_u8IntMode == EXTI_INTERRUPT_MODE){
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	80 35       	cpi	r24, 0x50	; 80
    26c6:	49 f4       	brne	.+18     	; 0x26da <enuSetIntMode+0x86>
	    		GICR |= (1<<7);
    26c8:	ab e5       	ldi	r26, 0x5B	; 91
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	eb e5       	ldi	r30, 0x5B	; 91
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	80 68       	ori	r24, 0x80	; 128
    26d4:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    26d6:	19 82       	std	Y+1, r1	; 0x01
    26d8:	23 c0       	rjmp	.+70     	; 0x2720 <enuSetIntMode+0xcc>
	    	}
	    	else if(Copy_u8IntMode == EXTI_POOLING_MODE){
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	8a 35       	cpi	r24, 0x5A	; 90
    26de:	01 f5       	brne	.+64     	; 0x2720 <enuSetIntMode+0xcc>
	    		GICR &= ~(1<<7);
    26e0:	ab e5       	ldi	r26, 0x5B	; 91
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	eb e5       	ldi	r30, 0x5B	; 91
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 77       	andi	r24, 0x7F	; 127
    26ec:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    26ee:	19 82       	std	Y+1, r1	; 0x01
    26f0:	17 c0       	rjmp	.+46     	; 0x2720 <enuSetIntMode+0xcc>
	    	}
	    	else{}
	    	break;
	    case EXTI_INT2 :
	    	if(Copy_u8IntMode == EXTI_INTERRUPT_MODE){
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	80 35       	cpi	r24, 0x50	; 80
    26f6:	49 f4       	brne	.+18     	; 0x270a <enuSetIntMode+0xb6>
	    		GICR |= (1<<5);
    26f8:	ab e5       	ldi	r26, 0x5B	; 91
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	eb e5       	ldi	r30, 0x5B	; 91
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	80 62       	ori	r24, 0x20	; 32
    2704:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    2706:	19 82       	std	Y+1, r1	; 0x01
    2708:	0b c0       	rjmp	.+22     	; 0x2720 <enuSetIntMode+0xcc>
	    	}
	    	else if(Copy_u8IntMode == EXTI_POOLING_MODE){
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	8a 35       	cpi	r24, 0x5A	; 90
    270e:	41 f4       	brne	.+16     	; 0x2720 <enuSetIntMode+0xcc>
	    		GICR &= ~(1<<5);
    2710:	ab e5       	ldi	r26, 0x5B	; 91
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	eb e5       	ldi	r30, 0x5B	; 91
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8f 7d       	andi	r24, 0xDF	; 223
    271c:	8c 93       	st	X, r24
	    		Local_enuErrorState = ES_OK;
    271e:	19 82       	std	Y+1, r1	; 0x01
	    default :
	    	break;

	}

	return Local_enuErrorState;
    2720:	89 81       	ldd	r24, Y+1	; 0x01


}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <__vector_1>:

void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1(void){
    2732:	1f 92       	push	r1
    2734:	0f 92       	push	r0
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	0f 92       	push	r0
    273a:	11 24       	eor	r1, r1
    273c:	2f 93       	push	r18
    273e:	3f 93       	push	r19
    2740:	4f 93       	push	r20
    2742:	5f 93       	push	r21
    2744:	6f 93       	push	r22
    2746:	7f 93       	push	r23
    2748:	8f 93       	push	r24
    274a:	9f 93       	push	r25
    274c:	af 93       	push	r26
    274e:	bf 93       	push	r27
    2750:	ef 93       	push	r30
    2752:	ff 93       	push	r31
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62

	if(LOC_apISRFunc[EXTI_INT0] != NULL){
    275c:	80 91 35 03 	lds	r24, 0x0335
    2760:	90 91 36 03 	lds	r25, 0x0336
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	49 f0       	breq	.+18     	; 0x277a <__vector_1+0x48>

		LOC_apISRFunc[EXTI_INT0](LOC_apISRFuncParameters[EXTI_INT0]);
    2768:	e0 91 35 03 	lds	r30, 0x0335
    276c:	f0 91 36 03 	lds	r31, 0x0336
    2770:	80 91 3b 03 	lds	r24, 0x033B
    2774:	90 91 3c 03 	lds	r25, 0x033C
    2778:	09 95       	icall
	}
	else{}
}
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	ff 91       	pop	r31
    2780:	ef 91       	pop	r30
    2782:	bf 91       	pop	r27
    2784:	af 91       	pop	r26
    2786:	9f 91       	pop	r25
    2788:	8f 91       	pop	r24
    278a:	7f 91       	pop	r23
    278c:	6f 91       	pop	r22
    278e:	5f 91       	pop	r21
    2790:	4f 91       	pop	r20
    2792:	3f 91       	pop	r19
    2794:	2f 91       	pop	r18
    2796:	0f 90       	pop	r0
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	0f 90       	pop	r0
    279c:	1f 90       	pop	r1
    279e:	18 95       	reti

000027a0 <__vector_2>:

void __vector_2(void){
    27a0:	1f 92       	push	r1
    27a2:	0f 92       	push	r0
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	0f 92       	push	r0
    27a8:	11 24       	eor	r1, r1
    27aa:	2f 93       	push	r18
    27ac:	3f 93       	push	r19
    27ae:	4f 93       	push	r20
    27b0:	5f 93       	push	r21
    27b2:	6f 93       	push	r22
    27b4:	7f 93       	push	r23
    27b6:	8f 93       	push	r24
    27b8:	9f 93       	push	r25
    27ba:	af 93       	push	r26
    27bc:	bf 93       	push	r27
    27be:	ef 93       	push	r30
    27c0:	ff 93       	push	r31
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62

	if(LOC_apISRFunc[EXTI_INT1] != NULL){
    27ca:	80 91 37 03 	lds	r24, 0x0337
    27ce:	90 91 38 03 	lds	r25, 0x0338
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	49 f0       	breq	.+18     	; 0x27e8 <__vector_2+0x48>

		LOC_apISRFunc[EXTI_INT1](LOC_apISRFuncParameters[EXTI_INT1]);
    27d6:	e0 91 37 03 	lds	r30, 0x0337
    27da:	f0 91 38 03 	lds	r31, 0x0338
    27de:	80 91 3d 03 	lds	r24, 0x033D
    27e2:	90 91 3e 03 	lds	r25, 0x033E
    27e6:	09 95       	icall
	}
	else{}

}
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	ff 91       	pop	r31
    27ee:	ef 91       	pop	r30
    27f0:	bf 91       	pop	r27
    27f2:	af 91       	pop	r26
    27f4:	9f 91       	pop	r25
    27f6:	8f 91       	pop	r24
    27f8:	7f 91       	pop	r23
    27fa:	6f 91       	pop	r22
    27fc:	5f 91       	pop	r21
    27fe:	4f 91       	pop	r20
    2800:	3f 91       	pop	r19
    2802:	2f 91       	pop	r18
    2804:	0f 90       	pop	r0
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	0f 90       	pop	r0
    280a:	1f 90       	pop	r1
    280c:	18 95       	reti

0000280e <__vector_3>:

void __vector_3(void){
    280e:	1f 92       	push	r1
    2810:	0f 92       	push	r0
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	0f 92       	push	r0
    2816:	11 24       	eor	r1, r1
    2818:	2f 93       	push	r18
    281a:	3f 93       	push	r19
    281c:	4f 93       	push	r20
    281e:	5f 93       	push	r21
    2820:	6f 93       	push	r22
    2822:	7f 93       	push	r23
    2824:	8f 93       	push	r24
    2826:	9f 93       	push	r25
    2828:	af 93       	push	r26
    282a:	bf 93       	push	r27
    282c:	ef 93       	push	r30
    282e:	ff 93       	push	r31
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62

	if(LOC_apISRFunc[EXTI_INT2] != NULL){
    2838:	80 91 39 03 	lds	r24, 0x0339
    283c:	90 91 3a 03 	lds	r25, 0x033A
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	49 f0       	breq	.+18     	; 0x2856 <__vector_3+0x48>

		LOC_apISRFunc[EXTI_INT2](LOC_apISRFuncParameters[EXTI_INT2]);
    2844:	e0 91 39 03 	lds	r30, 0x0339
    2848:	f0 91 3a 03 	lds	r31, 0x033A
    284c:	80 91 3f 03 	lds	r24, 0x033F
    2850:	90 91 40 03 	lds	r25, 0x0340
    2854:	09 95       	icall
	}
	else{}
}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	ff 91       	pop	r31
    285c:	ef 91       	pop	r30
    285e:	bf 91       	pop	r27
    2860:	af 91       	pop	r26
    2862:	9f 91       	pop	r25
    2864:	8f 91       	pop	r24
    2866:	7f 91       	pop	r23
    2868:	6f 91       	pop	r22
    286a:	5f 91       	pop	r21
    286c:	4f 91       	pop	r20
    286e:	3f 91       	pop	r19
    2870:	2f 91       	pop	r18
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <DIO_enuInit>:
// my own lib
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	0f 92       	push	r0
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction){
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <DIO_enuSetPinDirection+0x6>
    289a:	00 d0       	rcall	.+0      	; 0x289c <DIO_enuSetPinDirection+0x8>
    289c:	00 d0       	rcall	.+0      	; 0x289e <DIO_enuSetPinDirection+0xa>
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	6b 83       	std	Y+3, r22	; 0x03
    28a6:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7) && (Copy_u8Direction <= DIO_OUTPUT) ){
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	84 30       	cpi	r24, 0x04	; 4
    28b0:	08 f0       	brcs	.+2      	; 0x28b4 <DIO_enuSetPinDirection+0x20>
    28b2:	d0 c0       	rjmp	.+416    	; 0x2a54 <DIO_enuSetPinDirection+0x1c0>
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	88 30       	cpi	r24, 0x08	; 8
    28b8:	08 f0       	brcs	.+2      	; 0x28bc <DIO_enuSetPinDirection+0x28>
    28ba:	cc c0       	rjmp	.+408    	; 0x2a54 <DIO_enuSetPinDirection+0x1c0>
    28bc:	8c 81       	ldd	r24, Y+4	; 0x04
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	08 f0       	brcs	.+2      	; 0x28c4 <DIO_enuSetPinDirection+0x30>
    28c2:	c8 c0       	rjmp	.+400    	; 0x2a54 <DIO_enuSetPinDirection+0x1c0>

		switch (Copy_u8GroupID){
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	3e 83       	std	Y+6, r19	; 0x06
    28cc:	2d 83       	std	Y+5, r18	; 0x05
    28ce:	6d 81       	ldd	r22, Y+5	; 0x05
    28d0:	7e 81       	ldd	r23, Y+6	; 0x06
    28d2:	61 30       	cpi	r22, 0x01	; 1
    28d4:	71 05       	cpc	r23, r1
    28d6:	09 f4       	brne	.+2      	; 0x28da <DIO_enuSetPinDirection+0x46>
    28d8:	41 c0       	rjmp	.+130    	; 0x295c <DIO_enuSetPinDirection+0xc8>
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	82 30       	cpi	r24, 0x02	; 2
    28e0:	91 05       	cpc	r25, r1
    28e2:	34 f4       	brge	.+12     	; 0x28f0 <DIO_enuSetPinDirection+0x5c>
    28e4:	2d 81       	ldd	r18, Y+5	; 0x05
    28e6:	3e 81       	ldd	r19, Y+6	; 0x06
    28e8:	21 15       	cp	r18, r1
    28ea:	31 05       	cpc	r19, r1
    28ec:	71 f0       	breq	.+28     	; 0x290a <DIO_enuSetPinDirection+0x76>
    28ee:	b0 c0       	rjmp	.+352    	; 0x2a50 <DIO_enuSetPinDirection+0x1bc>
    28f0:	6d 81       	ldd	r22, Y+5	; 0x05
    28f2:	7e 81       	ldd	r23, Y+6	; 0x06
    28f4:	62 30       	cpi	r22, 0x02	; 2
    28f6:	71 05       	cpc	r23, r1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <DIO_enuSetPinDirection+0x68>
    28fa:	59 c0       	rjmp	.+178    	; 0x29ae <DIO_enuSetPinDirection+0x11a>
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	83 30       	cpi	r24, 0x03	; 3
    2902:	91 05       	cpc	r25, r1
    2904:	09 f4       	brne	.+2      	; 0x2908 <DIO_enuSetPinDirection+0x74>
    2906:	7c c0       	rjmp	.+248    	; 0x2a00 <DIO_enuSetPinDirection+0x16c>
    2908:	a3 c0       	rjmp	.+326    	; 0x2a50 <DIO_enuSetPinDirection+0x1bc>

		    case DIO_GROUP_A :
		    	DIO_DDRA_REG &= ~(DIO_BIT_MASK << Copy_u8PinID);
    290a:	aa e3       	ldi	r26, 0x3A	; 58
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	ea e3       	ldi	r30, 0x3A	; 58
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	48 2f       	mov	r20, r24
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <DIO_enuSetPinDirection+0x92>
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	2a 95       	dec	r18
    2928:	e2 f7       	brpl	.-8      	; 0x2922 <DIO_enuSetPinDirection+0x8e>
    292a:	80 95       	com	r24
    292c:	84 23       	and	r24, r20
    292e:	8c 93       	st	X, r24
		    	DIO_DDRA_REG |= (Copy_u8Direction << Copy_u8PinID);
    2930:	aa e3       	ldi	r26, 0x3A	; 58
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	ea e3       	ldi	r30, 0x3A	; 58
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	48 2f       	mov	r20, r24
    293c:	8c 81       	ldd	r24, Y+4	; 0x04
    293e:	28 2f       	mov	r18, r24
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	b9 01       	movw	r22, r18
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <DIO_enuSetPinDirection+0xbc>
    294c:	66 0f       	add	r22, r22
    294e:	77 1f       	adc	r23, r23
    2950:	8a 95       	dec	r24
    2952:	e2 f7       	brpl	.-8      	; 0x294c <DIO_enuSetPinDirection+0xb8>
    2954:	cb 01       	movw	r24, r22
    2956:	84 2b       	or	r24, r20
    2958:	8c 93       	st	X, r24
    295a:	7a c0       	rjmp	.+244    	; 0x2a50 <DIO_enuSetPinDirection+0x1bc>
			break;
		    case DIO_GROUP_B :
		    	DIO_DDRB_REG &= ~(DIO_BIT_MASK << Copy_u8PinID);
    295c:	a7 e3       	ldi	r26, 0x37	; 55
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e7 e3       	ldi	r30, 0x37	; 55
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	48 2f       	mov	r20, r24
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <DIO_enuSetPinDirection+0xe4>
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	2a 95       	dec	r18
    297a:	e2 f7       	brpl	.-8      	; 0x2974 <DIO_enuSetPinDirection+0xe0>
    297c:	80 95       	com	r24
    297e:	84 23       	and	r24, r20
    2980:	8c 93       	st	X, r24
		    	DIO_DDRB_REG |= (Copy_u8Direction << Copy_u8PinID);
    2982:	a7 e3       	ldi	r26, 0x37	; 55
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e7 e3       	ldi	r30, 0x37	; 55
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	48 2f       	mov	r20, r24
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	b9 01       	movw	r22, r18
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <DIO_enuSetPinDirection+0x10e>
    299e:	66 0f       	add	r22, r22
    29a0:	77 1f       	adc	r23, r23
    29a2:	8a 95       	dec	r24
    29a4:	e2 f7       	brpl	.-8      	; 0x299e <DIO_enuSetPinDirection+0x10a>
    29a6:	cb 01       	movw	r24, r22
    29a8:	84 2b       	or	r24, r20
    29aa:	8c 93       	st	X, r24
    29ac:	51 c0       	rjmp	.+162    	; 0x2a50 <DIO_enuSetPinDirection+0x1bc>
		    break;
		    case DIO_GROUP_C :
		    	DIO_DDRC_REG &= ~(DIO_BIT_MASK << Copy_u8PinID );
    29ae:	a4 e3       	ldi	r26, 0x34	; 52
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e4 e3       	ldi	r30, 0x34	; 52
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	48 2f       	mov	r20, r24
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <DIO_enuSetPinDirection+0x136>
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	2a 95       	dec	r18
    29cc:	e2 f7       	brpl	.-8      	; 0x29c6 <DIO_enuSetPinDirection+0x132>
    29ce:	80 95       	com	r24
    29d0:	84 23       	and	r24, r20
    29d2:	8c 93       	st	X, r24
		    	DIO_DDRC_REG |= (Copy_u8Direction << Copy_u8PinID);
    29d4:	a4 e3       	ldi	r26, 0x34	; 52
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e4 e3       	ldi	r30, 0x34	; 52
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	48 2f       	mov	r20, r24
    29e0:	8c 81       	ldd	r24, Y+4	; 0x04
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	88 2f       	mov	r24, r24
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	b9 01       	movw	r22, r18
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <DIO_enuSetPinDirection+0x160>
    29f0:	66 0f       	add	r22, r22
    29f2:	77 1f       	adc	r23, r23
    29f4:	8a 95       	dec	r24
    29f6:	e2 f7       	brpl	.-8      	; 0x29f0 <DIO_enuSetPinDirection+0x15c>
    29f8:	cb 01       	movw	r24, r22
    29fa:	84 2b       	or	r24, r20
    29fc:	8c 93       	st	X, r24
    29fe:	28 c0       	rjmp	.+80     	; 0x2a50 <DIO_enuSetPinDirection+0x1bc>
		    break;
		    case DIO_GROUP_D :
		    	DIO_DDRD_REG &= ~(DIO_BIT_MASK << Copy_u8PinID);
    2a00:	a1 e3       	ldi	r26, 0x31	; 49
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e1 e3       	ldi	r30, 0x31	; 49
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	48 2f       	mov	r20, r24
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <DIO_enuSetPinDirection+0x188>
    2a18:	88 0f       	add	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	2a 95       	dec	r18
    2a1e:	e2 f7       	brpl	.-8      	; 0x2a18 <DIO_enuSetPinDirection+0x184>
    2a20:	80 95       	com	r24
    2a22:	84 23       	and	r24, r20
    2a24:	8c 93       	st	X, r24
		    	DIO_DDRD_REG |= (Copy_u8Direction << Copy_u8PinID);
    2a26:	a1 e3       	ldi	r26, 0x31	; 49
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e1 e3       	ldi	r30, 0x31	; 49
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	48 2f       	mov	r20, r24
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	b9 01       	movw	r22, r18
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <DIO_enuSetPinDirection+0x1b2>
    2a42:	66 0f       	add	r22, r22
    2a44:	77 1f       	adc	r23, r23
    2a46:	8a 95       	dec	r24
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <DIO_enuSetPinDirection+0x1ae>
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	84 2b       	or	r24, r20
    2a4e:	8c 93       	st	X, r24
		    break;
		    default:
		    break;
		}

		Local_enuErrorState = ES_OK;
    2a50:	19 82       	std	Y+1, r1	; 0x01
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <DIO_enuSetPinDirection+0x1c4>

	}

	else {

		Local_enuErrorState = ES_OUT_OF_RANGE;
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	89 83       	std	Y+1, r24	; 0x01

	}



	return Local_enuErrorState;
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a5a:	26 96       	adiw	r28, 0x06	; 6
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <DIO_enuSetPinValue>:


ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value){
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <DIO_enuSetPinValue+0x6>
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <DIO_enuSetPinValue+0x8>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <DIO_enuSetPinValue+0xa>
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
    2a7c:	6b 83       	std	Y+3, r22	; 0x03
    2a7e:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7) && (Copy_u8Value <= DIO_HIGH) ){
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	84 30       	cpi	r24, 0x04	; 4
    2a88:	08 f0       	brcs	.+2      	; 0x2a8c <DIO_enuSetPinValue+0x20>
    2a8a:	db c0       	rjmp	.+438    	; 0x2c42 <DIO_enuSetPinValue+0x1d6>
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	88 30       	cpi	r24, 0x08	; 8
    2a90:	08 f0       	brcs	.+2      	; 0x2a94 <DIO_enuSetPinValue+0x28>
    2a92:	d7 c0       	rjmp	.+430    	; 0x2c42 <DIO_enuSetPinValue+0x1d6>
    2a94:	8c 81       	ldd	r24, Y+4	; 0x04
    2a96:	82 30       	cpi	r24, 0x02	; 2
    2a98:	08 f0       	brcs	.+2      	; 0x2a9c <DIO_enuSetPinValue+0x30>
    2a9a:	d3 c0       	rjmp	.+422    	; 0x2c42 <DIO_enuSetPinValue+0x1d6>

		switch (Copy_u8GroupID){
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	3e 83       	std	Y+6, r19	; 0x06
    2aa4:	2d 83       	std	Y+5, r18	; 0x05
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	91 05       	cpc	r25, r1
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <DIO_enuSetPinValue+0x46>
    2ab0:	43 c0       	rjmp	.+134    	; 0x2b38 <DIO_enuSetPinValue+0xcc>
    2ab2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab4:	3e 81       	ldd	r19, Y+6	; 0x06
    2ab6:	22 30       	cpi	r18, 0x02	; 2
    2ab8:	31 05       	cpc	r19, r1
    2aba:	2c f4       	brge	.+10     	; 0x2ac6 <DIO_enuSetPinValue+0x5a>
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	71 f0       	breq	.+28     	; 0x2ae0 <DIO_enuSetPinValue+0x74>
    2ac4:	bc c0       	rjmp	.+376    	; 0x2c3e <DIO_enuSetPinValue+0x1d2>
    2ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    2aca:	22 30       	cpi	r18, 0x02	; 2
    2acc:	31 05       	cpc	r19, r1
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <DIO_enuSetPinValue+0x66>
    2ad0:	5f c0       	rjmp	.+190    	; 0x2b90 <DIO_enuSetPinValue+0x124>
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	83 30       	cpi	r24, 0x03	; 3
    2ad8:	91 05       	cpc	r25, r1
    2ada:	09 f4       	brne	.+2      	; 0x2ade <DIO_enuSetPinValue+0x72>
    2adc:	85 c0       	rjmp	.+266    	; 0x2be8 <DIO_enuSetPinValue+0x17c>
    2ade:	af c0       	rjmp	.+350    	; 0x2c3e <DIO_enuSetPinValue+0x1d2>

			case DIO_GROUP_A :
			    if( Copy_u8Value == DIO_HIGH ){
    2ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	a1 f4       	brne	.+40     	; 0x2b0e <DIO_enuSetPinValue+0xa2>
			    	DIO_PORTA_REG |= (DIO_BIT_MASK << Copy_u8PinID);
    2ae6:	ab e3       	ldi	r26, 0x3B	; 59
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	eb e3       	ldi	r30, 0x3B	; 59
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	48 2f       	mov	r20, r24
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	02 2e       	mov	r0, r18
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <DIO_enuSetPinValue+0x98>
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	0a 94       	dec	r0
    2b06:	e2 f7       	brpl	.-8      	; 0x2b00 <DIO_enuSetPinValue+0x94>
    2b08:	84 2b       	or	r24, r20
    2b0a:	8c 93       	st	X, r24
    2b0c:	98 c0       	rjmp	.+304    	; 0x2c3e <DIO_enuSetPinValue+0x1d2>
			    }
			    else{
			    	DIO_PORTA_REG &= ~(DIO_BIT_MASK << Copy_u8PinID);
    2b0e:	ab e3       	ldi	r26, 0x3B	; 59
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	eb e3       	ldi	r30, 0x3B	; 59
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	48 2f       	mov	r20, r24
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	02 2e       	mov	r0, r18
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <DIO_enuSetPinValue+0xc0>
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	0a 94       	dec	r0
    2b2e:	e2 f7       	brpl	.-8      	; 0x2b28 <DIO_enuSetPinValue+0xbc>
    2b30:	80 95       	com	r24
    2b32:	84 23       	and	r24, r20
    2b34:	8c 93       	st	X, r24
    2b36:	83 c0       	rjmp	.+262    	; 0x2c3e <DIO_enuSetPinValue+0x1d2>
			    }
			break;
			case DIO_GROUP_B :
				if( Copy_u8Value == DIO_HIGH ){
    2b38:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3a:	81 30       	cpi	r24, 0x01	; 1
    2b3c:	a1 f4       	brne	.+40     	; 0x2b66 <DIO_enuSetPinValue+0xfa>
					DIO_PORTB_REG |= (DIO_BIT_MASK << Copy_u8PinID);
    2b3e:	a8 e3       	ldi	r26, 0x38	; 56
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e8 e3       	ldi	r30, 0x38	; 56
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	48 2f       	mov	r20, r24
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	02 2e       	mov	r0, r18
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <DIO_enuSetPinValue+0xf0>
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	0a 94       	dec	r0
    2b5e:	e2 f7       	brpl	.-8      	; 0x2b58 <DIO_enuSetPinValue+0xec>
    2b60:	84 2b       	or	r24, r20
    2b62:	8c 93       	st	X, r24
    2b64:	6c c0       	rjmp	.+216    	; 0x2c3e <DIO_enuSetPinValue+0x1d2>
				}
				else{
					DIO_PORTB_REG &= ~(DIO_BIT_MASK << Copy_u8PinID);
    2b66:	a8 e3       	ldi	r26, 0x38	; 56
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e8 e3       	ldi	r30, 0x38	; 56
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	48 2f       	mov	r20, r24
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	02 2e       	mov	r0, r18
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <DIO_enuSetPinValue+0x118>
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	0a 94       	dec	r0
    2b86:	e2 f7       	brpl	.-8      	; 0x2b80 <DIO_enuSetPinValue+0x114>
    2b88:	80 95       	com	r24
    2b8a:	84 23       	and	r24, r20
    2b8c:	8c 93       	st	X, r24
    2b8e:	57 c0       	rjmp	.+174    	; 0x2c3e <DIO_enuSetPinValue+0x1d2>
				}
			break;
			case DIO_GROUP_C :
				if( Copy_u8Value == DIO_HIGH ){
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	a1 f4       	brne	.+40     	; 0x2bbe <DIO_enuSetPinValue+0x152>
					DIO_PORTC_REG |= (DIO_BIT_MASK << Copy_u8PinID);
    2b96:	a5 e3       	ldi	r26, 0x35	; 53
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e5 e3       	ldi	r30, 0x35	; 53
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	48 2f       	mov	r20, r24
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	02 2e       	mov	r0, r18
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <DIO_enuSetPinValue+0x148>
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	0a 94       	dec	r0
    2bb6:	e2 f7       	brpl	.-8      	; 0x2bb0 <DIO_enuSetPinValue+0x144>
    2bb8:	84 2b       	or	r24, r20
    2bba:	8c 93       	st	X, r24
    2bbc:	40 c0       	rjmp	.+128    	; 0x2c3e <DIO_enuSetPinValue+0x1d2>
				}
				else{
					DIO_PORTC_REG &= ~(DIO_BIT_MASK << Copy_u8PinID);
    2bbe:	a5 e3       	ldi	r26, 0x35	; 53
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e5 e3       	ldi	r30, 0x35	; 53
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	48 2f       	mov	r20, r24
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	02 2e       	mov	r0, r18
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <DIO_enuSetPinValue+0x170>
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	0a 94       	dec	r0
    2bde:	e2 f7       	brpl	.-8      	; 0x2bd8 <DIO_enuSetPinValue+0x16c>
    2be0:	80 95       	com	r24
    2be2:	84 23       	and	r24, r20
    2be4:	8c 93       	st	X, r24
    2be6:	2b c0       	rjmp	.+86     	; 0x2c3e <DIO_enuSetPinValue+0x1d2>
				}
			break;
			case DIO_GROUP_D :
				if( Copy_u8Value == DIO_HIGH ){
    2be8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bea:	81 30       	cpi	r24, 0x01	; 1
    2bec:	a1 f4       	brne	.+40     	; 0x2c16 <DIO_enuSetPinValue+0x1aa>
					DIO_PORTD_REG |= (DIO_BIT_MASK << Copy_u8PinID);
    2bee:	a2 e3       	ldi	r26, 0x32	; 50
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e2 e3       	ldi	r30, 0x32	; 50
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	48 2f       	mov	r20, r24
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	02 2e       	mov	r0, r18
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <DIO_enuSetPinValue+0x1a0>
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	0a 94       	dec	r0
    2c0e:	e2 f7       	brpl	.-8      	; 0x2c08 <DIO_enuSetPinValue+0x19c>
    2c10:	84 2b       	or	r24, r20
    2c12:	8c 93       	st	X, r24
    2c14:	14 c0       	rjmp	.+40     	; 0x2c3e <DIO_enuSetPinValue+0x1d2>
				}
				else{
					DIO_PORTD_REG &= ~(DIO_BIT_MASK << Copy_u8PinID);
    2c16:	a2 e3       	ldi	r26, 0x32	; 50
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e2 e3       	ldi	r30, 0x32	; 50
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	48 2f       	mov	r20, r24
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	02 2e       	mov	r0, r18
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <DIO_enuSetPinValue+0x1c8>
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	0a 94       	dec	r0
    2c36:	e2 f7       	brpl	.-8      	; 0x2c30 <DIO_enuSetPinValue+0x1c4>
    2c38:	80 95       	com	r24
    2c3a:	84 23       	and	r24, r20
    2c3c:	8c 93       	st	X, r24
			break;
			default:
			break;
		}

		Local_enuErrorState = ES_OK;
    2c3e:	19 82       	std	Y+1, r1	; 0x01
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <DIO_enuSetPinValue+0x1da>
	}

	else {

		Local_enuErrorState = ES_OUT_OF_RANGE;
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
    2c46:	89 81       	ldd	r24, Y+1	; 0x01

}
    2c48:	26 96       	adiw	r28, 0x06	; 6
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID){
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <DIO_enuTogglePinValue+0x6>
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <DIO_enuTogglePinValue+0x8>
    2c62:	0f 92       	push	r0
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	8a 83       	std	Y+2, r24	; 0x02
    2c6a:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7) ){
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	84 30       	cpi	r24, 0x04	; 4
    2c74:	08 f0       	brcs	.+2      	; 0x2c78 <DIO_enuTogglePinValue+0x1e>
    2c76:	74 c0       	rjmp	.+232    	; 0x2d60 <DIO_enuTogglePinValue+0x106>
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	88 30       	cpi	r24, 0x08	; 8
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <DIO_enuTogglePinValue+0x26>
    2c7e:	70 c0       	rjmp	.+224    	; 0x2d60 <DIO_enuTogglePinValue+0x106>

		switch (Copy_u8GroupID){
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	3d 83       	std	Y+5, r19	; 0x05
    2c88:	2c 83       	std	Y+4, r18	; 0x04
    2c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8e:	81 30       	cpi	r24, 0x01	; 1
    2c90:	91 05       	cpc	r25, r1
    2c92:	49 f1       	breq	.+82     	; 0x2ce6 <DIO_enuTogglePinValue+0x8c>
    2c94:	2c 81       	ldd	r18, Y+4	; 0x04
    2c96:	3d 81       	ldd	r19, Y+5	; 0x05
    2c98:	22 30       	cpi	r18, 0x02	; 2
    2c9a:	31 05       	cpc	r19, r1
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <DIO_enuTogglePinValue+0x4e>
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	61 f0       	breq	.+24     	; 0x2cbe <DIO_enuTogglePinValue+0x64>
    2ca6:	5a c0       	rjmp	.+180    	; 0x2d5c <DIO_enuTogglePinValue+0x102>
    2ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    2caa:	3d 81       	ldd	r19, Y+5	; 0x05
    2cac:	22 30       	cpi	r18, 0x02	; 2
    2cae:	31 05       	cpc	r19, r1
    2cb0:	71 f1       	breq	.+92     	; 0x2d0e <DIO_enuTogglePinValue+0xb4>
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb6:	83 30       	cpi	r24, 0x03	; 3
    2cb8:	91 05       	cpc	r25, r1
    2cba:	e9 f1       	breq	.+122    	; 0x2d36 <DIO_enuTogglePinValue+0xdc>
    2cbc:	4f c0       	rjmp	.+158    	; 0x2d5c <DIO_enuTogglePinValue+0x102>

			case DIO_GROUP_A :
				DIO_PORTA_REG ^= (DIO_BIT_MASK << Copy_u8PinID);
    2cbe:	ab e3       	ldi	r26, 0x3B	; 59
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	eb e3       	ldi	r30, 0x3B	; 59
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	48 2f       	mov	r20, r24
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	02 2e       	mov	r0, r18
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <DIO_enuTogglePinValue+0x82>
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	0a 94       	dec	r0
    2cde:	e2 f7       	brpl	.-8      	; 0x2cd8 <DIO_enuTogglePinValue+0x7e>
    2ce0:	84 27       	eor	r24, r20
    2ce2:	8c 93       	st	X, r24
    2ce4:	3b c0       	rjmp	.+118    	; 0x2d5c <DIO_enuTogglePinValue+0x102>
			break;

			case DIO_GROUP_B :
				DIO_PORTB_REG ^= (DIO_BIT_MASK << Copy_u8PinID);
    2ce6:	a8 e3       	ldi	r26, 0x38	; 56
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e8 e3       	ldi	r30, 0x38	; 56
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	48 2f       	mov	r20, r24
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	02 2e       	mov	r0, r18
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <DIO_enuTogglePinValue+0xaa>
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	0a 94       	dec	r0
    2d06:	e2 f7       	brpl	.-8      	; 0x2d00 <DIO_enuTogglePinValue+0xa6>
    2d08:	84 27       	eor	r24, r20
    2d0a:	8c 93       	st	X, r24
    2d0c:	27 c0       	rjmp	.+78     	; 0x2d5c <DIO_enuTogglePinValue+0x102>
			break;

			case DIO_GROUP_C :
				DIO_PORTC_REG ^= (DIO_BIT_MASK << Copy_u8PinID);
    2d0e:	a5 e3       	ldi	r26, 0x35	; 53
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	e5 e3       	ldi	r30, 0x35	; 53
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	48 2f       	mov	r20, r24
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	02 2e       	mov	r0, r18
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <DIO_enuTogglePinValue+0xd2>
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	0a 94       	dec	r0
    2d2e:	e2 f7       	brpl	.-8      	; 0x2d28 <DIO_enuTogglePinValue+0xce>
    2d30:	84 27       	eor	r24, r20
    2d32:	8c 93       	st	X, r24
    2d34:	13 c0       	rjmp	.+38     	; 0x2d5c <DIO_enuTogglePinValue+0x102>
			break;

			case DIO_GROUP_D :
				DIO_PORTD_REG ^= (DIO_BIT_MASK << Copy_u8PinID);
    2d36:	a2 e3       	ldi	r26, 0x32	; 50
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e2 e3       	ldi	r30, 0x32	; 50
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	48 2f       	mov	r20, r24
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	02 2e       	mov	r0, r18
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <DIO_enuTogglePinValue+0xfa>
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	0a 94       	dec	r0
    2d56:	e2 f7       	brpl	.-8      	; 0x2d50 <DIO_enuTogglePinValue+0xf6>
    2d58:	84 27       	eor	r24, r20
    2d5a:	8c 93       	st	X, r24

			default:
			break;
		}

		Local_enuErrorState = ES_OK;
    2d5c:	19 82       	std	Y+1, r1	; 0x01
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <DIO_enuTogglePinValue+0x10a>

	}

	else {

		Local_enuErrorState = ES_OUT_OF_RANGE;
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <DIO_enuGetPinValue>:


ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 * Copy_pu8Value){
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	27 97       	sbiw	r28, 0x07	; 7
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	8a 83       	std	Y+2, r24	; 0x02
    2d8c:	6b 83       	std	Y+3, r22	; 0x03
    2d8e:	5d 83       	std	Y+5, r21	; 0x05
    2d90:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pu8Value != NULL ){
    2d96:	8c 81       	ldd	r24, Y+4	; 0x04
    2d98:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <DIO_enuGetPinValue+0x2a>
    2d9e:	7d c0       	rjmp	.+250    	; 0x2e9a <DIO_enuGetPinValue+0x124>

		if( (Copy_u8GroupID <= DIO_GROUP_D) && (Copy_u8PinID <= DIO_PIN_7) ){
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	84 30       	cpi	r24, 0x04	; 4
    2da4:	08 f0       	brcs	.+2      	; 0x2da8 <DIO_enuGetPinValue+0x32>
    2da6:	76 c0       	rjmp	.+236    	; 0x2e94 <DIO_enuGetPinValue+0x11e>
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	88 30       	cpi	r24, 0x08	; 8
    2dac:	08 f0       	brcs	.+2      	; 0x2db0 <DIO_enuGetPinValue+0x3a>
    2dae:	72 c0       	rjmp	.+228    	; 0x2e94 <DIO_enuGetPinValue+0x11e>

			switch (Copy_u8GroupID){
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	3f 83       	std	Y+7, r19	; 0x07
    2db8:	2e 83       	std	Y+6, r18	; 0x06
    2dba:	4e 81       	ldd	r20, Y+6	; 0x06
    2dbc:	5f 81       	ldd	r21, Y+7	; 0x07
    2dbe:	41 30       	cpi	r20, 0x01	; 1
    2dc0:	51 05       	cpc	r21, r1
    2dc2:	59 f1       	breq	.+86     	; 0x2e1a <DIO_enuGetPinValue+0xa4>
    2dc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	91 05       	cpc	r25, r1
    2dcc:	34 f4       	brge	.+12     	; 0x2dda <DIO_enuGetPinValue+0x64>
    2dce:	2e 81       	ldd	r18, Y+6	; 0x06
    2dd0:	3f 81       	ldd	r19, Y+7	; 0x07
    2dd2:	21 15       	cp	r18, r1
    2dd4:	31 05       	cpc	r19, r1
    2dd6:	69 f0       	breq	.+26     	; 0x2df2 <DIO_enuGetPinValue+0x7c>
    2dd8:	5b c0       	rjmp	.+182    	; 0x2e90 <DIO_enuGetPinValue+0x11a>
    2dda:	4e 81       	ldd	r20, Y+6	; 0x06
    2ddc:	5f 81       	ldd	r21, Y+7	; 0x07
    2dde:	42 30       	cpi	r20, 0x02	; 2
    2de0:	51 05       	cpc	r21, r1
    2de2:	79 f1       	breq	.+94     	; 0x2e42 <DIO_enuGetPinValue+0xcc>
    2de4:	8e 81       	ldd	r24, Y+6	; 0x06
    2de6:	9f 81       	ldd	r25, Y+7	; 0x07
    2de8:	83 30       	cpi	r24, 0x03	; 3
    2dea:	91 05       	cpc	r25, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <DIO_enuGetPinValue+0x7a>
    2dee:	3d c0       	rjmp	.+122    	; 0x2e6a <DIO_enuGetPinValue+0xf4>
    2df0:	4f c0       	rjmp	.+158    	; 0x2e90 <DIO_enuGetPinValue+0x11a>

			   case DIO_GROUP_A :
				   *Copy_pu8Value = ( (DIO_PINA_REG >> Copy_u8PinID) & DIO_BIT_MASK );
    2df2:	e9 e3       	ldi	r30, 0x39	; 57
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	88 2f       	mov	r24, r24
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	a9 01       	movw	r20, r18
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <DIO_enuGetPinValue+0x94>
    2e06:	55 95       	asr	r21
    2e08:	47 95       	ror	r20
    2e0a:	8a 95       	dec	r24
    2e0c:	e2 f7       	brpl	.-8      	; 0x2e06 <DIO_enuGetPinValue+0x90>
    2e0e:	ca 01       	movw	r24, r20
    2e10:	81 70       	andi	r24, 0x01	; 1
    2e12:	ec 81       	ldd	r30, Y+4	; 0x04
    2e14:	fd 81       	ldd	r31, Y+5	; 0x05
    2e16:	80 83       	st	Z, r24
    2e18:	3b c0       	rjmp	.+118    	; 0x2e90 <DIO_enuGetPinValue+0x11a>
			   break;

			   case DIO_GROUP_B :
			   		*Copy_pu8Value = ( (DIO_PINB_REG >> Copy_u8PinID) & DIO_BIT_MASK );
    2e1a:	e6 e3       	ldi	r30, 0x36	; 54
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	28 2f       	mov	r18, r24
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	8b 81       	ldd	r24, Y+3	; 0x03
    2e26:	88 2f       	mov	r24, r24
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	a9 01       	movw	r20, r18
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <DIO_enuGetPinValue+0xbc>
    2e2e:	55 95       	asr	r21
    2e30:	47 95       	ror	r20
    2e32:	8a 95       	dec	r24
    2e34:	e2 f7       	brpl	.-8      	; 0x2e2e <DIO_enuGetPinValue+0xb8>
    2e36:	ca 01       	movw	r24, r20
    2e38:	81 70       	andi	r24, 0x01	; 1
    2e3a:	ec 81       	ldd	r30, Y+4	; 0x04
    2e3c:	fd 81       	ldd	r31, Y+5	; 0x05
    2e3e:	80 83       	st	Z, r24
    2e40:	27 c0       	rjmp	.+78     	; 0x2e90 <DIO_enuGetPinValue+0x11a>
			   break;

			   case DIO_GROUP_C :
			   		*Copy_pu8Value = ( (DIO_PINC_REG >> Copy_u8PinID) & DIO_BIT_MASK );
    2e42:	e3 e3       	ldi	r30, 0x33	; 51
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	28 2f       	mov	r18, r24
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	a9 01       	movw	r20, r18
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <DIO_enuGetPinValue+0xe4>
    2e56:	55 95       	asr	r21
    2e58:	47 95       	ror	r20
    2e5a:	8a 95       	dec	r24
    2e5c:	e2 f7       	brpl	.-8      	; 0x2e56 <DIO_enuGetPinValue+0xe0>
    2e5e:	ca 01       	movw	r24, r20
    2e60:	81 70       	andi	r24, 0x01	; 1
    2e62:	ec 81       	ldd	r30, Y+4	; 0x04
    2e64:	fd 81       	ldd	r31, Y+5	; 0x05
    2e66:	80 83       	st	Z, r24
    2e68:	13 c0       	rjmp	.+38     	; 0x2e90 <DIO_enuGetPinValue+0x11a>
			   break;

			   case DIO_GROUP_D :
			   		*Copy_pu8Value = ( (DIO_PIND_REG >> Copy_u8PinID) & DIO_BIT_MASK );
    2e6a:	e0 e3       	ldi	r30, 0x30	; 48
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	28 2f       	mov	r18, r24
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a9 01       	movw	r20, r18
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <DIO_enuGetPinValue+0x10c>
    2e7e:	55 95       	asr	r21
    2e80:	47 95       	ror	r20
    2e82:	8a 95       	dec	r24
    2e84:	e2 f7       	brpl	.-8      	; 0x2e7e <DIO_enuGetPinValue+0x108>
    2e86:	ca 01       	movw	r24, r20
    2e88:	81 70       	andi	r24, 0x01	; 1
    2e8a:	ec 81       	ldd	r30, Y+4	; 0x04
    2e8c:	fd 81       	ldd	r31, Y+5	; 0x05
    2e8e:	80 83       	st	Z, r24
			   default:
			   break;

			}

			Local_enuErrorState = ES_OK;
    2e90:	19 82       	std	Y+1, r1	; 0x01
    2e92:	05 c0       	rjmp	.+10     	; 0x2e9e <DIO_enuGetPinValue+0x128>
		}
		else{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <DIO_enuGetPinValue+0x128>
		}
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    2e9a:	83 e0       	ldi	r24, 0x03	; 3
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ea0:	27 96       	adiw	r28, 0x07	; 7
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <ADC_enuInit>:

static pfuncISRFunc_t LOC_pISRFunc;

static vidptr_t LOC_pISRFuncParameters;

ES_t ADC_enuInit(void){
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	0f 92       	push	r0
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_OK;
    2ebc:	19 82       	std	Y+1, r1	; 0x01

	ADC_ADCSRA &= ~(ADC_MASK_BIT<<7);
    2ebe:	a6 e2       	ldi	r26, 0x26	; 38
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e6 e2       	ldi	r30, 0x26	; 38
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	8f 77       	andi	r24, 0x7F	; 127
    2eca:	8c 93       	st	X, r24

	ADC_ADMUX &= 0x3F;
    2ecc:	a7 e2       	ldi	r26, 0x27	; 39
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	e7 e2       	ldi	r30, 0x27	; 39
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	8f 73       	andi	r24, 0x3F	; 63
    2ed8:	8c 93       	st	X, r24
	     ADC_ADMUX |= (ADC_V_INTERNAL<<ADC_BIT_6);
    #else
	    //#error ADC Voltage Reference Configuration is Invalid
    #endif

	ADC_ADMUX &= 0xDF;
    2eda:	a7 e2       	ldi	r26, 0x27	; 39
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	e7 e2       	ldi	r30, 0x27	; 39
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8f 7d       	andi	r24, 0xDF	; 223
    2ee6:	8c 93       	st	X, r24
    #if ADC_ADJUSTMENT == ACC_RIGHT_ADJUSTMENT
	     ADC_ADMUX |= (ACC_RIGHT_ADJUSTMENT<<ADC_BIT_5);
    #elif ADC_ADJUSTMENT == ACC_LEFT_ADJUSTMENT
	     ADC_ADMUX |= (ACC_LEFT_ADJUSTMENT<<ADC_BIT_5);
    2ee8:	a7 e2       	ldi	r26, 0x27	; 39
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e7 e2       	ldi	r30, 0x27	; 39
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	80 62       	ori	r24, 0x20	; 32
    2ef4:	8c 93       	st	X, r24
    #else
        #error ADC Adjustment Configuration is Invalid
    #endif

	ADC_ADMUX &= 0xE0;
    2ef6:	a7 e2       	ldi	r26, 0x27	; 39
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e7 e2       	ldi	r30, 0x27	; 39
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	80 7e       	andi	r24, 0xE0	; 224
    2f02:	8c 93       	st	X, r24
    #if ADC_INIT_CHANNEL >= ADC_MIN_NUM_CHANNELS && ADC_INIT_CHANNEL <= ADC_MAX_NUM_CHANNELS
	     ADC_ADMUX |= ADC_INIT_CHANNEL;
    2f04:	a7 e2       	ldi	r26, 0x27	; 39
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e7 e2       	ldi	r30, 0x27	; 39
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	81 60       	ori	r24, 0x01	; 1
    2f10:	8c 93       	st	X, r24
    #else
        #error ADC Init Channel Number is Invalid
    #endif

	ADC_ADCSRA &= 0xF8;
    2f12:	a6 e2       	ldi	r26, 0x26	; 38
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	e6 e2       	ldi	r30, 0x26	; 38
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 7f       	andi	r24, 0xF8	; 248
    2f1e:	8c 93       	st	X, r24
    #if ADC_PRESCALER >= ADC_PRESCALER_RESERVED && ADC_PRESCALER <= ADC_PRESCALER_128
	     ADC_ADCSRA |= ADC_PRESCALER;
    2f20:	a6 e2       	ldi	r26, 0x26	; 38
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e6 e2       	ldi	r30, 0x26	; 38
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	86 60       	ori	r24, 0x06	; 6
    2f2c:	8c 93       	st	X, r24
    #else
         #error ADC Prescaler Configuration is Invalid
    #endif

	ADC_ADCSRA &= 0xF7;
    2f2e:	a6 e2       	ldi	r26, 0x26	; 38
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e6 e2       	ldi	r30, 0x26	; 38
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	87 7f       	andi	r24, 0xF7	; 247
    2f3a:	8c 93       	st	X, r24
    #if ADC_INTERRUPT_MODE == ADC_INTERRUPT
	     ADC_ADCSRA |= (ADC_INTERRUPT<<ADC_BIT_3);
    #elif ADC_INTERRUPT_MODE == ADC_POOLING
	     //ADC_ADCSRA &= ~(ADC_MASK_BIT<<ADC_BIT_3);
	     ADC_ADCSRA |= (ADC_POLLING<<ADC_BIT_3);
    2f3c:	a6 e2       	ldi	r26, 0x26	; 38
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e6 e2       	ldi	r30, 0x26	; 38
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	8c 93       	st	X, r24
    #else
        #error ADC Interrupt Mode Configuration is Invalid
    #endif

	ADC_SFIOR &= 0x1F;
    2f48:	a0 e5       	ldi	r26, 0x50	; 80
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e0 e5       	ldi	r30, 0x50	; 80
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	8f 71       	andi	r24, 0x1F	; 31
    2f54:	8c 93       	st	X, r24
    #if ADC_TRIGGER_SOURCE == ADC_SINGLE_CONVERSION
	     ADC_ADCSRA &= ~(ADC_MASK_BIT<<ADC_BIT_5);
    2f56:	a6 e2       	ldi	r26, 0x26	; 38
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	e6 e2       	ldi	r30, 0x26	; 38
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	8f 7d       	andi	r24, 0xDF	; 223
    2f62:	8c 93       	st	X, r24
	     ADC_ADCSRA |= (ADC_MASK_BIT<<ADC_BIT_5);
    #else
        #error ADC Auto Trigger Mode Configuration is Invalid
    #endif

	ADC_ADCSRA |= (ADC_MASK_BIT<<ADC_BIT_7);
    2f64:	a6 e2       	ldi	r26, 0x26	; 38
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e6 e2       	ldi	r30, 0x26	; 38
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	80 68       	ori	r24, 0x80	; 128
    2f70:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    2f72:	19 82       	std	Y+1, r1	; 0x01


	return Local_enuErrorState;
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f76:	0f 90       	pop	r0
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <ADC_enuReadPolling>:

ES_t ADC_enuReadPolling(u8 Copy_u8Channel , u16 * Copy_pu16ADCRead){
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	00 d0       	rcall	.+0      	; 0x2f84 <ADC_enuReadPolling+0x6>
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <ADC_enuReadPolling+0x8>
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	8a 83       	std	Y+2, r24	; 0x02
    2f8c:	7c 83       	std	Y+4, r23	; 0x04
    2f8e:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	89 83       	std	Y+1, r24	; 0x01


	if(Copy_pu16ADCRead != NULL){
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	9c 81       	ldd	r25, Y+4	; 0x04
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <ADC_enuReadPolling+0x20>
    2f9c:	62 c0       	rjmp	.+196    	; 0x3062 <ADC_enuReadPolling+0xe4>

		if((Copy_u8Channel >= ADC_MIN_NUM_CHANNELS) && (Copy_u8Channel <= ADC_MAX_NUM_CHANNELS)){
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	80 32       	cpi	r24, 0x20	; 32
    2fa2:	08 f0       	brcs	.+2      	; 0x2fa6 <ADC_enuReadPolling+0x28>
    2fa4:	5b c0       	rjmp	.+182    	; 0x305c <ADC_enuReadPolling+0xde>

			ADC_ADCSRA |= (ADC_MASK_BIT<<ADC_BIT_4); // CLEAR FLAG
    2fa6:	a6 e2       	ldi	r26, 0x26	; 38
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e6 e2       	ldi	r30, 0x26	; 38
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	80 61       	ori	r24, 0x10	; 16
    2fb2:	8c 93       	st	X, r24
			ADC_ADCSRA |= (ADC_MASK_BIT<<ADC_BIT_6); // START CONVERSION
    2fb4:	a6 e2       	ldi	r26, 0x26	; 38
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e6 e2       	ldi	r30, 0x26	; 38
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 64       	ori	r24, 0x40	; 64
    2fc0:	8c 93       	st	X, r24

			ADC_ADMUX &= 0xE0; // CLEAR CHANNEL
    2fc2:	a7 e2       	ldi	r26, 0x27	; 39
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	e7 e2       	ldi	r30, 0x27	; 39
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	80 7e       	andi	r24, 0xE0	; 224
    2fce:	8c 93       	st	X, r24
			ADC_ADMUX |= Copy_u8Channel; // SET CHANNEL
    2fd0:	a7 e2       	ldi	r26, 0x27	; 39
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e7 e2       	ldi	r30, 0x27	; 39
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	90 81       	ld	r25, Z
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	89 2b       	or	r24, r25
    2fde:	8c 93       	st	X, r24

			while(((ADC_ADCSRA>>ADC_BIT_4)&ADC_MASK_BIT) == false);
    2fe0:	e6 e2       	ldi	r30, 0x26	; 38
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	82 95       	swap	r24
    2fe8:	8f 70       	andi	r24, 0x0F	; 15
    2fea:	88 2f       	mov	r24, r24
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	81 70       	andi	r24, 0x01	; 1
    2ff0:	90 70       	andi	r25, 0x00	; 0
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	a9 f3       	breq	.-22     	; 0x2fe0 <ADC_enuReadPolling+0x62>
				*Copy_pu16ADCRead |= ((u16)ADC_ADCH<<ADC_BIT_8);
				Local_u8ErrorState = ES_OK;

            #else if(ADC_ADJUSTMENT == ACC_LEFT_ADJUSTMENT)

				*Copy_pu16ADCRead = 0x00;
    2ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffa:	11 82       	std	Z+1, r1	; 0x01
    2ffc:	10 82       	st	Z, r1
				*Copy_pu16ADCRead |= (ADC_ADCL>>ADC_BIT_6);
    2ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    3000:	fc 81       	ldd	r31, Y+4	; 0x04
    3002:	20 81       	ld	r18, Z
    3004:	31 81       	ldd	r19, Z+1	; 0x01
    3006:	e4 e2       	ldi	r30, 0x24	; 36
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	82 95       	swap	r24
    300e:	86 95       	lsr	r24
    3010:	86 95       	lsr	r24
    3012:	83 70       	andi	r24, 0x03	; 3
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	82 2b       	or	r24, r18
    301a:	93 2b       	or	r25, r19
    301c:	eb 81       	ldd	r30, Y+3	; 0x03
    301e:	fc 81       	ldd	r31, Y+4	; 0x04
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	80 83       	st	Z, r24
				*Copy_pu16ADCRead |= ((u16)ADC_ADCH<<ADC_BIT_2);
    3024:	eb 81       	ldd	r30, Y+3	; 0x03
    3026:	fc 81       	ldd	r31, Y+4	; 0x04
    3028:	20 81       	ld	r18, Z
    302a:	31 81       	ldd	r19, Z+1	; 0x01
    302c:	e5 e2       	ldi	r30, 0x25	; 37
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	88 2f       	mov	r24, r24
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	82 2b       	or	r24, r18
    3040:	93 2b       	or	r25, r19
    3042:	eb 81       	ldd	r30, Y+3	; 0x03
    3044:	fc 81       	ldd	r31, Y+4	; 0x04
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK;
    304a:	19 82       	std	Y+1, r1	; 0x01

            #endif

			ADC_ADCSRA |= (ADC_MASK_BIT<<ADC_BIT_4);
    304c:	a6 e2       	ldi	r26, 0x26	; 38
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e6 e2       	ldi	r30, 0x26	; 38
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	80 61       	ori	r24, 0x10	; 16
    3058:	8c 93       	st	X, r24
    305a:	05 c0       	rjmp	.+10     	; 0x3066 <ADC_enuReadPolling+0xe8>

		}
		else{

			Local_enuErrorState = ES_OUT_OF_RANGE;
    305c:	82 e0       	ldi	r24, 0x02	; 2
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <ADC_enuReadPolling+0xe8>
		}
	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    3062:	83 e0       	ldi	r24, 0x03	; 3
    3064:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3066:	89 81       	ldd	r24, Y+1	; 0x01
}
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void){
    3076:	df 93       	push	r29
    3078:	cf 93       	push	r28
    307a:	0f 92       	push	r0
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	89 83       	std	Y+1, r24	; 0x01

	ADC_ADCSRA &= 0xBF;
    3084:	a6 e2       	ldi	r26, 0x26	; 38
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	e6 e2       	ldi	r30, 0x26	; 38
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	8f 7b       	andi	r24, 0xBF	; 191
    3090:	8c 93       	st	X, r24
	ADC_ADCSRA |= 0x40;
    3092:	a6 e2       	ldi	r26, 0x26	; 38
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e6 e2       	ldi	r30, 0x26	; 38
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	80 64       	ori	r24, 0x40	; 64
    309e:	8c 93       	st	X, r24

	return Local_enuErrorState;
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a2:	0f 90       	pop	r0
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <ADC_enuSetADCChannel>:

ES_t ADC_enuSetADCChannel(u8 Copy_u8Channel){
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <ADC_enuSetADCChannel+0x6>
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Channel >= ADC_MIN_NUM_CHANNELS) && (Copy_u8Channel <= ADC_MAX_NUM_CHANNELS)){
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	80 32       	cpi	r24, 0x20	; 32
    30be:	88 f4       	brcc	.+34     	; 0x30e2 <ADC_enuSetADCChannel+0x38>

		ADC_ADMUX &= 0xE0;
    30c0:	a7 e2       	ldi	r26, 0x27	; 39
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e7 e2       	ldi	r30, 0x27	; 39
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	80 7e       	andi	r24, 0xE0	; 224
    30cc:	8c 93       	st	X, r24
		ADC_ADMUX |= Copy_u8Channel;
    30ce:	a7 e2       	ldi	r26, 0x27	; 39
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e7 e2       	ldi	r30, 0x27	; 39
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	90 81       	ld	r25, Z
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	89 2b       	or	r24, r25
    30dc:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK;
    30de:	19 82       	std	Y+1, r1	; 0x01
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <ADC_enuSetADCChannel+0x3c>
	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    30e2:	82 e0       	ldi	r24, 0x02	; 2
    30e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <ADC_enuReadInterrupt>:

ES_t ADC_enuReadInterrupt(u16 * Copy_pu16ADCRead){
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <ADC_enuReadInterrupt+0x6>
    30f8:	0f 92       	push	r0
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	9b 83       	std	Y+3, r25	; 0x03
    3100:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu16ADCRead != NULL){
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	9b 81       	ldd	r25, Y+3	; 0x03
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	61 f1       	breq	.+88     	; 0x3166 <ADC_enuReadInterrupt+0x74>
			*Copy_pu16ADCRead |= ((u16)ADC_ADCH<<ADC_BIT_8);
			Local_enuErrorState = ES_OK;

        #elif ADC_ADJUSTMENT == ACC_LEFT_ADJUSTMENT

			*Copy_pu16ADCRead = 0x00;
    310e:	ea 81       	ldd	r30, Y+2	; 0x02
    3110:	fb 81       	ldd	r31, Y+3	; 0x03
    3112:	11 82       	std	Z+1, r1	; 0x01
    3114:	10 82       	st	Z, r1
			*Copy_pu16ADCRead |= (ADC_ADCL>>ADC_BIT_6);
    3116:	ea 81       	ldd	r30, Y+2	; 0x02
    3118:	fb 81       	ldd	r31, Y+3	; 0x03
    311a:	20 81       	ld	r18, Z
    311c:	31 81       	ldd	r19, Z+1	; 0x01
    311e:	e4 e2       	ldi	r30, 0x24	; 36
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	82 95       	swap	r24
    3126:	86 95       	lsr	r24
    3128:	86 95       	lsr	r24
    312a:	83 70       	andi	r24, 0x03	; 3
    312c:	88 2f       	mov	r24, r24
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	82 2b       	or	r24, r18
    3132:	93 2b       	or	r25, r19
    3134:	ea 81       	ldd	r30, Y+2	; 0x02
    3136:	fb 81       	ldd	r31, Y+3	; 0x03
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
			*Copy_pu16ADCRead |= ((u16)ADC_ADCH<<ADC_BIT_2);
    313c:	ea 81       	ldd	r30, Y+2	; 0x02
    313e:	fb 81       	ldd	r31, Y+3	; 0x03
    3140:	20 81       	ld	r18, Z
    3142:	31 81       	ldd	r19, Z+1	; 0x01
    3144:	e5 e2       	ldi	r30, 0x25	; 37
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	82 2b       	or	r24, r18
    3158:	93 2b       	or	r25, r19
    315a:	ea 81       	ldd	r30, Y+2	; 0x02
    315c:	fb 81       	ldd	r31, Y+3	; 0x03
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    3162:	19 82       	std	Y+1, r1	; 0x01
    3164:	02 c0       	rjmp	.+4      	; 0x316a <ADC_enuReadInterrupt+0x78>
        #endif

	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    3166:	83 e0       	ldi	r24, 0x03	; 3
    3168:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    316a:	89 81       	ldd	r24, Y+1	; 0x01
}
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <ADC_enuReadInterruptHigh>:

ES_t ADC_enuReadInterruptHigh(u8 * Copy_pu8ADCRead){
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	00 d0       	rcall	.+0      	; 0x317e <ADC_enuReadInterruptHigh+0x6>
    317e:	0f 92       	push	r0
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
    3184:	9b 83       	std	Y+3, r25	; 0x03
    3186:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8ADCRead != NULL){
    318c:	8a 81       	ldd	r24, Y+2	; 0x02
    318e:	9b 81       	ldd	r25, Y+3	; 0x03
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	79 f0       	breq	.+30     	; 0x31b2 <ADC_enuReadInterruptHigh+0x3a>
			Local_enuErrorState = ES_OK;
            #warning ADC_enuReadInterruptHigh is not working speedly in RIGHT ADJUSTMENT

	    #elif ADC_ADJUSTMENT == ACC_LEFT_ADJUSTMENT

			*Copy_pu8ADCRead = 0x00;
    3194:	ea 81       	ldd	r30, Y+2	; 0x02
    3196:	fb 81       	ldd	r31, Y+3	; 0x03
    3198:	10 82       	st	Z, r1
			*Copy_pu8ADCRead |= ADC_ADCH;
    319a:	ea 81       	ldd	r30, Y+2	; 0x02
    319c:	fb 81       	ldd	r31, Y+3	; 0x03
    319e:	90 81       	ld	r25, Z
    31a0:	e5 e2       	ldi	r30, 0x25	; 37
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	89 2b       	or	r24, r25
    31a8:	ea 81       	ldd	r30, Y+2	; 0x02
    31aa:	fb 81       	ldd	r31, Y+3	; 0x03
    31ac:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    31ae:	19 82       	std	Y+1, r1	; 0x01
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <ADC_enuReadInterruptHigh+0x3e>
	    #endif

	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	cf 91       	pop	r28
    31c0:	df 91       	pop	r29
    31c2:	08 95       	ret

000031c4 <ADC_enuSetTriggerSource>:

ES_t ADC_enuSetTriggerSource(u8 Copy_u8TriggerSource){
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <ADC_enuSetTriggerSource+0x6>
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8TriggerSource >= ADC_FREE_RUNNING_TIGGER) && (Copy_u8TriggerSource <= ADC_TIM1_COMP_CAPTURE_EVENT_TRIGGER)){
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	88 30       	cpi	r24, 0x08	; 8
    31d8:	50 f5       	brcc	.+84     	; 0x322e <ADC_enuSetTriggerSource+0x6a>

		ADC_ADCSRA &= 0xDF;
    31da:	a6 e2       	ldi	r26, 0x26	; 38
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e6 e2       	ldi	r30, 0x26	; 38
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	8f 7d       	andi	r24, 0xDF	; 223
    31e6:	8c 93       	st	X, r24


		ADC_SFIOR &= 0x1F;
    31e8:	a0 e5       	ldi	r26, 0x50	; 80
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e0 e5       	ldi	r30, 0x50	; 80
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	8f 71       	andi	r24, 0x1F	; 31
    31f4:	8c 93       	st	X, r24
		ADC_SFIOR |= (Copy_u8TriggerSource<<ADC_BIT_5);
    31f6:	a0 e5       	ldi	r26, 0x50	; 80
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	e0 e5       	ldi	r30, 0x50	; 80
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	28 2f       	mov	r18, r24
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	88 2f       	mov	r24, r24
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	82 95       	swap	r24
    320e:	92 95       	swap	r25
    3210:	90 7f       	andi	r25, 0xF0	; 240
    3212:	98 27       	eor	r25, r24
    3214:	80 7f       	andi	r24, 0xF0	; 240
    3216:	98 27       	eor	r25, r24
    3218:	82 2b       	or	r24, r18
    321a:	8c 93       	st	X, r24
		//ADC_ADCSRA |= 0x20;
		ADC_ADCSRA |= (1<<5);
    321c:	a6 e2       	ldi	r26, 0x26	; 38
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	e6 e2       	ldi	r30, 0x26	; 38
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	80 62       	ori	r24, 0x20	; 32
    3228:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    322a:	19 82       	std	Y+1, r1	; 0x01
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <ADC_enuSetTriggerSource+0x6e>

	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    322e:	82 e0       	ldi	r24, 0x02	; 2
    3230:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3232:	89 81       	ldd	r24, Y+1	; 0x01
}
    3234:	0f 90       	pop	r0
    3236:	0f 90       	pop	r0
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	08 95       	ret

0000323e <ADC_enuClearTriggerSource>:

ES_t ADC_enuClearTriggerSource(void){
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	0f 92       	push	r0
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	89 83       	std	Y+1, r24	; 0x01

	ADC_ADCSRA &= 0xDF;
    324c:	a6 e2       	ldi	r26, 0x26	; 38
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e6 e2       	ldi	r30, 0x26	; 38
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	8f 7d       	andi	r24, 0xDF	; 223
    3258:	8c 93       	st	X, r24

	return Local_enuErrorState;
    325a:	89 81       	ldd	r24, Y+1	; 0x01
}
    325c:	0f 90       	pop	r0
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <ADC_enuSetPrescaler>:

ES_t ADC_enuSetPrescaler(u8 Copy_u8Channel , u8 Copy_u8Prescaler){
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	00 d0       	rcall	.+0      	; 0x326a <ADC_enuSetPrescaler+0x6>
    326a:	0f 92       	push	r0
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	8a 83       	std	Y+2, r24	; 0x02
    3272:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Channel >= ADC_MIN_NUM_CHANNELS) && (Copy_u8Channel <= ADC_MAX_NUM_CHANNELS)){
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	80 32       	cpi	r24, 0x20	; 32
    327c:	30 f5       	brcc	.+76     	; 0x32ca <ADC_enuSetPrescaler+0x66>

		ADC_ADMUX &= 0xE0; // CLEAR CHANNEL
    327e:	a7 e2       	ldi	r26, 0x27	; 39
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e7 e2       	ldi	r30, 0x27	; 39
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	80 7e       	andi	r24, 0xE0	; 224
    328a:	8c 93       	st	X, r24
		ADC_ADMUX |= Copy_u8Channel; // SET CHANNEL
    328c:	a7 e2       	ldi	r26, 0x27	; 39
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e7 e2       	ldi	r30, 0x27	; 39
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	90 81       	ld	r25, Z
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	89 2b       	or	r24, r25
    329a:	8c 93       	st	X, r24

		if((Copy_u8Prescaler >= ADC_PRESCALER_RESERVED) && (Copy_u8Prescaler <= ADC_PRESCALER_64)){
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	87 30       	cpi	r24, 0x07	; 7
    32a0:	88 f4       	brcc	.+34     	; 0x32c4 <ADC_enuSetPrescaler+0x60>

			ADC_ADCSRA &= 0xF8; // CLEAR PRESCALER
    32a2:	a6 e2       	ldi	r26, 0x26	; 38
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e6 e2       	ldi	r30, 0x26	; 38
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	88 7f       	andi	r24, 0xF8	; 248
    32ae:	8c 93       	st	X, r24
			ADC_ADCSRA |= Copy_u8Prescaler; // SET PRESCALER
    32b0:	a6 e2       	ldi	r26, 0x26	; 38
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
    32b4:	e6 e2       	ldi	r30, 0x26	; 38
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	90 81       	ld	r25, Z
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	89 2b       	or	r24, r25
    32be:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    32c0:	19 82       	std	Y+1, r1	; 0x01
    32c2:	05 c0       	rjmp	.+10     	; 0x32ce <ADC_enuSetPrescaler+0x6a>
		}
		else{

			Local_enuErrorState = ES_OUT_OF_RANGE;
    32c4:	82 e0       	ldi	r24, 0x02	; 2
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <ADC_enuSetPrescaler+0x6a>
		}
	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    32ca:	82 e0       	ldi	r24, 0x02	; 2
    32cc:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <ADC_enuSetIterruptMode>:

ES_t ADC_enuSetIterruptMode(u8 Copy_u8Channel , u8 Copy_u8InterruptMode){
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	00 d0       	rcall	.+0      	; 0x32e2 <ADC_enuSetIterruptMode+0x6>
    32e2:	0f 92       	push	r0
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	8a 83       	std	Y+2, r24	; 0x02
    32ea:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Channel >= ADC_MIN_NUM_CHANNELS) && (Copy_u8Channel <= ADC_MAX_NUM_CHANNELS)){
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	80 32       	cpi	r24, 0x20	; 32
    32f4:	90 f5       	brcc	.+100    	; 0x335a <ADC_enuSetIterruptMode+0x7e>

		ADC_ADMUX &= 0xE0;
    32f6:	a7 e2       	ldi	r26, 0x27	; 39
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	e7 e2       	ldi	r30, 0x27	; 39
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	80 7e       	andi	r24, 0xE0	; 224
    3302:	8c 93       	st	X, r24
		ADC_ADMUX |= Copy_u8Channel;
    3304:	a7 e2       	ldi	r26, 0x27	; 39
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	e7 e2       	ldi	r30, 0x27	; 39
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	90 81       	ld	r25, Z
    330e:	8a 81       	ldd	r24, Y+2	; 0x02
    3310:	89 2b       	or	r24, r25
    3312:	8c 93       	st	X, r24

		if((Copy_u8InterruptMode == ADC_POLLING) || (Copy_u8InterruptMode == ADC_INTERRUPT)){
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	88 23       	and	r24, r24
    3318:	19 f0       	breq	.+6      	; 0x3320 <ADC_enuSetIterruptMode+0x44>
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	81 30       	cpi	r24, 0x01	; 1
    331e:	d1 f4       	brne	.+52     	; 0x3354 <ADC_enuSetIterruptMode+0x78>

			ADC_ADCSRA &= 0xF7;
    3320:	a6 e2       	ldi	r26, 0x26	; 38
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e6 e2       	ldi	r30, 0x26	; 38
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	87 7f       	andi	r24, 0xF7	; 247
    332c:	8c 93       	st	X, r24
			ADC_ADCSRA |= (Copy_u8InterruptMode<<ADC_BIT_3);
    332e:	a6 e2       	ldi	r26, 0x26	; 38
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e6 e2       	ldi	r30, 0x26	; 38
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	28 2f       	mov	r18, r24
    333a:	8b 81       	ldd	r24, Y+3	; 0x03
    333c:	88 2f       	mov	r24, r24
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	82 2b       	or	r24, r18
    334e:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    3350:	19 82       	std	Y+1, r1	; 0x01
    3352:	05 c0       	rjmp	.+10     	; 0x335e <ADC_enuSetIterruptMode+0x82>

		}
		else{

			Local_enuErrorState = ES_OUT_OF_RANGE;
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	02 c0       	rjmp	.+4      	; 0x335e <ADC_enuSetIterruptMode+0x82>
		}
	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    335a:	82 e0       	ldi	r24, 0x02	; 2
    335c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    335e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <ADC_enuInterruptEnable>:

ES_t ADC_enuInterruptEnable(void){
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	0f 92       	push	r0
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	89 83       	std	Y+1, r24	; 0x01

	ADC_ADCSRA |= (ADC_MASK_BIT<<ADC_BIT_3);
    337a:	a6 e2       	ldi	r26, 0x26	; 38
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e6 e2       	ldi	r30, 0x26	; 38
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	88 60       	ori	r24, 0x08	; 8
    3386:	8c 93       	st	X, r24

	return Local_enuErrorState;
    3388:	89 81       	ldd	r24, Y+1	; 0x01
}
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <ADC_enuInterruptDisable>:

ES_t ADC_enuInterruptDisable(void){
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	0f 92       	push	r0
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	89 83       	std	Y+1, r24	; 0x01

	ADC_ADCSRA &= ~(ADC_MASK_BIT<<ADC_BIT_3);
    33a0:	a6 e2       	ldi	r26, 0x26	; 38
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	e6 e2       	ldi	r30, 0x26	; 38
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	87 7f       	andi	r24, 0xF7	; 247
    33ac:	8c 93       	st	X, r24

	return Local_enuErrorState;
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    33b0:	0f 90       	pop	r0
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <ADC_enuADCEnable>:

ES_t ADC_enuADCEnable(void){
    33b8:	df 93       	push	r29
    33ba:	cf 93       	push	r28
    33bc:	0f 92       	push	r0
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	89 83       	std	Y+1, r24	; 0x01

	ADC_ADCSRA |= (ADC_MASK_BIT<<ADC_BIT_7);
    33c6:	a6 e2       	ldi	r26, 0x26	; 38
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	e6 e2       	ldi	r30, 0x26	; 38
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	80 81       	ld	r24, Z
    33d0:	80 68       	ori	r24, 0x80	; 128
    33d2:	8c 93       	st	X, r24

	return Local_enuErrorState;
    33d4:	89 81       	ldd	r24, Y+1	; 0x01

}
    33d6:	0f 90       	pop	r0
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <ADC_enuADCDisable>:

ES_t ADC_enuADCDisable(void){
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	0f 92       	push	r0
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	89 83       	std	Y+1, r24	; 0x01

	ADC_ADCSRA &= ~(ADC_MASK_BIT<<ADC_BIT_7);
    33ec:	a6 e2       	ldi	r26, 0x26	; 38
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e6 e2       	ldi	r30, 0x26	; 38
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	8f 77       	andi	r24, 0x7F	; 127
    33f8:	8c 93       	st	X, r24

	return Local_enuErrorState;
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    33fc:	0f 90       	pop	r0
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <ADC_enuSetCallBack>:

ES_t ADC_enuSetCallBack(void(* Copy_pfuncAppFunc)(void*),void * Copy_pvidParameter){
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	00 d0       	rcall	.+0      	; 0x340a <ADC_enuSetCallBack+0x6>
    340a:	00 d0       	rcall	.+0      	; 0x340c <ADC_enuSetCallBack+0x8>
    340c:	0f 92       	push	r0
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	9b 83       	std	Y+3, r25	; 0x03
    3414:	8a 83       	std	Y+2, r24	; 0x02
    3416:	7d 83       	std	Y+5, r23	; 0x05
    3418:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pfuncAppFunc != NULL) && (Copy_pvidParameter != NULL)){
    341e:	8a 81       	ldd	r24, Y+2	; 0x02
    3420:	9b 81       	ldd	r25, Y+3	; 0x03
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	89 f0       	breq	.+34     	; 0x3448 <ADC_enuSetCallBack+0x44>
    3426:	8c 81       	ldd	r24, Y+4	; 0x04
    3428:	9d 81       	ldd	r25, Y+5	; 0x05
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	69 f0       	breq	.+26     	; 0x3448 <ADC_enuSetCallBack+0x44>

		LOC_pISRFunc = Copy_pfuncAppFunc;
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	9b 81       	ldd	r25, Y+3	; 0x03
    3432:	90 93 42 03 	sts	0x0342, r25
    3436:	80 93 41 03 	sts	0x0341, r24
		LOC_pISRFuncParameters = Copy_pvidParameter;
    343a:	8c 81       	ldd	r24, Y+4	; 0x04
    343c:	9d 81       	ldd	r25, Y+5	; 0x05
    343e:	90 93 44 03 	sts	0x0344, r25
    3442:	80 93 43 03 	sts	0x0343, r24
    3446:	02 c0       	rjmp	.+4      	; 0x344c <ADC_enuSetCallBack+0x48>
	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    3448:	83 e0       	ldi	r24, 0x03	; 3
    344a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    344c:	89 81       	ldd	r24, Y+1	; 0x01
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	cf 91       	pop	r28
    345a:	df 91       	pop	r29
    345c:	08 95       	ret

0000345e <__vector_16>:

void __vector_16 (void)__attribute__((signal));

void __vector_16(void){
    345e:	1f 92       	push	r1
    3460:	0f 92       	push	r0
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	0f 92       	push	r0
    3466:	11 24       	eor	r1, r1
    3468:	2f 93       	push	r18
    346a:	3f 93       	push	r19
    346c:	4f 93       	push	r20
    346e:	5f 93       	push	r21
    3470:	6f 93       	push	r22
    3472:	7f 93       	push	r23
    3474:	8f 93       	push	r24
    3476:	9f 93       	push	r25
    3478:	af 93       	push	r26
    347a:	bf 93       	push	r27
    347c:	ef 93       	push	r30
    347e:	ff 93       	push	r31
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62

	LOC_pISRFunc(LOC_pISRFuncParameters);
    3488:	e0 91 41 03 	lds	r30, 0x0341
    348c:	f0 91 42 03 	lds	r31, 0x0342
    3490:	80 91 43 03 	lds	r24, 0x0343
    3494:	90 91 44 03 	lds	r25, 0x0344
    3498:	09 95       	icall
}
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	ff 91       	pop	r31
    34a0:	ef 91       	pop	r30
    34a2:	bf 91       	pop	r27
    34a4:	af 91       	pop	r26
    34a6:	9f 91       	pop	r25
    34a8:	8f 91       	pop	r24
    34aa:	7f 91       	pop	r23
    34ac:	6f 91       	pop	r22
    34ae:	5f 91       	pop	r21
    34b0:	4f 91       	pop	r20
    34b2:	3f 91       	pop	r19
    34b4:	2f 91       	pop	r18
    34b6:	0f 90       	pop	r0
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	0f 90       	pop	r0
    34bc:	1f 90       	pop	r1
    34be:	18 95       	reti

000034c0 <Switch_enuInit>:

extern u8 Switch_u8MaxSwitchNum;

extern Switch_t Switch_astrSwitchConfig[];

ES_t Switch_enuInit(void){
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <Switch_enuInit+0x6>
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iter;

	for(Local_u8Iter = 0 ; Local_u8Iter < Switch_u8MaxSwitchNum ; Local_u8Iter++){
    34ce:	19 82       	std	Y+1, r1	; 0x01
    34d0:	24 c0       	rjmp	.+72     	; 0x351a <Switch_enuInit+0x5a>

		Local_enuErrorState = DIO_enuSetPinDirection(Switch_astrSwitchConfig[Local_u8Iter].Sw_Grp,
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	28 2f       	mov	r18, r24
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	c9 01       	movw	r24, r18
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	82 0f       	add	r24, r18
    34e0:	93 1f       	adc	r25, r19
    34e2:	fc 01       	movw	r30, r24
    34e4:	e1 54       	subi	r30, 0x41	; 65
    34e6:	fd 4f       	sbci	r31, 0xFD	; 253
    34e8:	40 81       	ld	r20, Z
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	c9 01       	movw	r24, r18
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	82 0f       	add	r24, r18
    34f8:	93 1f       	adc	r25, r19
    34fa:	fc 01       	movw	r30, r24
    34fc:	e0 54       	subi	r30, 0x40	; 64
    34fe:	fd 4f       	sbci	r31, 0xFD	; 253
    3500:	90 81       	ld	r25, Z
    3502:	84 2f       	mov	r24, r20
    3504:	69 2f       	mov	r22, r25
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
    350c:	8a 83       	std	Y+2, r24	; 0x02
				Switch_astrSwitchConfig[Local_u8Iter].Sw_Pin,DIO_INPUT);

		if( Local_enuErrorState != ES_OK){
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	88 23       	and	r24, r24
    3512:	41 f4       	brne	.+16     	; 0x3524 <Switch_enuInit+0x64>

	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_u8Iter;

	for(Local_u8Iter = 0 ; Local_u8Iter < Switch_u8MaxSwitchNum ; Local_u8Iter++){
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	8f 5f       	subi	r24, 0xFF	; 255
    3518:	89 83       	std	Y+1, r24	; 0x01
    351a:	90 91 be 02 	lds	r25, 0x02BE
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	89 17       	cp	r24, r25
    3522:	b8 f2       	brcs	.-82     	; 0x34d2 <Switch_enuInit+0x12>
			break;

		}
	}

	return Local_enuErrorState;
    3524:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	08 95       	ret

00003530 <Switch_enuGetSwitchState>:

ES_t Switch_enuGetSwitchState(u8 Copy_u8SwitchID , u8 * Copy_pu8SwitchState){
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	00 d0       	rcall	.+0      	; 0x3536 <Switch_enuGetSwitchState+0x6>
    3536:	00 d0       	rcall	.+0      	; 0x3538 <Switch_enuGetSwitchState+0x8>
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
    353c:	8a 83       	std	Y+2, r24	; 0x02
    353e:	7c 83       	std	Y+4, r23	; 0x04
    3540:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pu8SwitchState != NULL){
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	49 f1       	breq	.+82     	; 0x35a0 <Switch_enuGetSwitchState+0x70>

		if( Copy_u8SwitchID < Switch_u8MaxSwitchNum ){
    354e:	90 91 be 02 	lds	r25, 0x02BE
    3552:	8a 81       	ldd	r24, Y+2	; 0x02
    3554:	89 17       	cp	r24, r25
    3556:	08 f5       	brcc	.+66     	; 0x359a <Switch_enuGetSwitchState+0x6a>

			Local_enuErrorState = DIO_enuGetPinValue(Switch_astrSwitchConfig[Copy_u8SwitchID].Sw_Grp,
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	28 2f       	mov	r18, r24
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	c9 01       	movw	r24, r18
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	82 0f       	add	r24, r18
    3566:	93 1f       	adc	r25, r19
    3568:	fc 01       	movw	r30, r24
    356a:	e1 54       	subi	r30, 0x41	; 65
    356c:	fd 4f       	sbci	r31, 0xFD	; 253
    356e:	40 81       	ld	r20, Z
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	28 2f       	mov	r18, r24
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	c9 01       	movw	r24, r18
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	82 0f       	add	r24, r18
    357e:	93 1f       	adc	r25, r19
    3580:	fc 01       	movw	r30, r24
    3582:	e0 54       	subi	r30, 0x40	; 64
    3584:	fd 4f       	sbci	r31, 0xFD	; 253
    3586:	90 81       	ld	r25, Z
    3588:	2b 81       	ldd	r18, Y+3	; 0x03
    358a:	3c 81       	ldd	r19, Y+4	; 0x04
    358c:	84 2f       	mov	r24, r20
    358e:	69 2f       	mov	r22, r25
    3590:	a9 01       	movw	r20, r18
    3592:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_enuGetPinValue>
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	05 c0       	rjmp	.+10     	; 0x35a4 <Switch_enuGetSwitchState+0x74>
					Switch_astrSwitchConfig[Copy_u8SwitchID].Sw_Pin,Copy_pu8SwitchState);

		}
		else{

			Local_enuErrorState = ES_OUT_OF_RANGE;
    359a:	82 e0       	ldi	r24, 0x02	; 2
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <Switch_enuGetSwitchState+0x74>
		}
	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <Led_enuInit>:

extern u8 Led_u8MaxLedNum;

extern Led_t Led_astrLedConfig[];

ES_t Led_enuInit(void){
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <Led_enuInit+0x6>
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iter;
	for( Local_u8Iter = 0 ; Local_u8Iter < Led_u8MaxLedNum ; Local_u8Iter++){
    35c2:	19 82       	std	Y+1, r1	; 0x01
    35c4:	51 c0       	rjmp	.+162    	; 0x3668 <Led_enuInit+0xb4>

		Local_enuErrorState = DIO_enuSetPinDirection(Led_astrLedConfig[Local_u8Iter].Led_Grp,
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	28 2f       	mov	r18, r24
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	c9 01       	movw	r24, r18
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	82 0f       	add	r24, r18
    35d4:	93 1f       	adc	r25, r19
    35d6:	fc 01       	movw	r30, r24
    35d8:	e7 53       	subi	r30, 0x37	; 55
    35da:	fd 4f       	sbci	r31, 0xFD	; 253
    35dc:	40 81       	ld	r20, Z
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	c9 01       	movw	r24, r18
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	82 0f       	add	r24, r18
    35ec:	93 1f       	adc	r25, r19
    35ee:	fc 01       	movw	r30, r24
    35f0:	e6 53       	subi	r30, 0x36	; 54
    35f2:	fd 4f       	sbci	r31, 0xFD	; 253
    35f4:	90 81       	ld	r25, Z
    35f6:	84 2f       	mov	r24, r20
    35f8:	69 2f       	mov	r22, r25
    35fa:	41 e0       	ldi	r20, 0x01	; 1
    35fc:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
    3600:	8a 83       	std	Y+2, r24	; 0x02
				Led_astrLedConfig[Local_u8Iter].Led_Pin,DIO_OUTPUT);

		if( Local_enuErrorState != ES_OK ){
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	88 23       	and	r24, r24
    3606:	b1 f5       	brne	.+108    	; 0x3674 <Led_enuInit+0xc0>

			break;
		}

		Local_enuErrorState = DIO_enuSetPinValue(Led_astrLedConfig[Local_u8Iter].Led_Grp,
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	c9 01       	movw	r24, r18
    3610:	88 0f       	add	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	82 0f       	add	r24, r18
    3616:	93 1f       	adc	r25, r19
    3618:	fc 01       	movw	r30, r24
    361a:	e7 53       	subi	r30, 0x37	; 55
    361c:	fd 4f       	sbci	r31, 0xFD	; 253
    361e:	50 81       	ld	r21, Z
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	c9 01       	movw	r24, r18
    3628:	88 0f       	add	r24, r24
    362a:	99 1f       	adc	r25, r25
    362c:	82 0f       	add	r24, r18
    362e:	93 1f       	adc	r25, r19
    3630:	fc 01       	movw	r30, r24
    3632:	e6 53       	subi	r30, 0x36	; 54
    3634:	fd 4f       	sbci	r31, 0xFD	; 253
    3636:	40 81       	ld	r20, Z
    3638:	89 81       	ldd	r24, Y+1	; 0x01
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	c9 01       	movw	r24, r18
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	82 0f       	add	r24, r18
    3646:	93 1f       	adc	r25, r19
    3648:	fc 01       	movw	r30, r24
    364a:	e5 53       	subi	r30, 0x35	; 53
    364c:	fd 4f       	sbci	r31, 0xFD	; 253
    364e:	90 81       	ld	r25, Z
    3650:	85 2f       	mov	r24, r21
    3652:	64 2f       	mov	r22, r20
    3654:	49 2f       	mov	r20, r25
    3656:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    365a:	8a 83       	std	Y+2, r24	; 0x02
						Led_astrLedConfig[Local_u8Iter].Led_Pin,Led_astrLedConfig[Local_u8Iter].Led_Status);

		if (Local_enuErrorState != ES_OK ){
    365c:	8a 81       	ldd	r24, Y+2	; 0x02
    365e:	88 23       	and	r24, r24
    3660:	49 f4       	brne	.+18     	; 0x3674 <Led_enuInit+0xc0>
ES_t Led_enuInit(void){

	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_u8Iter;
	for( Local_u8Iter = 0 ; Local_u8Iter < Led_u8MaxLedNum ; Local_u8Iter++){
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	8f 5f       	subi	r24, 0xFF	; 255
    3666:	89 83       	std	Y+1, r24	; 0x01
    3668:	90 91 c8 02 	lds	r25, 0x02C8
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	89 17       	cp	r24, r25
    3670:	08 f4       	brcc	.+2      	; 0x3674 <Led_enuInit+0xc0>
    3672:	a9 cf       	rjmp	.-174    	; 0x35c6 <Led_enuInit+0x12>

			break;
		}
	}

	return Local_enuErrorState;
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	08 95       	ret

00003680 <Led_enuLedTurnON>:

ES_t Led_enuLedTurnON(u8 Copy_u8LedID){
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	00 d0       	rcall	.+0      	; 0x3686 <Led_enuLedTurnON+0x6>
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8LedID < Led_u8MaxLedNum){
    3690:	90 91 c8 02 	lds	r25, 0x02C8
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	89 17       	cp	r24, r25
    3698:	f8 f4       	brcc	.+62     	; 0x36d8 <Led_enuLedTurnON+0x58>

		Local_enuErrorState = DIO_enuSetPinValue(Led_astrLedConfig[Copy_u8LedID].Led_Grp,
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	28 2f       	mov	r18, r24
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	c9 01       	movw	r24, r18
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	82 0f       	add	r24, r18
    36a8:	93 1f       	adc	r25, r19
    36aa:	fc 01       	movw	r30, r24
    36ac:	e7 53       	subi	r30, 0x37	; 55
    36ae:	fd 4f       	sbci	r31, 0xFD	; 253
    36b0:	40 81       	ld	r20, Z
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	28 2f       	mov	r18, r24
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	c9 01       	movw	r24, r18
    36ba:	88 0f       	add	r24, r24
    36bc:	99 1f       	adc	r25, r25
    36be:	82 0f       	add	r24, r18
    36c0:	93 1f       	adc	r25, r19
    36c2:	fc 01       	movw	r30, r24
    36c4:	e6 53       	subi	r30, 0x36	; 54
    36c6:	fd 4f       	sbci	r31, 0xFD	; 253
    36c8:	90 81       	ld	r25, Z
    36ca:	84 2f       	mov	r24, r20
    36cc:	69 2f       	mov	r22, r25
    36ce:	41 e0       	ldi	r20, 0x01	; 1
    36d0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <Led_enuLedTurnON+0x5c>
				Led_astrLedConfig[Copy_u8LedID].Led_Pin,DIO_HIGH);

	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    36d8:	82 e0       	ldi	r24, 0x02	; 2
    36da:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <Led_enuLedTurnOFF>:

ES_t Led_enuLedTurnOFF(u8 Copy_u8LedID){
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	00 d0       	rcall	.+0      	; 0x36ee <Led_enuLedTurnOFF+0x6>
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8LedID < Led_u8MaxLedNum){
    36f8:	90 91 c8 02 	lds	r25, 0x02C8
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	89 17       	cp	r24, r25
    3700:	f8 f4       	brcc	.+62     	; 0x3740 <Led_enuLedTurnOFF+0x58>

		Local_enuErrorState = DIO_enuSetPinValue(Led_astrLedConfig[Copy_u8LedID].Led_Grp,
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	28 2f       	mov	r18, r24
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	c9 01       	movw	r24, r18
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	82 0f       	add	r24, r18
    3710:	93 1f       	adc	r25, r19
    3712:	fc 01       	movw	r30, r24
    3714:	e7 53       	subi	r30, 0x37	; 55
    3716:	fd 4f       	sbci	r31, 0xFD	; 253
    3718:	40 81       	ld	r20, Z
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	28 2f       	mov	r18, r24
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	c9 01       	movw	r24, r18
    3722:	88 0f       	add	r24, r24
    3724:	99 1f       	adc	r25, r25
    3726:	82 0f       	add	r24, r18
    3728:	93 1f       	adc	r25, r19
    372a:	fc 01       	movw	r30, r24
    372c:	e6 53       	subi	r30, 0x36	; 54
    372e:	fd 4f       	sbci	r31, 0xFD	; 253
    3730:	90 81       	ld	r25, Z
    3732:	84 2f       	mov	r24, r20
    3734:	69 2f       	mov	r22, r25
    3736:	40 e0       	ldi	r20, 0x00	; 0
    3738:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	02 c0       	rjmp	.+4      	; 0x3744 <Led_enuLedTurnOFF+0x5c>
				Led_astrLedConfig[Copy_u8LedID].Led_Pin,DIO_LOW);

	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    3740:	82 e0       	ldi	r24, 0x02	; 2
    3742:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3744:	89 81       	ldd	r24, Y+1	; 0x01

}
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	cf 91       	pop	r28
    374c:	df 91       	pop	r29
    374e:	08 95       	ret

00003750 <Led_enuLedToggle>:

ES_t Led_enuLedToggle(u8 Copy_u8LedID){
    3750:	df 93       	push	r29
    3752:	cf 93       	push	r28
    3754:	00 d0       	rcall	.+0      	; 0x3756 <Led_enuLedToggle+0x6>
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8LedID < Led_u8MaxLedNum){
    3760:	90 91 c8 02 	lds	r25, 0x02C8
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	89 17       	cp	r24, r25
    3768:	f0 f4       	brcc	.+60     	; 0x37a6 <Led_enuLedToggle+0x56>

		Local_enuErrorState = DIO_enuTogglePinValue(Led_astrLedConfig[Copy_u8LedID].Led_Grp,
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	c9 01       	movw	r24, r18
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	82 0f       	add	r24, r18
    3778:	93 1f       	adc	r25, r19
    377a:	fc 01       	movw	r30, r24
    377c:	e7 53       	subi	r30, 0x37	; 55
    377e:	fd 4f       	sbci	r31, 0xFD	; 253
    3780:	40 81       	ld	r20, Z
    3782:	8a 81       	ldd	r24, Y+2	; 0x02
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	c9 01       	movw	r24, r18
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	82 0f       	add	r24, r18
    3790:	93 1f       	adc	r25, r19
    3792:	fc 01       	movw	r30, r24
    3794:	e6 53       	subi	r30, 0x36	; 54
    3796:	fd 4f       	sbci	r31, 0xFD	; 253
    3798:	90 81       	ld	r25, Z
    379a:	84 2f       	mov	r24, r20
    379c:	69 2f       	mov	r22, r25
    379e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <DIO_enuTogglePinValue>
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <Led_enuLedToggle+0x5a>
				Led_astrLedConfig[Copy_u8LedID].Led_Pin);

		}
		else{

			Local_enuErrorState = ES_OUT_OF_RANGE;
    37a6:	82 e0       	ldi	r24, 0x02	; 2
    37a8:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	cf 91       	pop	r28
    37b2:	df 91       	pop	r29
    37b4:	08 95       	ret

000037b6 <Lcd_enuInit>:
//my own lib
#include "Lcd_priv.h"
#include "Lcd_config.h"


ES_t Lcd_enuInit(void){
    37b6:	df 93       	push	r29
    37b8:	cf 93       	push	r28
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
    37be:	6d 97       	sbiw	r28, 0x1d	; 29
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	f8 94       	cli
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState = ES_NOK;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	8d 8f       	std	Y+29, r24	; 0x1d
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	ac e0       	ldi	r26, 0x0C	; 12
    37d4:	b2 e4       	ldi	r27, 0x42	; 66
    37d6:	89 8f       	std	Y+25, r24	; 0x19
    37d8:	9a 8f       	std	Y+26, r25	; 0x1a
    37da:	ab 8f       	std	Y+27, r26	; 0x1b
    37dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37de:	69 8d       	ldd	r22, Y+25	; 0x19
    37e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	4a e7       	ldi	r20, 0x7A	; 122
    37ec:	55 e4       	ldi	r21, 0x45	; 69
    37ee:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	8d 8b       	std	Y+21, r24	; 0x15
    37f8:	9e 8b       	std	Y+22, r25	; 0x16
    37fa:	af 8b       	std	Y+23, r26	; 0x17
    37fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3800:	7e 89       	ldd	r23, Y+22	; 0x16
    3802:	8f 89       	ldd	r24, Y+23	; 0x17
    3804:	98 8d       	ldd	r25, Y+24	; 0x18
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e8       	ldi	r20, 0x80	; 128
    380c:	5f e3       	ldi	r21, 0x3F	; 63
    380e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    3812:	88 23       	and	r24, r24
    3814:	2c f4       	brge	.+10     	; 0x3820 <Lcd_enuInit+0x6a>
		__ticks = 1;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9c 8b       	std	Y+20, r25	; 0x14
    381c:	8b 8b       	std	Y+19, r24	; 0x13
    381e:	3f c0       	rjmp	.+126    	; 0x389e <Lcd_enuInit+0xe8>
	else if (__tmp > 65535)
    3820:	6d 89       	ldd	r22, Y+21	; 0x15
    3822:	7e 89       	ldd	r23, Y+22	; 0x16
    3824:	8f 89       	ldd	r24, Y+23	; 0x17
    3826:	98 8d       	ldd	r25, Y+24	; 0x18
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	3f ef       	ldi	r19, 0xFF	; 255
    382c:	4f e7       	ldi	r20, 0x7F	; 127
    382e:	57 e4       	ldi	r21, 0x47	; 71
    3830:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    3834:	18 16       	cp	r1, r24
    3836:	4c f5       	brge	.+82     	; 0x388a <Lcd_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3838:	69 8d       	ldd	r22, Y+25	; 0x19
    383a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    383c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    383e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	40 e2       	ldi	r20, 0x20	; 32
    3846:	51 e4       	ldi	r21, 0x41	; 65
    3848:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	bc 01       	movw	r22, r24
    3852:	cd 01       	movw	r24, r26
    3854:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	9c 8b       	std	Y+20, r25	; 0x14
    385e:	8b 8b       	std	Y+19, r24	; 0x13
    3860:	0f c0       	rjmp	.+30     	; 0x3880 <Lcd_enuInit+0xca>
    3862:	80 e9       	ldi	r24, 0x90	; 144
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	9a 8b       	std	Y+18, r25	; 0x12
    3868:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    386a:	89 89       	ldd	r24, Y+17	; 0x11
    386c:	9a 89       	ldd	r25, Y+18	; 0x12
    386e:	01 97       	sbiw	r24, 0x01	; 1
    3870:	f1 f7       	brne	.-4      	; 0x386e <Lcd_enuInit+0xb8>
    3872:	9a 8b       	std	Y+18, r25	; 0x12
    3874:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3876:	8b 89       	ldd	r24, Y+19	; 0x13
    3878:	9c 89       	ldd	r25, Y+20	; 0x14
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	9c 8b       	std	Y+20, r25	; 0x14
    387e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3880:	8b 89       	ldd	r24, Y+19	; 0x13
    3882:	9c 89       	ldd	r25, Y+20	; 0x14
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	69 f7       	brne	.-38     	; 0x3862 <Lcd_enuInit+0xac>
    3888:	14 c0       	rjmp	.+40     	; 0x38b2 <Lcd_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388a:	6d 89       	ldd	r22, Y+21	; 0x15
    388c:	7e 89       	ldd	r23, Y+22	; 0x16
    388e:	8f 89       	ldd	r24, Y+23	; 0x17
    3890:	98 8d       	ldd	r25, Y+24	; 0x18
    3892:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	9c 8b       	std	Y+20, r25	; 0x14
    389c:	8b 8b       	std	Y+19, r24	; 0x13
    389e:	8b 89       	ldd	r24, Y+19	; 0x13
    38a0:	9c 89       	ldd	r25, Y+20	; 0x14
    38a2:	98 8b       	std	Y+16, r25	; 0x10
    38a4:	8f 87       	std	Y+15, r24	; 0x0f
    38a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a8:	98 89       	ldd	r25, Y+16	; 0x10
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <Lcd_enuInit+0xf4>
    38ae:	98 8b       	std	Y+16, r25	; 0x10
    38b0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(35);

	DIO_enuSetPinDirection(LCD_RS_GRP,LCD_RS_PIN,DIO_OUTPUT);
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	61 e0       	ldi	r22, 0x01	; 1
    38b6:	41 e0       	ldi	r20, 0x01	; 1
    38b8:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_RW_GRP,LCD_RW_PIN,DIO_OUTPUT);
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	62 e0       	ldi	r22, 0x02	; 2
    38c0:	41 e0       	ldi	r20, 0x01	; 1
    38c2:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_EN_GRP,LCD_EN_PIN,DIO_OUTPUT);
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	63 e0       	ldi	r22, 0x03	; 3
    38ca:	41 e0       	ldi	r20, 0x01	; 1
    38cc:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(LCD_D7_GRP,LCD_D7_PIN,DIO_OUTPUT);
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	67 e0       	ldi	r22, 0x07	; 7
    38d4:	41 e0       	ldi	r20, 0x01	; 1
    38d6:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_D6_GRP,LCD_D6_PIN,DIO_OUTPUT);
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	66 e0       	ldi	r22, 0x06	; 6
    38de:	41 e0       	ldi	r20, 0x01	; 1
    38e0:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_D5_GRP,LCD_D5_PIN,DIO_OUTPUT);
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	65 e0       	ldi	r22, 0x05	; 5
    38e8:	41 e0       	ldi	r20, 0x01	; 1
    38ea:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_D4_GRP,LCD_D4_PIN,DIO_OUTPUT);
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	64 e0       	ldi	r22, 0x04	; 4
    38f2:	41 e0       	ldi	r20, 0x01	; 1
    38f4:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>

    #elif LCD_MODE == FOUR_BIT

		  //DIO_enuSetPinDirection(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);

		  DIO_enuSetPinValue(LCD_D7_GRP,LCD_D7_PIN,DIO_LOW);
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	67 e0       	ldi	r22, 0x07	; 7
    38fc:	40 e0       	ldi	r20, 0x00	; 0
    38fe:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(LCD_D6_GRP,LCD_D6_PIN,DIO_LOW);
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	66 e0       	ldi	r22, 0x06	; 6
    3906:	40 e0       	ldi	r20, 0x00	; 0
    3908:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(LCD_D5_GRP,LCD_D5_PIN,DIO_HIGH);
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	65 e0       	ldi	r22, 0x05	; 5
    3910:	41 e0       	ldi	r20, 0x01	; 1
    3912:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	      DIO_enuSetPinValue(LCD_D4_GRP,LCD_D4_PIN,DIO_LOW);
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	64 e0       	ldi	r22, 0x04	; 4
    391a:	40 e0       	ldi	r20, 0x00	; 0
    391c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

		  DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_HIGH);
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	63 e0       	ldi	r22, 0x03	; 3
    3924:	41 e0       	ldi	r20, 0x01	; 1
    3926:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	a0 e8       	ldi	r26, 0x80	; 128
    3930:	bf e3       	ldi	r27, 0x3F	; 63
    3932:	8b 87       	std	Y+11, r24	; 0x0b
    3934:	9c 87       	std	Y+12, r25	; 0x0c
    3936:	ad 87       	std	Y+13, r26	; 0x0d
    3938:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393a:	6b 85       	ldd	r22, Y+11	; 0x0b
    393c:	7c 85       	ldd	r23, Y+12	; 0x0c
    393e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3940:	9e 85       	ldd	r25, Y+14	; 0x0e
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	4a e7       	ldi	r20, 0x7A	; 122
    3948:	55 e4       	ldi	r21, 0x45	; 69
    394a:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	8f 83       	std	Y+7, r24	; 0x07
    3954:	98 87       	std	Y+8, r25	; 0x08
    3956:	a9 87       	std	Y+9, r26	; 0x09
    3958:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    395a:	6f 81       	ldd	r22, Y+7	; 0x07
    395c:	78 85       	ldd	r23, Y+8	; 0x08
    395e:	89 85       	ldd	r24, Y+9	; 0x09
    3960:	9a 85       	ldd	r25, Y+10	; 0x0a
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e8       	ldi	r20, 0x80	; 128
    3968:	5f e3       	ldi	r21, 0x3F	; 63
    396a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    396e:	88 23       	and	r24, r24
    3970:	2c f4       	brge	.+10     	; 0x397c <Lcd_enuInit+0x1c6>
		__ticks = 1;
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	9e 83       	std	Y+6, r25	; 0x06
    3978:	8d 83       	std	Y+5, r24	; 0x05
    397a:	3f c0       	rjmp	.+126    	; 0x39fa <Lcd_enuInit+0x244>
	else if (__tmp > 65535)
    397c:	6f 81       	ldd	r22, Y+7	; 0x07
    397e:	78 85       	ldd	r23, Y+8	; 0x08
    3980:	89 85       	ldd	r24, Y+9	; 0x09
    3982:	9a 85       	ldd	r25, Y+10	; 0x0a
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	3f ef       	ldi	r19, 0xFF	; 255
    3988:	4f e7       	ldi	r20, 0x7F	; 127
    398a:	57 e4       	ldi	r21, 0x47	; 71
    398c:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    3990:	18 16       	cp	r1, r24
    3992:	4c f5       	brge	.+82     	; 0x39e6 <Lcd_enuInit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3994:	6b 85       	ldd	r22, Y+11	; 0x0b
    3996:	7c 85       	ldd	r23, Y+12	; 0x0c
    3998:	8d 85       	ldd	r24, Y+13	; 0x0d
    399a:	9e 85       	ldd	r25, Y+14	; 0x0e
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	40 e2       	ldi	r20, 0x20	; 32
    39a2:	51 e4       	ldi	r21, 0x41	; 65
    39a4:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	bc 01       	movw	r22, r24
    39ae:	cd 01       	movw	r24, r26
    39b0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9e 83       	std	Y+6, r25	; 0x06
    39ba:	8d 83       	std	Y+5, r24	; 0x05
    39bc:	0f c0       	rjmp	.+30     	; 0x39dc <Lcd_enuInit+0x226>
    39be:	80 e9       	ldi	r24, 0x90	; 144
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	9c 83       	std	Y+4, r25	; 0x04
    39c4:	8b 83       	std	Y+3, r24	; 0x03
    39c6:	8b 81       	ldd	r24, Y+3	; 0x03
    39c8:	9c 81       	ldd	r25, Y+4	; 0x04
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	f1 f7       	brne	.-4      	; 0x39ca <Lcd_enuInit+0x214>
    39ce:	9c 83       	std	Y+4, r25	; 0x04
    39d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d2:	8d 81       	ldd	r24, Y+5	; 0x05
    39d4:	9e 81       	ldd	r25, Y+6	; 0x06
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	9e 83       	std	Y+6, r25	; 0x06
    39da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39dc:	8d 81       	ldd	r24, Y+5	; 0x05
    39de:	9e 81       	ldd	r25, Y+6	; 0x06
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	69 f7       	brne	.-38     	; 0x39be <Lcd_enuInit+0x208>
    39e4:	14 c0       	rjmp	.+40     	; 0x3a0e <Lcd_enuInit+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e6:	6f 81       	ldd	r22, Y+7	; 0x07
    39e8:	78 85       	ldd	r23, Y+8	; 0x08
    39ea:	89 85       	ldd	r24, Y+9	; 0x09
    39ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ee:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	9e 83       	std	Y+6, r25	; 0x06
    39f8:	8d 83       	std	Y+5, r24	; 0x05
    39fa:	8d 81       	ldd	r24, Y+5	; 0x05
    39fc:	9e 81       	ldd	r25, Y+6	; 0x06
    39fe:	9a 83       	std	Y+2, r25	; 0x02
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	9a 81       	ldd	r25, Y+2	; 0x02
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <Lcd_enuInit+0x250>
    3a0a:	9a 83       	std	Y+2, r25	; 0x02
    3a0c:	89 83       	std	Y+1, r24	; 0x01
		  _delay_ms(1);
		  DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_LOW);
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	63 e0       	ldi	r22, 0x03	; 3
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>


		  DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	61 e0       	ldi	r22, 0x01	; 1
    3a1c:	40 e0       	ldi	r20, 0x00	; 0
    3a1e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
		  enuWriteNLatch(0x28);
    3a22:	88 e2       	ldi	r24, 0x28	; 40
    3a24:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>
        #error LCD Mode MUST BE EIGHT_BIT OR FOUR_BIT

    #endif

	// Display ON/OFF Control
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	61 e0       	ldi	r22, 0x01	; 1
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	enuWriteNLatch(0x0F);
    3a32:	8f e0       	ldi	r24, 0x0F	; 15
    3a34:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>


	// Display Clear
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	61 e0       	ldi	r22, 0x01	; 1
    3a3c:	40 e0       	ldi	r20, 0x00	; 0
    3a3e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	enuWriteNLatch(0x01);
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>

	// Entry Mode Set
	DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	61 e0       	ldi	r22, 0x01	; 1
    3a4c:	40 e0       	ldi	r20, 0x00	; 0
    3a4e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	enuWriteNLatch(0x06);
    3a52:	86 e0       	ldi	r24, 0x06	; 6
    3a54:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>

	return Local_enuErrorState;
    3a58:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3a5a:	6d 96       	adiw	r28, 0x1d	; 29
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	de bf       	out	0x3e, r29	; 62
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	08 95       	ret

00003a6c <Lcd_enuSendCommand>:

ES_t Lcd_enuSendCommand(u8 Copy_u8Command){
    3a6c:	df 93       	push	r29
    3a6e:	cf 93       	push	r28
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <Lcd_enuSendCommand+0x6>
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	61 e0       	ldi	r22, 0x01	; 1
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    3a86:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState == ES_OK ){
    3a88:	89 81       	ldd	r24, Y+1	; 0x01
    3a8a:	88 23       	and	r24, r24
    3a8c:	21 f4       	brne	.+8      	; 0x3a96 <Lcd_enuSendCommand+0x2a>

		Local_enuErrorState = enuWriteNLatch(Copy_u8Command);
    3a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a90:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>
    3a94:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	08 95       	ret

00003aa2 <Lcd_enuSendData>:

ES_t Lcd_enuSendData(u8 Copy_u8Data){
    3aa2:	df 93       	push	r29
    3aa4:	cf 93       	push	r28
    3aa6:	00 d0       	rcall	.+0      	; 0x3aa8 <Lcd_enuSendData+0x6>
    3aa8:	cd b7       	in	r28, 0x3d	; 61
    3aaa:	de b7       	in	r29, 0x3e	; 62
    3aac:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH);
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	41 e0       	ldi	r20, 0x01	; 1
    3ab8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    3abc:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState == ES_OK ){
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	88 23       	and	r24, r24
    3ac2:	21 f4       	brne	.+8      	; 0x3acc <Lcd_enuSendData+0x2a>

		Local_enuErrorState = enuWriteNLatch(Copy_u8Data);
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac6:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>
    3aca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	cf 91       	pop	r28
    3ad4:	df 91       	pop	r29
    3ad6:	08 95       	ret

00003ad8 <Lcd_enuSendString>:

ES_t Lcd_enuSendString(const char * Copy_pcString){
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	00 d0       	rcall	.+0      	; 0x3ade <Lcd_enuSendString+0x6>
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <Lcd_enuSendString+0x8>
    3ae0:	0f 92       	push	r0
    3ae2:	cd b7       	in	r28, 0x3d	; 61
    3ae4:	de b7       	in	r29, 0x3e	; 62
    3ae6:	9d 83       	std	Y+5, r25	; 0x05
    3ae8:	8c 83       	std	Y+4, r24	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	89 83       	std	Y+1, r24	; 0x01

	ES_t Local_aenuErrorState[LCD_SEND_STRING_ERROR_STATE_COND] = {0};
    3aee:	1b 82       	std	Y+3, r1	; 0x03
    3af0:	1a 82       	std	Y+2, r1	; 0x02
    3af2:	12 c0       	rjmp	.+36     	; 0x3b18 <Lcd_enuSendString+0x40>

	while(*Copy_pcString){

		Local_aenuErrorState[0] = DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH);
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	61 e0       	ldi	r22, 0x01	; 1
    3af8:	41 e0       	ldi	r20, 0x01	; 1
    3afa:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    3afe:	8a 83       	std	Y+2, r24	; 0x02
		Local_aenuErrorState[1] = enuWriteNLatch(*Copy_pcString++);
    3b00:	ec 81       	ldd	r30, Y+4	; 0x04
    3b02:	fd 81       	ldd	r31, Y+5	; 0x05
    3b04:	20 81       	ld	r18, Z
    3b06:	8c 81       	ldd	r24, Y+4	; 0x04
    3b08:	9d 81       	ldd	r25, Y+5	; 0x05
    3b0a:	01 96       	adiw	r24, 0x01	; 1
    3b0c:	9d 83       	std	Y+5, r25	; 0x05
    3b0e:	8c 83       	std	Y+4, r24	; 0x04
    3b10:	82 2f       	mov	r24, r18
    3b12:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>
    3b16:	8b 83       	std	Y+3, r24	; 0x03

	ES_t Local_enuErrorState = ES_NOK;

	ES_t Local_aenuErrorState[LCD_SEND_STRING_ERROR_STATE_COND] = {0};

	while(*Copy_pcString){
    3b18:	ec 81       	ldd	r30, Y+4	; 0x04
    3b1a:	fd 81       	ldd	r31, Y+5	; 0x05
    3b1c:	80 81       	ld	r24, Z
    3b1e:	88 23       	and	r24, r24
    3b20:	49 f7       	brne	.-46     	; 0x3af4 <Lcd_enuSendString+0x1c>
		Local_aenuErrorState[0] = DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH);
		Local_aenuErrorState[1] = enuWriteNLatch(*Copy_pcString++);

	}

	return Local_enuErrorState;
    3b22:	89 81       	ldd	r24, Y+1	; 0x01


}
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <Lcd_enuSetCursor>:

ES_t Lcd_enuSetCursor(u8 Copy_u8RowNum , u8 Copy_u8ColNum){
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	00 d0       	rcall	.+0      	; 0x3b3a <Lcd_enuSetCursor+0x6>
    3b3a:	0f 92       	push	r0
    3b3c:	cd b7       	in	r28, 0x3d	; 61
    3b3e:	de b7       	in	r29, 0x3e	; 62
    3b40:	8a 83       	std	Y+2, r24	; 0x02
    3b42:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	89 83       	std	Y+1, r24	; 0x01

	if( ((Copy_u8RowNum >= LCD_MIN_NUM_ROWS) && (Copy_u8RowNum <= LCD_MAX_NUM_ROWS)) &&
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	88 23       	and	r24, r24
    3b4c:	11 f1       	breq	.+68     	; 0x3b92 <Lcd_enuSetCursor+0x5e>
    3b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b50:	83 30       	cpi	r24, 0x03	; 3
    3b52:	f8 f4       	brcc	.+62     	; 0x3b92 <Lcd_enuSetCursor+0x5e>
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	88 23       	and	r24, r24
    3b58:	e1 f0       	breq	.+56     	; 0x3b92 <Lcd_enuSetCursor+0x5e>
    3b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5c:	81 31       	cpi	r24, 0x11	; 17
    3b5e:	c8 f4       	brcc	.+50     	; 0x3b92 <Lcd_enuSetCursor+0x5e>
			((Copy_u8ColNum >= LCD_MIN_NUM_COLS) && (Copy_u8ColNum <= LCD_MAX_NUM_COLS))){

		DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	61 e0       	ldi	r22, 0x01	; 1
    3b64:	40 e0       	ldi	r20, 0x00	; 0
    3b66:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
		enuWriteNLatch((LCD_ROW_1_COL_1_BASE_ADDRESS + ( (LCD_NUM_TO_ROW_2_COL_1_SHIFT) * (Copy_u8RowNum - 1))) +  (Copy_u8ColNum - 1));
    3b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6c:	88 2f       	mov	r24, r24
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	01 96       	adiw	r24, 0x01	; 1
    3b72:	00 24       	eor	r0, r0
    3b74:	96 95       	lsr	r25
    3b76:	87 95       	ror	r24
    3b78:	07 94       	ror	r0
    3b7a:	96 95       	lsr	r25
    3b7c:	87 95       	ror	r24
    3b7e:	07 94       	ror	r0
    3b80:	98 2f       	mov	r25, r24
    3b82:	80 2d       	mov	r24, r0
    3b84:	98 2f       	mov	r25, r24
    3b86:	8b 81       	ldd	r24, Y+3	; 0x03
    3b88:	89 0f       	add	r24, r25
    3b8a:	81 50       	subi	r24, 0x01	; 1
    3b8c:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>
    3b90:	02 c0       	rjmp	.+4      	; 0x3b96 <Lcd_enuSetCursor+0x62>

	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    3b92:	82 e0       	ldi	r24, 0x02	; 2
    3b94:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b98:	0f 90       	pop	r0
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	08 95       	ret

00003ba4 <Lcd_enuDrawSpecialChar>:

ES_t Lcd_enuDrawSpecialChar(u8 * Copy_pu8Pattern , u8 Copy_u8PatternNum, u8 Copy_StartPattern , u8 Copy_u8RowNum , u8 Copy_u8ColNum , u8 Copy_u8PrintDirection){
    3ba4:	ef 92       	push	r14
    3ba6:	0f 93       	push	r16
    3ba8:	df 93       	push	r29
    3baa:	cf 93       	push	r28
    3bac:	cd b7       	in	r28, 0x3d	; 61
    3bae:	de b7       	in	r29, 0x3e	; 62
    3bb0:	29 97       	sbiw	r28, 0x09	; 9
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	f8 94       	cli
    3bb6:	de bf       	out	0x3e, r29	; 62
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	cd bf       	out	0x3d, r28	; 61
    3bbc:	9c 83       	std	Y+4, r25	; 0x04
    3bbe:	8b 83       	std	Y+3, r24	; 0x03
    3bc0:	6d 83       	std	Y+5, r22	; 0x05
    3bc2:	4e 83       	std	Y+6, r20	; 0x06
    3bc4:	2f 83       	std	Y+7, r18	; 0x07
    3bc6:	08 87       	std	Y+8, r16	; 0x08
    3bc8:	e9 86       	std	Y+9, r14	; 0x09

	ES_t Local_enuErrorState = ES_NOK;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pu8Pattern != NULL ){
    3bce:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd2:	00 97       	sbiw	r24, 0x00	; 0
    3bd4:	09 f4       	brne	.+2      	; 0x3bd8 <Lcd_enuDrawSpecialChar+0x34>
    3bd6:	6f c0       	rjmp	.+222    	; 0x3cb6 <Lcd_enuDrawSpecialChar+0x112>

		if( (Copy_u8PatternNum < LCD_MAX_PATTERN_NUM) &&
    3bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bda:	88 30       	cpi	r24, 0x08	; 8
    3bdc:	08 f0       	brcs	.+2      	; 0x3be0 <Lcd_enuDrawSpecialChar+0x3c>
    3bde:	68 c0       	rjmp	.+208    	; 0x3cb0 <Lcd_enuDrawSpecialChar+0x10c>
    3be0:	8e 81       	ldd	r24, Y+6	; 0x06
    3be2:	89 37       	cpi	r24, 0x79	; 121
    3be4:	08 f0       	brcs	.+2      	; 0x3be8 <Lcd_enuDrawSpecialChar+0x44>
    3be6:	64 c0       	rjmp	.+200    	; 0x3cb0 <Lcd_enuDrawSpecialChar+0x10c>
    3be8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bea:	80 34       	cpi	r24, 0x40	; 64
    3bec:	08 f4       	brcc	.+2      	; 0x3bf0 <Lcd_enuDrawSpecialChar+0x4c>
    3bee:	60 c0       	rjmp	.+192    	; 0x3cb0 <Lcd_enuDrawSpecialChar+0x10c>
    3bf0:	8f 81       	ldd	r24, Y+7	; 0x07
    3bf2:	88 23       	and	r24, r24
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <Lcd_enuDrawSpecialChar+0x54>
    3bf6:	5c c0       	rjmp	.+184    	; 0x3cb0 <Lcd_enuDrawSpecialChar+0x10c>
    3bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    3bfa:	83 30       	cpi	r24, 0x03	; 3
    3bfc:	08 f0       	brcs	.+2      	; 0x3c00 <Lcd_enuDrawSpecialChar+0x5c>
    3bfe:	58 c0       	rjmp	.+176    	; 0x3cb0 <Lcd_enuDrawSpecialChar+0x10c>
    3c00:	88 85       	ldd	r24, Y+8	; 0x08
    3c02:	88 23       	and	r24, r24
    3c04:	09 f4       	brne	.+2      	; 0x3c08 <Lcd_enuDrawSpecialChar+0x64>
    3c06:	54 c0       	rjmp	.+168    	; 0x3cb0 <Lcd_enuDrawSpecialChar+0x10c>
    3c08:	88 85       	ldd	r24, Y+8	; 0x08
    3c0a:	81 31       	cpi	r24, 0x11	; 17
    3c0c:	08 f0       	brcs	.+2      	; 0x3c10 <Lcd_enuDrawSpecialChar+0x6c>
    3c0e:	50 c0       	rjmp	.+160    	; 0x3cb0 <Lcd_enuDrawSpecialChar+0x10c>
    3c10:	89 85       	ldd	r24, Y+9	; 0x09
    3c12:	84 30       	cpi	r24, 0x04	; 4
    3c14:	21 f0       	breq	.+8      	; 0x3c1e <Lcd_enuDrawSpecialChar+0x7a>
    3c16:	89 85       	ldd	r24, Y+9	; 0x09
    3c18:	86 30       	cpi	r24, 0x06	; 6
    3c1a:	09 f0       	breq	.+2      	; 0x3c1e <Lcd_enuDrawSpecialChar+0x7a>
    3c1c:	49 c0       	rjmp	.+146    	; 0x3cb0 <Lcd_enuDrawSpecialChar+0x10c>
				(Copy_u8RowNum >= LCD_MIN_NUM_ROWS) && (Copy_u8RowNum <= LCD_MAX_NUM_ROWS) &&
				(Copy_u8ColNum >= LCD_MIN_NUM_COLS) && (Copy_u8ColNum <= LCD_MAX_NUM_COLS) &&
				((Copy_u8PrintDirection == LCD_DISPLAY_RIGHT) || (Copy_u8PrintDirection == LCD_DISPLAY_LEFT)) ){


			DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	61 e0       	ldi	r22, 0x01	; 1
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
			enuWriteNLatch(Copy_StartPattern); //shift CGRAM
    3c28:	8e 81       	ldd	r24, Y+6	; 0x06
    3c2a:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>

			for(u8 iter = 0 ; iter < LCD_NUM_OF_BYTES_PER_CHART ; iter++){
    3c2e:	19 82       	std	Y+1, r1	; 0x01
    3c30:	13 c0       	rjmp	.+38     	; 0x3c58 <Lcd_enuDrawSpecialChar+0xb4>

				DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH);
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	61 e0       	ldi	r22, 0x01	; 1
    3c36:	41 e0       	ldi	r20, 0x01	; 1
    3c38:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
				enuWriteNLatch(*Copy_pu8Pattern++);
    3c3c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c3e:	fc 81       	ldd	r31, Y+4	; 0x04
    3c40:	20 81       	ld	r18, Z
    3c42:	8b 81       	ldd	r24, Y+3	; 0x03
    3c44:	9c 81       	ldd	r25, Y+4	; 0x04
    3c46:	01 96       	adiw	r24, 0x01	; 1
    3c48:	9c 83       	std	Y+4, r25	; 0x04
    3c4a:	8b 83       	std	Y+3, r24	; 0x03
    3c4c:	82 2f       	mov	r24, r18
    3c4e:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>


			DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
			enuWriteNLatch(Copy_StartPattern); //shift CGRAM

			for(u8 iter = 0 ; iter < LCD_NUM_OF_BYTES_PER_CHART ; iter++){
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	8f 5f       	subi	r24, 0xFF	; 255
    3c56:	89 83       	std	Y+1, r24	; 0x01
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	88 30       	cpi	r24, 0x08	; 8
    3c5c:	50 f3       	brcs	.-44     	; 0x3c32 <Lcd_enuDrawSpecialChar+0x8e>
				DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH);
				enuWriteNLatch(*Copy_pu8Pattern++);
			}


			DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	61 e0       	ldi	r22, 0x01	; 1
    3c62:	40 e0       	ldi	r20, 0x00	; 0
    3c64:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
			enuWriteNLatch((LCD_ROW_1_COL_1_BASE_ADDRESS + ( (LCD_NUM_TO_ROW_2_COL_1_SHIFT) * (Copy_u8RowNum - 1))) +  (Copy_u8ColNum - 1)); // shift DDRAM
    3c68:	8f 81       	ldd	r24, Y+7	; 0x07
    3c6a:	88 2f       	mov	r24, r24
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	01 96       	adiw	r24, 0x01	; 1
    3c70:	00 24       	eor	r0, r0
    3c72:	96 95       	lsr	r25
    3c74:	87 95       	ror	r24
    3c76:	07 94       	ror	r0
    3c78:	96 95       	lsr	r25
    3c7a:	87 95       	ror	r24
    3c7c:	07 94       	ror	r0
    3c7e:	98 2f       	mov	r25, r24
    3c80:	80 2d       	mov	r24, r0
    3c82:	98 2f       	mov	r25, r24
    3c84:	88 85       	ldd	r24, Y+8	; 0x08
    3c86:	89 0f       	add	r24, r25
    3c88:	81 50       	subi	r24, 0x01	; 1
    3c8a:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>

			DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_LOW);
    3c8e:	81 e0       	ldi	r24, 0x01	; 1
    3c90:	61 e0       	ldi	r22, 0x01	; 1
    3c92:	40 e0       	ldi	r20, 0x00	; 0
    3c94:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
			enuWriteNLatch(Copy_u8PrintDirection);
    3c98:	89 85       	ldd	r24, Y+9	; 0x09
    3c9a:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>

			DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH);
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	61 e0       	ldi	r22, 0x01	; 1
    3ca2:	41 e0       	ldi	r20, 0x01	; 1
    3ca4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
			enuWriteNLatch(Copy_u8PatternNum);
    3ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    3caa:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>
    3cae:	05 c0       	rjmp	.+10     	; 0x3cba <Lcd_enuDrawSpecialChar+0x116>


		}
		else{

			Local_enuErrorState = ES_OUT_OF_RANGE;
    3cb0:	82 e0       	ldi	r24, 0x02	; 2
    3cb2:	8a 83       	std	Y+2, r24	; 0x02
    3cb4:	02 c0       	rjmp	.+4      	; 0x3cba <Lcd_enuDrawSpecialChar+0x116>
		}
	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    3cb6:	83 e0       	ldi	r24, 0x03	; 3
    3cb8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    3cba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cbc:	29 96       	adiw	r28, 0x09	; 9
    3cbe:	0f b6       	in	r0, 0x3f	; 63
    3cc0:	f8 94       	cli
    3cc2:	de bf       	out	0x3e, r29	; 62
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	cd bf       	out	0x3d, r28	; 61
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	0f 91       	pop	r16
    3cce:	ef 90       	pop	r14
    3cd0:	08 95       	ret

00003cd2 <Lcd_enuWriteIntegarNum>:

ES_t Lcd_enuWriteIntegarNum(s32 Copy_s32Num){
    3cd2:	df 93       	push	r29
    3cd4:	cf 93       	push	r28
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <Lcd_enuWriteIntegarNum+0x6>
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <Lcd_enuWriteIntegarNum+0x8>
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	69 83       	std	Y+1, r22	; 0x01
    3ce0:	7a 83       	std	Y+2, r23	; 0x02
    3ce2:	8b 83       	std	Y+3, r24	; 0x03
    3ce4:	9c 83       	std	Y+4, r25	; 0x04

	return enuDisplayNum(Copy_s32Num);
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cea:	ab 81       	ldd	r26, Y+3	; 0x03
    3cec:	bc 81       	ldd	r27, Y+4	; 0x04
    3cee:	bc 01       	movw	r22, r24
    3cf0:	cd 01       	movw	r24, r26
    3cf2:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <enuDisplayNum>
}
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	cf 91       	pop	r28
    3d00:	df 91       	pop	r29
    3d02:	08 95       	ret

00003d04 <Lcd_enuWriteFloatNum>:

ES_t Lcd_enuWriteFloatNum(f32 Copy_f32Num){
    3d04:	df 93       	push	r29
    3d06:	cf 93       	push	r28
    3d08:	cd b7       	in	r28, 0x3d	; 61
    3d0a:	de b7       	in	r29, 0x3e	; 62
    3d0c:	2b 97       	sbiw	r28, 0x0b	; 11
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	cd bf       	out	0x3d, r28	; 61
    3d18:	6f 83       	std	Y+7, r22	; 0x07
    3d1a:	78 87       	std	Y+8, r23	; 0x08
    3d1c:	89 87       	std	Y+9, r24	; 0x09
    3d1e:	9a 87       	std	Y+10, r25	; 0x0a

	ES_t Local_enuErrorState = ES_NOK;
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	8e 83       	std	Y+6, r24	; 0x06

	f32 Local_f32DecimalPart;
	Local_f32DecimalPart = Copy_f32Num - (s32)Copy_f32Num;
    3d24:	6f 81       	ldd	r22, Y+7	; 0x07
    3d26:	78 85       	ldd	r23, Y+8	; 0x08
    3d28:	89 85       	ldd	r24, Y+9	; 0x09
    3d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2c:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	bc 01       	movw	r22, r24
    3d36:	cd 01       	movw	r24, r26
    3d38:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    3d3c:	9b 01       	movw	r18, r22
    3d3e:	ac 01       	movw	r20, r24
    3d40:	6f 81       	ldd	r22, Y+7	; 0x07
    3d42:	78 85       	ldd	r23, Y+8	; 0x08
    3d44:	89 85       	ldd	r24, Y+9	; 0x09
    3d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d48:	0e 94 3b 03 	call	0x676	; 0x676 <__subsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	8a 83       	std	Y+2, r24	; 0x02
    3d52:	9b 83       	std	Y+3, r25	; 0x03
    3d54:	ac 83       	std	Y+4, r26	; 0x04
    3d56:	bd 83       	std	Y+5, r27	; 0x05
	enuDisplayNum((s32)Copy_f32Num);
    3d58:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5a:	78 85       	ldd	r23, Y+8	; 0x08
    3d5c:	89 85       	ldd	r24, Y+9	; 0x09
    3d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d60:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	bc 01       	movw	r22, r24
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <enuDisplayNum>

	if( LCD_LENGTH_OF_DECIMAL != 0){

		//Lcd_enuSendData('.');

		if( Local_f32DecimalPart == 0.0 ){
    3d70:	1b 86       	std	Y+11, r1	; 0x0b
    3d72:	6a 81       	ldd	r22, Y+2	; 0x02
    3d74:	7b 81       	ldd	r23, Y+3	; 0x03
    3d76:	8c 81       	ldd	r24, Y+4	; 0x04
    3d78:	9d 81       	ldd	r25, Y+5	; 0x05
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	50 e0       	ldi	r21, 0x00	; 0
    3d82:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__eqsf2>
    3d86:	88 23       	and	r24, r24
    3d88:	11 f4       	brne	.+4      	; 0x3d8e <Lcd_enuWriteFloatNum+0x8a>
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	8b 87       	std	Y+11, r24	; 0x0b
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d92:	89 27       	eor	r24, r25
    3d94:	88 23       	and	r24, r24
    3d96:	41 f1       	breq	.+80     	; 0x3de8 <Lcd_enuWriteFloatNum+0xe4>

			//enuDisplayNum(0);
		}
		else{
			Lcd_enuSendData('.');
    3d98:	8e e2       	ldi	r24, 0x2E	; 46
    3d9a:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

			u8 Copy_u8LengthOfDecimalPart = LCD_LENGTH_OF_DECIMAL;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	89 83       	std	Y+1, r24	; 0x01
    3da2:	13 c0       	rjmp	.+38     	; 0x3dca <Lcd_enuWriteFloatNum+0xc6>
			while(Copy_u8LengthOfDecimalPart != 0){

				/*if(Local_f32DecimalPart - (s32)Local_f32DecimalPart == 0.0){
					break;
				}*/
				Local_f32DecimalPart *= 10;
    3da4:	6a 81       	ldd	r22, Y+2	; 0x02
    3da6:	7b 81       	ldd	r23, Y+3	; 0x03
    3da8:	8c 81       	ldd	r24, Y+4	; 0x04
    3daa:	9d 81       	ldd	r25, Y+5	; 0x05
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	40 e2       	ldi	r20, 0x20	; 32
    3db2:	51 e4       	ldi	r21, 0x41	; 65
    3db4:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	8a 83       	std	Y+2, r24	; 0x02
    3dbe:	9b 83       	std	Y+3, r25	; 0x03
    3dc0:	ac 83       	std	Y+4, r26	; 0x04
    3dc2:	bd 83       	std	Y+5, r27	; 0x05
				//enuDisplayNum((u8)Local_f32DecimalPart);
				Copy_u8LengthOfDecimalPart--;
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	81 50       	subi	r24, 0x01	; 1
    3dc8:	89 83       	std	Y+1, r24	; 0x01
		else{
			Lcd_enuSendData('.');

			u8 Copy_u8LengthOfDecimalPart = LCD_LENGTH_OF_DECIMAL;

			while(Copy_u8LengthOfDecimalPart != 0){
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	88 23       	and	r24, r24
    3dce:	51 f7       	brne	.-44     	; 0x3da4 <Lcd_enuWriteFloatNum+0xa0>
				Local_f32DecimalPart *= 10;
				//enuDisplayNum((u8)Local_f32DecimalPart);
				Copy_u8LengthOfDecimalPart--;
			}

			enuDisplayNum( (s32)Local_f32DecimalPart );
    3dd0:	6a 81       	ldd	r22, Y+2	; 0x02
    3dd2:	7b 81       	ldd	r23, Y+3	; 0x03
    3dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd8:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	bc 01       	movw	r22, r24
    3de2:	cd 01       	movw	r24, r26
    3de4:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <enuDisplayNum>
	}
	else{

	}

	return Local_enuErrorState;
    3de8:	8e 81       	ldd	r24, Y+6	; 0x06

}
    3dea:	2b 96       	adiw	r28, 0x0b	; 11
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	de bf       	out	0x3e, r29	; 62
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	08 95       	ret

00003dfc <enuDisplayNum>:

static ES_t enuDisplayNum(s32 Copy_s32Num){
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	cd b7       	in	r28, 0x3d	; 61
    3e02:	de b7       	in	r29, 0x3e	; 62
    3e04:	a7 97       	sbiw	r28, 0x27	; 39
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	6c a3       	std	Y+36, r22	; 0x24
    3e12:	7d a3       	std	Y+37, r23	; 0x25
    3e14:	8e a3       	std	Y+38, r24	; 0x26
    3e16:	9f a3       	std	Y+39, r25	; 0x27

	ES_t Local_enuErrorState = ES_NOK;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	8a 83       	std	Y+2, r24	; 0x02

	char Local_acIntNumString[33] = {0};
    3e1c:	81 e2       	ldi	r24, 0x21	; 33
    3e1e:	fe 01       	movw	r30, r28
    3e20:	33 96       	adiw	r30, 0x03	; 3
    3e22:	df 01       	movw	r26, r30
    3e24:	98 2f       	mov	r25, r24
    3e26:	1d 92       	st	X+, r1
    3e28:	9a 95       	dec	r25
    3e2a:	e9 f7       	brne	.-6      	; 0x3e26 <enuDisplayNum+0x2a>
	u8 Local_u8ArrayIter = 0;
    3e2c:	19 82       	std	Y+1, r1	; 0x01
	Local_enuErrorState = enuIntToString(Copy_s32Num,Local_acIntNumString);
    3e2e:	8c a1       	ldd	r24, Y+36	; 0x24
    3e30:	9d a1       	ldd	r25, Y+37	; 0x25
    3e32:	ae a1       	ldd	r26, Y+38	; 0x26
    3e34:	bf a1       	ldd	r27, Y+39	; 0x27
    3e36:	9e 01       	movw	r18, r28
    3e38:	2d 5f       	subi	r18, 0xFD	; 253
    3e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	cd 01       	movw	r24, r26
    3e40:	a9 01       	movw	r20, r18
    3e42:	0e 94 56 1f 	call	0x3eac	; 0x3eac <enuIntToString>
    3e46:	8a 83       	std	Y+2, r24	; 0x02

	if( Local_enuErrorState == ES_OK ){
    3e48:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4a:	88 23       	and	r24, r24
    3e4c:	29 f5       	brne	.+74     	; 0x3e98 <enuDisplayNum+0x9c>
    3e4e:	19 c0       	rjmp	.+50     	; 0x3e82 <enuDisplayNum+0x86>

		while(Local_acIntNumString[Local_u8ArrayIter]){

			Local_enuErrorState = DIO_enuSetPinValue(LCD_RS_GRP,LCD_RS_PIN,DIO_HIGH);
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	61 e0       	ldi	r22, 0x01	; 1
    3e54:	41 e0       	ldi	r20, 0x01	; 1
    3e56:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    3e5a:	8a 83       	std	Y+2, r24	; 0x02

			if( Local_enuErrorState == ES_OK ){
    3e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5e:	88 23       	and	r24, r24
    3e60:	d9 f4       	brne	.+54     	; 0x3e98 <enuDisplayNum+0x9c>

				Local_enuErrorState = enuWriteNLatch(Local_acIntNumString[Local_u8ArrayIter++]);
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	28 2f       	mov	r18, r24
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	ce 01       	movw	r24, r28
    3e6a:	03 96       	adiw	r24, 0x03	; 3
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	e2 0f       	add	r30, r18
    3e70:	f3 1f       	adc	r31, r19
    3e72:	90 81       	ld	r25, Z
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	8f 5f       	subi	r24, 0xFF	; 255
    3e78:	89 83       	std	Y+1, r24	; 0x01
    3e7a:	89 2f       	mov	r24, r25
    3e7c:	0e 94 32 20 	call	0x4064	; 0x4064 <enuWriteNLatch>
    3e80:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ArrayIter = 0;
	Local_enuErrorState = enuIntToString(Copy_s32Num,Local_acIntNumString);

	if( Local_enuErrorState == ES_OK ){

		while(Local_acIntNumString[Local_u8ArrayIter]){
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	28 2f       	mov	r18, r24
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	ce 01       	movw	r24, r28
    3e8a:	03 96       	adiw	r24, 0x03	; 3
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	e2 0f       	add	r30, r18
    3e90:	f3 1f       	adc	r31, r19
    3e92:	80 81       	ld	r24, Z
    3e94:	88 23       	and	r24, r24
    3e96:	e1 f6       	brne	.-72     	; 0x3e50 <enuDisplayNum+0x54>
			}
		}

	}

	return Local_enuErrorState;
    3e98:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3e9a:	a7 96       	adiw	r28, 0x27	; 39
    3e9c:	0f b6       	in	r0, 0x3f	; 63
    3e9e:	f8 94       	cli
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	cd bf       	out	0x3d, r28	; 61
    3ea6:	cf 91       	pop	r28
    3ea8:	df 91       	pop	r29
    3eaa:	08 95       	ret

00003eac <enuIntToString>:

ES_t enuIntToString(s32 Copy_s32Num, char* Copy_pcIntNumString) {
    3eac:	0f 93       	push	r16
    3eae:	1f 93       	push	r17
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
    3eb8:	2c 97       	sbiw	r28, 0x0c	; 12
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	f8 94       	cli
    3ebe:	de bf       	out	0x3e, r29	; 62
    3ec0:	0f be       	out	0x3f, r0	; 63
    3ec2:	cd bf       	out	0x3d, r28	; 61
    3ec4:	6f 83       	std	Y+7, r22	; 0x07
    3ec6:	78 87       	std	Y+8, r23	; 0x08
    3ec8:	89 87       	std	Y+9, r24	; 0x09
    3eca:	9a 87       	std	Y+10, r25	; 0x0a
    3ecc:	5c 87       	std	Y+12, r21	; 0x0c
    3ece:	4b 87       	std	Y+11, r20	; 0x0b

	ES_t Local_enuErrorState = ES_NOK;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	8e 83       	std	Y+6, r24	; 0x06

	if(Copy_pcIntNumString != NULL){
    3ed4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ed6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ed8:	00 97       	sbiw	r24, 0x00	; 0
    3eda:	09 f4       	brne	.+2      	; 0x3ede <enuIntToString+0x32>
    3edc:	b5 c0       	rjmp	.+362    	; 0x4048 <enuIntToString+0x19c>

		u8 Local_u8ArrayIter = 0;
    3ede:	1d 82       	std	Y+5, r1	; 0x05
		u8 Local_u8IsNegative = 0;
    3ee0:	1c 82       	std	Y+4, r1	; 0x04

		// Handle negative numbers
		if (Copy_s32Num < 0) {
    3ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ee4:	98 85       	ldd	r25, Y+8	; 0x08
    3ee6:	a9 85       	ldd	r26, Y+9	; 0x09
    3ee8:	ba 85       	ldd	r27, Y+10	; 0x0a
    3eea:	bb 23       	and	r27, r27
    3eec:	8c f4       	brge	.+34     	; 0x3f10 <enuIntToString+0x64>

			Local_u8IsNegative = 1;
    3eee:	81 e0       	ldi	r24, 0x01	; 1
    3ef0:	8c 83       	std	Y+4, r24	; 0x04
			Copy_s32Num = -Copy_s32Num;
    3ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ef4:	98 85       	ldd	r25, Y+8	; 0x08
    3ef6:	a9 85       	ldd	r26, Y+9	; 0x09
    3ef8:	ba 85       	ldd	r27, Y+10	; 0x0a
    3efa:	b0 95       	com	r27
    3efc:	a0 95       	com	r26
    3efe:	90 95       	com	r25
    3f00:	81 95       	neg	r24
    3f02:	9f 4f       	sbci	r25, 0xFF	; 255
    3f04:	af 4f       	sbci	r26, 0xFF	; 255
    3f06:	bf 4f       	sbci	r27, 0xFF	; 255
    3f08:	8f 83       	std	Y+7, r24	; 0x07
    3f0a:	98 87       	std	Y+8, r25	; 0x08
    3f0c:	a9 87       	std	Y+9, r26	; 0x09
    3f0e:	ba 87       	std	Y+10, r27	; 0x0a

		}

		// Handle special case of 0
		if (Copy_s32Num == 0) {
    3f10:	8f 81       	ldd	r24, Y+7	; 0x07
    3f12:	98 85       	ldd	r25, Y+8	; 0x08
    3f14:	a9 85       	ldd	r26, Y+9	; 0x09
    3f16:	ba 85       	ldd	r27, Y+10	; 0x0a
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	a1 05       	cpc	r26, r1
    3f1c:	b1 05       	cpc	r27, r1
    3f1e:	e1 f5       	brne	.+120    	; 0x3f98 <enuIntToString+0xec>

			Copy_pcIntNumString[Local_u8ArrayIter++] = '0';
    3f20:	8d 81       	ldd	r24, Y+5	; 0x05
    3f22:	28 2f       	mov	r18, r24
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f28:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	e2 0f       	add	r30, r18
    3f2e:	f3 1f       	adc	r31, r19
    3f30:	80 e3       	ldi	r24, 0x30	; 48
    3f32:	80 83       	st	Z, r24
    3f34:	8d 81       	ldd	r24, Y+5	; 0x05
    3f36:	8f 5f       	subi	r24, 0xFF	; 255
    3f38:	8d 83       	std	Y+5, r24	; 0x05
    3f3a:	2e c0       	rjmp	.+92     	; 0x3f98 <enuIntToString+0xec>
		}

		// Process digits in reverse order
		while (Copy_s32Num != 0) {

			Copy_pcIntNumString[Local_u8ArrayIter++] = (char)(Copy_s32Num % 10 + '0');
    3f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3e:	28 2f       	mov	r18, r24
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f44:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f46:	8c 01       	movw	r16, r24
    3f48:	02 0f       	add	r16, r18
    3f4a:	13 1f       	adc	r17, r19
    3f4c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f4e:	98 85       	ldd	r25, Y+8	; 0x08
    3f50:	a9 85       	ldd	r26, Y+9	; 0x09
    3f52:	ba 85       	ldd	r27, Y+10	; 0x0a
    3f54:	2a e0       	ldi	r18, 0x0A	; 10
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e0       	ldi	r20, 0x00	; 0
    3f5a:	50 e0       	ldi	r21, 0x00	; 0
    3f5c:	bc 01       	movw	r22, r24
    3f5e:	cd 01       	movw	r24, r26
    3f60:	0e 94 2e 3b 	call	0x765c	; 0x765c <__divmodsi4>
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22
    3f68:	80 5d       	subi	r24, 0xD0	; 208
    3f6a:	f8 01       	movw	r30, r16
    3f6c:	80 83       	st	Z, r24
    3f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f70:	8f 5f       	subi	r24, 0xFF	; 255
    3f72:	8d 83       	std	Y+5, r24	; 0x05
			Copy_s32Num /= 10;
    3f74:	8f 81       	ldd	r24, Y+7	; 0x07
    3f76:	98 85       	ldd	r25, Y+8	; 0x08
    3f78:	a9 85       	ldd	r26, Y+9	; 0x09
    3f7a:	ba 85       	ldd	r27, Y+10	; 0x0a
    3f7c:	2a e0       	ldi	r18, 0x0A	; 10
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	50 e0       	ldi	r21, 0x00	; 0
    3f84:	bc 01       	movw	r22, r24
    3f86:	cd 01       	movw	r24, r26
    3f88:	0e 94 2e 3b 	call	0x765c	; 0x765c <__divmodsi4>
    3f8c:	da 01       	movw	r26, r20
    3f8e:	c9 01       	movw	r24, r18
    3f90:	8f 83       	std	Y+7, r24	; 0x07
    3f92:	98 87       	std	Y+8, r25	; 0x08
    3f94:	a9 87       	std	Y+9, r26	; 0x09
    3f96:	ba 87       	std	Y+10, r27	; 0x0a

			Copy_pcIntNumString[Local_u8ArrayIter++] = '0';
		}

		// Process digits in reverse order
		while (Copy_s32Num != 0) {
    3f98:	8f 81       	ldd	r24, Y+7	; 0x07
    3f9a:	98 85       	ldd	r25, Y+8	; 0x08
    3f9c:	a9 85       	ldd	r26, Y+9	; 0x09
    3f9e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3fa0:	00 97       	sbiw	r24, 0x00	; 0
    3fa2:	a1 05       	cpc	r26, r1
    3fa4:	b1 05       	cpc	r27, r1
    3fa6:	51 f6       	brne	.-108    	; 0x3f3c <enuIntToString+0x90>
			Copy_pcIntNumString[Local_u8ArrayIter++] = (char)(Copy_s32Num % 10 + '0');
			Copy_s32Num /= 10;
		}

		// Add negative sign if necessary
		if (Local_u8IsNegative) {
    3fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    3faa:	88 23       	and	r24, r24
    3fac:	69 f0       	breq	.+26     	; 0x3fc8 <enuIntToString+0x11c>
			Copy_pcIntNumString[Local_u8ArrayIter++] = '-';
    3fae:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb0:	28 2f       	mov	r18, r24
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fb8:	fc 01       	movw	r30, r24
    3fba:	e2 0f       	add	r30, r18
    3fbc:	f3 1f       	adc	r31, r19
    3fbe:	8d e2       	ldi	r24, 0x2D	; 45
    3fc0:	80 83       	st	Z, r24
    3fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc4:	8f 5f       	subi	r24, 0xFF	; 255
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
		}

		Copy_pcIntNumString[Local_u8ArrayIter] = '\0';
    3fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fca:	28 2f       	mov	r18, r24
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	e2 0f       	add	r30, r18
    3fd6:	f3 1f       	adc	r31, r19
    3fd8:	10 82       	st	Z, r1

		// Reverse the string
		u8 Local_u8ArrayStart = 0;
    3fda:	1b 82       	std	Y+3, r1	; 0x03
		u8 Local_u8ArrayEnd = Local_u8ArrayIter - 1;
    3fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fde:	81 50       	subi	r24, 0x01	; 1
    3fe0:	8a 83       	std	Y+2, r24	; 0x02
    3fe2:	2c c0       	rjmp	.+88     	; 0x403c <enuIntToString+0x190>

		while (Local_u8ArrayStart < Local_u8ArrayEnd) {

			char temp = Copy_pcIntNumString[Local_u8ArrayStart];
    3fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe6:	28 2f       	mov	r18, r24
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fec:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fee:	fc 01       	movw	r30, r24
    3ff0:	e2 0f       	add	r30, r18
    3ff2:	f3 1f       	adc	r31, r19
    3ff4:	80 81       	ld	r24, Z
    3ff6:	89 83       	std	Y+1, r24	; 0x01
		    Copy_pcIntNumString[Local_u8ArrayStart] = Copy_pcIntNumString[Local_u8ArrayEnd];
    3ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffa:	28 2f       	mov	r18, r24
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4000:	9c 85       	ldd	r25, Y+12	; 0x0c
    4002:	dc 01       	movw	r26, r24
    4004:	a2 0f       	add	r26, r18
    4006:	b3 1f       	adc	r27, r19
    4008:	8a 81       	ldd	r24, Y+2	; 0x02
    400a:	28 2f       	mov	r18, r24
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4010:	9c 85       	ldd	r25, Y+12	; 0x0c
    4012:	fc 01       	movw	r30, r24
    4014:	e2 0f       	add	r30, r18
    4016:	f3 1f       	adc	r31, r19
    4018:	80 81       	ld	r24, Z
    401a:	8c 93       	st	X, r24
		    Copy_pcIntNumString[Local_u8ArrayEnd] = temp;
    401c:	8a 81       	ldd	r24, Y+2	; 0x02
    401e:	28 2f       	mov	r18, r24
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	8b 85       	ldd	r24, Y+11	; 0x0b
    4024:	9c 85       	ldd	r25, Y+12	; 0x0c
    4026:	fc 01       	movw	r30, r24
    4028:	e2 0f       	add	r30, r18
    402a:	f3 1f       	adc	r31, r19
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	80 83       	st	Z, r24
		    Local_u8ArrayStart++;
    4030:	8b 81       	ldd	r24, Y+3	; 0x03
    4032:	8f 5f       	subi	r24, 0xFF	; 255
    4034:	8b 83       	std	Y+3, r24	; 0x03
		    Local_u8ArrayEnd--;
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	81 50       	subi	r24, 0x01	; 1
    403a:	8a 83       	std	Y+2, r24	; 0x02

		// Reverse the string
		u8 Local_u8ArrayStart = 0;
		u8 Local_u8ArrayEnd = Local_u8ArrayIter - 1;

		while (Local_u8ArrayStart < Local_u8ArrayEnd) {
    403c:	9b 81       	ldd	r25, Y+3	; 0x03
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	98 17       	cp	r25, r24
    4042:	80 f2       	brcs	.-96     	; 0x3fe4 <enuIntToString+0x138>
		    Copy_pcIntNumString[Local_u8ArrayEnd] = temp;
		    Local_u8ArrayStart++;
		    Local_u8ArrayEnd--;
		}

		Local_enuErrorState = ES_OK;
    4044:	1e 82       	std	Y+6, r1	; 0x06
    4046:	02 c0       	rjmp	.+4      	; 0x404c <enuIntToString+0x1a0>

	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    4048:	83 e0       	ldi	r24, 0x03	; 3
    404a:	8e 83       	std	Y+6, r24	; 0x06
	}

	return Local_enuErrorState;
    404c:	8e 81       	ldd	r24, Y+6	; 0x06

}
    404e:	2c 96       	adiw	r28, 0x0c	; 12
    4050:	0f b6       	in	r0, 0x3f	; 63
    4052:	f8 94       	cli
    4054:	de bf       	out	0x3e, r29	; 62
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	cf 91       	pop	r28
    405c:	df 91       	pop	r29
    405e:	1f 91       	pop	r17
    4060:	0f 91       	pop	r16
    4062:	08 95       	ret

00004064 <enuWriteNLatch>:



ES_t enuWriteNLatch(u8 Copy_u8Byte){
    4064:	df 93       	push	r29
    4066:	cf 93       	push	r28
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
    406c:	e6 97       	sbiw	r28, 0x36	; 54
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	f8 94       	cli
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	cd bf       	out	0x3d, r28	; 61
    4078:	8e ab       	std	Y+54, r24	; 0x36

	ES_t Local_enuErrorState = ES_NOK;
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	8b a7       	std	Y+43, r24	; 0x2b

	ES_t Local_aenuErrorState[LCD_WRITENLATCH_ERROR_STATE_COND] = {0};
    407e:	8a e0       	ldi	r24, 0x0A	; 10
    4080:	fe 01       	movw	r30, r28
    4082:	bc 96       	adiw	r30, 0x2c	; 44
    4084:	df 01       	movw	r26, r30
    4086:	98 2f       	mov	r25, r24
    4088:	1d 92       	st	X+, r1
    408a:	9a 95       	dec	r25
    408c:	e9 f7       	brne	.-6      	; 0x4088 <enuWriteNLatch+0x24>

	Local_aenuErrorState[0] = DIO_enuSetPinValue(LCD_RW_GRP,LCD_RW_PIN,DIO_LOW);
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	62 e0       	ldi	r22, 0x02	; 2
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4098:	8c a7       	std	Y+44, r24	; 0x2c
	Local_aenuErrorState[1] = DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_LOW);
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	63 e0       	ldi	r22, 0x03	; 3
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    40a4:	8d a7       	std	Y+45, r24	; 0x2d

	    _delay_ms(2);

    #elif LCD_MODE == FOUR_BIT

	      DIO_enuSetPinValue(LCD_D7_GRP,LCD_D7_PIN,((Copy_u8Byte>>LCD_BYTE_7)&LCD_BIT_MASK));
    40a6:	8e a9       	ldd	r24, Y+54	; 0x36
    40a8:	98 2f       	mov	r25, r24
    40aa:	99 1f       	adc	r25, r25
    40ac:	99 27       	eor	r25, r25
    40ae:	99 1f       	adc	r25, r25
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	67 e0       	ldi	r22, 0x07	; 7
    40b4:	49 2f       	mov	r20, r25
    40b6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	      DIO_enuSetPinValue(LCD_D6_GRP,LCD_D6_PIN,((Copy_u8Byte>>LCD_BYTE_6)&LCD_BIT_MASK));
    40ba:	8e a9       	ldd	r24, Y+54	; 0x36
    40bc:	82 95       	swap	r24
    40be:	86 95       	lsr	r24
    40c0:	86 95       	lsr	r24
    40c2:	83 70       	andi	r24, 0x03	; 3
    40c4:	98 2f       	mov	r25, r24
    40c6:	91 70       	andi	r25, 0x01	; 1
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	66 e0       	ldi	r22, 0x06	; 6
    40cc:	49 2f       	mov	r20, r25
    40ce:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	      DIO_enuSetPinValue(LCD_D5_GRP,LCD_D5_PIN,((Copy_u8Byte>>LCD_BYTE_5)&LCD_BIT_MASK));
    40d2:	8e a9       	ldd	r24, Y+54	; 0x36
    40d4:	82 95       	swap	r24
    40d6:	86 95       	lsr	r24
    40d8:	87 70       	andi	r24, 0x07	; 7
    40da:	98 2f       	mov	r25, r24
    40dc:	91 70       	andi	r25, 0x01	; 1
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	65 e0       	ldi	r22, 0x05	; 5
    40e2:	49 2f       	mov	r20, r25
    40e4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	      DIO_enuSetPinValue(LCD_D4_GRP,LCD_D4_PIN,((Copy_u8Byte>>LCD_BYTE_4)&LCD_BIT_MASK));
    40e8:	8e a9       	ldd	r24, Y+54	; 0x36
    40ea:	82 95       	swap	r24
    40ec:	8f 70       	andi	r24, 0x0F	; 15
    40ee:	98 2f       	mov	r25, r24
    40f0:	91 70       	andi	r25, 0x01	; 1
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	64 e0       	ldi	r22, 0x04	; 4
    40f6:	49 2f       	mov	r20, r25
    40f8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

	      DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_HIGH);
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	63 e0       	ldi	r22, 0x03	; 3
    4100:	41 e0       	ldi	r20, 0x01	; 1
    4102:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	a0 e8       	ldi	r26, 0x80	; 128
    410c:	bf e3       	ldi	r27, 0x3F	; 63
    410e:	8f a3       	std	Y+39, r24	; 0x27
    4110:	98 a7       	std	Y+40, r25	; 0x28
    4112:	a9 a7       	std	Y+41, r26	; 0x29
    4114:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4116:	6f a1       	ldd	r22, Y+39	; 0x27
    4118:	78 a5       	ldd	r23, Y+40	; 0x28
    411a:	89 a5       	ldd	r24, Y+41	; 0x29
    411c:	9a a5       	ldd	r25, Y+42	; 0x2a
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	4a e7       	ldi	r20, 0x7A	; 122
    4124:	55 e4       	ldi	r21, 0x45	; 69
    4126:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	8b a3       	std	Y+35, r24	; 0x23
    4130:	9c a3       	std	Y+36, r25	; 0x24
    4132:	ad a3       	std	Y+37, r26	; 0x25
    4134:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4136:	6b a1       	ldd	r22, Y+35	; 0x23
    4138:	7c a1       	ldd	r23, Y+36	; 0x24
    413a:	8d a1       	ldd	r24, Y+37	; 0x25
    413c:	9e a1       	ldd	r25, Y+38	; 0x26
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	40 e8       	ldi	r20, 0x80	; 128
    4144:	5f e3       	ldi	r21, 0x3F	; 63
    4146:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    414a:	88 23       	and	r24, r24
    414c:	2c f4       	brge	.+10     	; 0x4158 <enuWriteNLatch+0xf4>
		__ticks = 1;
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	9a a3       	std	Y+34, r25	; 0x22
    4154:	89 a3       	std	Y+33, r24	; 0x21
    4156:	3f c0       	rjmp	.+126    	; 0x41d6 <enuWriteNLatch+0x172>
	else if (__tmp > 65535)
    4158:	6b a1       	ldd	r22, Y+35	; 0x23
    415a:	7c a1       	ldd	r23, Y+36	; 0x24
    415c:	8d a1       	ldd	r24, Y+37	; 0x25
    415e:	9e a1       	ldd	r25, Y+38	; 0x26
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	3f ef       	ldi	r19, 0xFF	; 255
    4164:	4f e7       	ldi	r20, 0x7F	; 127
    4166:	57 e4       	ldi	r21, 0x47	; 71
    4168:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    416c:	18 16       	cp	r1, r24
    416e:	4c f5       	brge	.+82     	; 0x41c2 <enuWriteNLatch+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4170:	6f a1       	ldd	r22, Y+39	; 0x27
    4172:	78 a5       	ldd	r23, Y+40	; 0x28
    4174:	89 a5       	ldd	r24, Y+41	; 0x29
    4176:	9a a5       	ldd	r25, Y+42	; 0x2a
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	40 e2       	ldi	r20, 0x20	; 32
    417e:	51 e4       	ldi	r21, 0x41	; 65
    4180:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	bc 01       	movw	r22, r24
    418a:	cd 01       	movw	r24, r26
    418c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	9a a3       	std	Y+34, r25	; 0x22
    4196:	89 a3       	std	Y+33, r24	; 0x21
    4198:	0f c0       	rjmp	.+30     	; 0x41b8 <enuWriteNLatch+0x154>
    419a:	80 e9       	ldi	r24, 0x90	; 144
    419c:	91 e0       	ldi	r25, 0x01	; 1
    419e:	98 a3       	std	Y+32, r25	; 0x20
    41a0:	8f 8f       	std	Y+31, r24	; 0x1f
    41a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41a4:	98 a1       	ldd	r25, Y+32	; 0x20
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	f1 f7       	brne	.-4      	; 0x41a6 <enuWriteNLatch+0x142>
    41aa:	98 a3       	std	Y+32, r25	; 0x20
    41ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ae:	89 a1       	ldd	r24, Y+33	; 0x21
    41b0:	9a a1       	ldd	r25, Y+34	; 0x22
    41b2:	01 97       	sbiw	r24, 0x01	; 1
    41b4:	9a a3       	std	Y+34, r25	; 0x22
    41b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b8:	89 a1       	ldd	r24, Y+33	; 0x21
    41ba:	9a a1       	ldd	r25, Y+34	; 0x22
    41bc:	00 97       	sbiw	r24, 0x00	; 0
    41be:	69 f7       	brne	.-38     	; 0x419a <enuWriteNLatch+0x136>
    41c0:	14 c0       	rjmp	.+40     	; 0x41ea <enuWriteNLatch+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c2:	6b a1       	ldd	r22, Y+35	; 0x23
    41c4:	7c a1       	ldd	r23, Y+36	; 0x24
    41c6:	8d a1       	ldd	r24, Y+37	; 0x25
    41c8:	9e a1       	ldd	r25, Y+38	; 0x26
    41ca:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	9a a3       	std	Y+34, r25	; 0x22
    41d4:	89 a3       	std	Y+33, r24	; 0x21
    41d6:	89 a1       	ldd	r24, Y+33	; 0x21
    41d8:	9a a1       	ldd	r25, Y+34	; 0x22
    41da:	9e 8f       	std	Y+30, r25	; 0x1e
    41dc:	8d 8f       	std	Y+29, r24	; 0x1d
    41de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41e2:	01 97       	sbiw	r24, 0x01	; 1
    41e4:	f1 f7       	brne	.-4      	; 0x41e2 <enuWriteNLatch+0x17e>
    41e6:	9e 8f       	std	Y+30, r25	; 0x1e
    41e8:	8d 8f       	std	Y+29, r24	; 0x1d
	      _delay_ms(1);
	      DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_LOW);
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	63 e0       	ldi	r22, 0x03	; 3
    41ee:	40 e0       	ldi	r20, 0x00	; 0
    41f0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

	      DIO_enuSetPinValue(LCD_D7_GRP,LCD_D7_PIN,((Copy_u8Byte>>LCD_BYTE_3)&LCD_BIT_MASK));
    41f4:	8e a9       	ldd	r24, Y+54	; 0x36
    41f6:	86 95       	lsr	r24
    41f8:	86 95       	lsr	r24
    41fa:	86 95       	lsr	r24
    41fc:	98 2f       	mov	r25, r24
    41fe:	91 70       	andi	r25, 0x01	; 1
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	67 e0       	ldi	r22, 0x07	; 7
    4204:	49 2f       	mov	r20, r25
    4206:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	      DIO_enuSetPinValue(LCD_D6_GRP,LCD_D6_PIN,((Copy_u8Byte>>LCD_BYTE_2)&LCD_BIT_MASK));
    420a:	8e a9       	ldd	r24, Y+54	; 0x36
    420c:	86 95       	lsr	r24
    420e:	86 95       	lsr	r24
    4210:	98 2f       	mov	r25, r24
    4212:	91 70       	andi	r25, 0x01	; 1
    4214:	80 e0       	ldi	r24, 0x00	; 0
    4216:	66 e0       	ldi	r22, 0x06	; 6
    4218:	49 2f       	mov	r20, r25
    421a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	      DIO_enuSetPinValue(LCD_D5_GRP,LCD_D5_PIN,((Copy_u8Byte>>LCD_BYTE_1)&LCD_BIT_MASK));
    421e:	8e a9       	ldd	r24, Y+54	; 0x36
    4220:	86 95       	lsr	r24
    4222:	98 2f       	mov	r25, r24
    4224:	91 70       	andi	r25, 0x01	; 1
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	65 e0       	ldi	r22, 0x05	; 5
    422a:	49 2f       	mov	r20, r25
    422c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
	      DIO_enuSetPinValue(LCD_D4_GRP,LCD_D4_PIN,((Copy_u8Byte>>LCD_BYTE_0)&LCD_BIT_MASK));
    4230:	8e a9       	ldd	r24, Y+54	; 0x36
    4232:	98 2f       	mov	r25, r24
    4234:	91 70       	andi	r25, 0x01	; 1
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	64 e0       	ldi	r22, 0x04	; 4
    423a:	49 2f       	mov	r20, r25
    423c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

	      DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_HIGH);
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	63 e0       	ldi	r22, 0x03	; 3
    4244:	41 e0       	ldi	r20, 0x01	; 1
    4246:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	a0 e8       	ldi	r26, 0x80	; 128
    4250:	bf e3       	ldi	r27, 0x3F	; 63
    4252:	89 8f       	std	Y+25, r24	; 0x19
    4254:	9a 8f       	std	Y+26, r25	; 0x1a
    4256:	ab 8f       	std	Y+27, r26	; 0x1b
    4258:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    425a:	69 8d       	ldd	r22, Y+25	; 0x19
    425c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    425e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	4a e7       	ldi	r20, 0x7A	; 122
    4268:	55 e4       	ldi	r21, 0x45	; 69
    426a:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	8d 8b       	std	Y+21, r24	; 0x15
    4274:	9e 8b       	std	Y+22, r25	; 0x16
    4276:	af 8b       	std	Y+23, r26	; 0x17
    4278:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    427a:	6d 89       	ldd	r22, Y+21	; 0x15
    427c:	7e 89       	ldd	r23, Y+22	; 0x16
    427e:	8f 89       	ldd	r24, Y+23	; 0x17
    4280:	98 8d       	ldd	r25, Y+24	; 0x18
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	40 e8       	ldi	r20, 0x80	; 128
    4288:	5f e3       	ldi	r21, 0x3F	; 63
    428a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    428e:	88 23       	and	r24, r24
    4290:	2c f4       	brge	.+10     	; 0x429c <enuWriteNLatch+0x238>
		__ticks = 1;
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	9c 8b       	std	Y+20, r25	; 0x14
    4298:	8b 8b       	std	Y+19, r24	; 0x13
    429a:	3f c0       	rjmp	.+126    	; 0x431a <enuWriteNLatch+0x2b6>
	else if (__tmp > 65535)
    429c:	6d 89       	ldd	r22, Y+21	; 0x15
    429e:	7e 89       	ldd	r23, Y+22	; 0x16
    42a0:	8f 89       	ldd	r24, Y+23	; 0x17
    42a2:	98 8d       	ldd	r25, Y+24	; 0x18
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	3f ef       	ldi	r19, 0xFF	; 255
    42a8:	4f e7       	ldi	r20, 0x7F	; 127
    42aa:	57 e4       	ldi	r21, 0x47	; 71
    42ac:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    42b0:	18 16       	cp	r1, r24
    42b2:	4c f5       	brge	.+82     	; 0x4306 <enuWriteNLatch+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42b4:	69 8d       	ldd	r22, Y+25	; 0x19
    42b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	40 e2       	ldi	r20, 0x20	; 32
    42c2:	51 e4       	ldi	r21, 0x41	; 65
    42c4:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	bc 01       	movw	r22, r24
    42ce:	cd 01       	movw	r24, r26
    42d0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	9c 8b       	std	Y+20, r25	; 0x14
    42da:	8b 8b       	std	Y+19, r24	; 0x13
    42dc:	0f c0       	rjmp	.+30     	; 0x42fc <enuWriteNLatch+0x298>
    42de:	80 e9       	ldi	r24, 0x90	; 144
    42e0:	91 e0       	ldi	r25, 0x01	; 1
    42e2:	9a 8b       	std	Y+18, r25	; 0x12
    42e4:	89 8b       	std	Y+17, r24	; 0x11
    42e6:	89 89       	ldd	r24, Y+17	; 0x11
    42e8:	9a 89       	ldd	r25, Y+18	; 0x12
    42ea:	01 97       	sbiw	r24, 0x01	; 1
    42ec:	f1 f7       	brne	.-4      	; 0x42ea <enuWriteNLatch+0x286>
    42ee:	9a 8b       	std	Y+18, r25	; 0x12
    42f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f2:	8b 89       	ldd	r24, Y+19	; 0x13
    42f4:	9c 89       	ldd	r25, Y+20	; 0x14
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	9c 8b       	std	Y+20, r25	; 0x14
    42fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42fc:	8b 89       	ldd	r24, Y+19	; 0x13
    42fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4300:	00 97       	sbiw	r24, 0x00	; 0
    4302:	69 f7       	brne	.-38     	; 0x42de <enuWriteNLatch+0x27a>
    4304:	14 c0       	rjmp	.+40     	; 0x432e <enuWriteNLatch+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4306:	6d 89       	ldd	r22, Y+21	; 0x15
    4308:	7e 89       	ldd	r23, Y+22	; 0x16
    430a:	8f 89       	ldd	r24, Y+23	; 0x17
    430c:	98 8d       	ldd	r25, Y+24	; 0x18
    430e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	9c 8b       	std	Y+20, r25	; 0x14
    4318:	8b 8b       	std	Y+19, r24	; 0x13
    431a:	8b 89       	ldd	r24, Y+19	; 0x13
    431c:	9c 89       	ldd	r25, Y+20	; 0x14
    431e:	98 8b       	std	Y+16, r25	; 0x10
    4320:	8f 87       	std	Y+15, r24	; 0x0f
    4322:	8f 85       	ldd	r24, Y+15	; 0x0f
    4324:	98 89       	ldd	r25, Y+16	; 0x10
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	f1 f7       	brne	.-4      	; 0x4326 <enuWriteNLatch+0x2c2>
    432a:	98 8b       	std	Y+16, r25	; 0x10
    432c:	8f 87       	std	Y+15, r24	; 0x0f
	      _delay_ms(1);
	      DIO_enuSetPinValue(LCD_EN_GRP,LCD_EN_PIN,DIO_LOW);
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	63 e0       	ldi	r22, 0x03	; 3
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	a0 e0       	ldi	r26, 0x00	; 0
    433e:	b0 e4       	ldi	r27, 0x40	; 64
    4340:	8b 87       	std	Y+11, r24	; 0x0b
    4342:	9c 87       	std	Y+12, r25	; 0x0c
    4344:	ad 87       	std	Y+13, r26	; 0x0d
    4346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4348:	6b 85       	ldd	r22, Y+11	; 0x0b
    434a:	7c 85       	ldd	r23, Y+12	; 0x0c
    434c:	8d 85       	ldd	r24, Y+13	; 0x0d
    434e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	4a e7       	ldi	r20, 0x7A	; 122
    4356:	55 e4       	ldi	r21, 0x45	; 69
    4358:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	8f 83       	std	Y+7, r24	; 0x07
    4362:	98 87       	std	Y+8, r25	; 0x08
    4364:	a9 87       	std	Y+9, r26	; 0x09
    4366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4368:	6f 81       	ldd	r22, Y+7	; 0x07
    436a:	78 85       	ldd	r23, Y+8	; 0x08
    436c:	89 85       	ldd	r24, Y+9	; 0x09
    436e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e8       	ldi	r20, 0x80	; 128
    4376:	5f e3       	ldi	r21, 0x3F	; 63
    4378:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    437c:	88 23       	and	r24, r24
    437e:	2c f4       	brge	.+10     	; 0x438a <enuWriteNLatch+0x326>
		__ticks = 1;
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	9e 83       	std	Y+6, r25	; 0x06
    4386:	8d 83       	std	Y+5, r24	; 0x05
    4388:	3f c0       	rjmp	.+126    	; 0x4408 <enuWriteNLatch+0x3a4>
	else if (__tmp > 65535)
    438a:	6f 81       	ldd	r22, Y+7	; 0x07
    438c:	78 85       	ldd	r23, Y+8	; 0x08
    438e:	89 85       	ldd	r24, Y+9	; 0x09
    4390:	9a 85       	ldd	r25, Y+10	; 0x0a
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	3f ef       	ldi	r19, 0xFF	; 255
    4396:	4f e7       	ldi	r20, 0x7F	; 127
    4398:	57 e4       	ldi	r21, 0x47	; 71
    439a:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    439e:	18 16       	cp	r1, r24
    43a0:	4c f5       	brge	.+82     	; 0x43f4 <enuWriteNLatch+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	40 e2       	ldi	r20, 0x20	; 32
    43b0:	51 e4       	ldi	r21, 0x41	; 65
    43b2:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	bc 01       	movw	r22, r24
    43bc:	cd 01       	movw	r24, r26
    43be:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	9e 83       	std	Y+6, r25	; 0x06
    43c8:	8d 83       	std	Y+5, r24	; 0x05
    43ca:	0f c0       	rjmp	.+30     	; 0x43ea <enuWriteNLatch+0x386>
    43cc:	80 e9       	ldi	r24, 0x90	; 144
    43ce:	91 e0       	ldi	r25, 0x01	; 1
    43d0:	9c 83       	std	Y+4, r25	; 0x04
    43d2:	8b 83       	std	Y+3, r24	; 0x03
    43d4:	8b 81       	ldd	r24, Y+3	; 0x03
    43d6:	9c 81       	ldd	r25, Y+4	; 0x04
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	f1 f7       	brne	.-4      	; 0x43d8 <enuWriteNLatch+0x374>
    43dc:	9c 83       	std	Y+4, r25	; 0x04
    43de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e0:	8d 81       	ldd	r24, Y+5	; 0x05
    43e2:	9e 81       	ldd	r25, Y+6	; 0x06
    43e4:	01 97       	sbiw	r24, 0x01	; 1
    43e6:	9e 83       	std	Y+6, r25	; 0x06
    43e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ea:	8d 81       	ldd	r24, Y+5	; 0x05
    43ec:	9e 81       	ldd	r25, Y+6	; 0x06
    43ee:	00 97       	sbiw	r24, 0x00	; 0
    43f0:	69 f7       	brne	.-38     	; 0x43cc <enuWriteNLatch+0x368>
    43f2:	14 c0       	rjmp	.+40     	; 0x441c <enuWriteNLatch+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f4:	6f 81       	ldd	r22, Y+7	; 0x07
    43f6:	78 85       	ldd	r23, Y+8	; 0x08
    43f8:	89 85       	ldd	r24, Y+9	; 0x09
    43fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    43fc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	9e 83       	std	Y+6, r25	; 0x06
    4406:	8d 83       	std	Y+5, r24	; 0x05
    4408:	8d 81       	ldd	r24, Y+5	; 0x05
    440a:	9e 81       	ldd	r25, Y+6	; 0x06
    440c:	9a 83       	std	Y+2, r25	; 0x02
    440e:	89 83       	std	Y+1, r24	; 0x01
    4410:	89 81       	ldd	r24, Y+1	; 0x01
    4412:	9a 81       	ldd	r25, Y+2	; 0x02
    4414:	01 97       	sbiw	r24, 0x01	; 1
    4416:	f1 f7       	brne	.-4      	; 0x4414 <enuWriteNLatch+0x3b0>
    4418:	9a 83       	std	Y+2, r25	; 0x02
    441a:	89 83       	std	Y+1, r24	; 0x01
    #else
	    #error LCD Mode MUST BE EIGHT_BIT OR FOUR_BIT

    #endif

	return Local_enuErrorState;
    441c:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    441e:	e6 96       	adiw	r28, 0x36	; 54
    4420:	0f b6       	in	r0, 0x3f	; 63
    4422:	f8 94       	cli
    4424:	de bf       	out	0x3e, r29	; 62
    4426:	0f be       	out	0x3f, r0	; 63
    4428:	cd bf       	out	0x3d, r28	; 61
    442a:	cf 91       	pop	r28
    442c:	df 91       	pop	r29
    442e:	08 95       	ret

00004430 <Keypad_enuInit>:
#else
    #error keypad col & row is not valid 
#endif

ES_t Keypad_enuInit(void)
{
    4430:	df 93       	push	r29
    4432:	cf 93       	push	r28
    4434:	cd b7       	in	r28, 0x3d	; 61
    4436:	de b7       	in	r29, 0x3e	; 62
    4438:	62 97       	sbiw	r28, 0x12	; 18
    443a:	0f b6       	in	r0, 0x3f	; 63
    443c:	f8 94       	cli
    443e:	de bf       	out	0x3e, r29	; 62
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	cd bf       	out	0x3d, r28	; 61
	u8 Local_enuErrorState = ES_NOK;
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_au8RowGrp [4] = {R1_GRP,R2_GRP,R3_GRP,R4_GRP};
    4448:	82 e0       	ldi	r24, 0x02	; 2
    444a:	8b 83       	std	Y+3, r24	; 0x03
    444c:	82 e0       	ldi	r24, 0x02	; 2
    444e:	8c 83       	std	Y+4, r24	; 0x04
    4450:	82 e0       	ldi	r24, 0x02	; 2
    4452:	8d 83       	std	Y+5, r24	; 0x05
    4454:	82 e0       	ldi	r24, 0x02	; 2
    4456:	8e 83       	std	Y+6, r24	; 0x06
    u8 Local_au8RowPin [4] = {R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    4458:	82 e0       	ldi	r24, 0x02	; 2
    445a:	8f 83       	std	Y+7, r24	; 0x07
    445c:	83 e0       	ldi	r24, 0x03	; 3
    445e:	88 87       	std	Y+8, r24	; 0x08
    4460:	84 e0       	ldi	r24, 0x04	; 4
    4462:	89 87       	std	Y+9, r24	; 0x09
    4464:	85 e0       	ldi	r24, 0x05	; 5
    4466:	8a 87       	std	Y+10, r24	; 0x0a

    u8 Local_au8ColGrp [4] = {C1_GRP,C2_GRP,C3_GRP,C4_GRP};
    4468:	83 e0       	ldi	r24, 0x03	; 3
    446a:	8b 87       	std	Y+11, r24	; 0x0b
    446c:	83 e0       	ldi	r24, 0x03	; 3
    446e:	8c 87       	std	Y+12, r24	; 0x0c
    4470:	83 e0       	ldi	r24, 0x03	; 3
    4472:	8d 87       	std	Y+13, r24	; 0x0d
    4474:	83 e0       	ldi	r24, 0x03	; 3
    4476:	8e 87       	std	Y+14, r24	; 0x0e
    u8 Local_au8ColPin [4] = {C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	8f 87       	std	Y+15, r24	; 0x0f
    447c:	83 e0       	ldi	r24, 0x03	; 3
    447e:	88 8b       	std	Y+16, r24	; 0x10
    4480:	82 e0       	ldi	r24, 0x02	; 2
    4482:	89 8b       	std	Y+17, r24	; 0x11
    4484:	87 e0       	ldi	r24, 0x07	; 7
    4486:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8Iter =0;
    4488:	19 82       	std	Y+1, r1	; 0x01

    for (Local_u8Iter = 0 ; Local_u8Iter <KEYPAD_ROW_NUM ; Local_u8Iter ++)
    448a:	19 82       	std	Y+1, r1	; 0x01
    448c:	31 c0       	rjmp	.+98     	; 0x44f0 <Keypad_enuInit+0xc0>
    {
        DIO_enuSetPinDirection(Local_au8RowGrp[Local_u8Iter], Local_au8RowPin[Local_u8Iter] , DIO_INPUT);
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	28 2f       	mov	r18, r24
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	ce 01       	movw	r24, r28
    4496:	03 96       	adiw	r24, 0x03	; 3
    4498:	fc 01       	movw	r30, r24
    449a:	e2 0f       	add	r30, r18
    449c:	f3 1f       	adc	r31, r19
    449e:	40 81       	ld	r20, Z
    44a0:	89 81       	ldd	r24, Y+1	; 0x01
    44a2:	28 2f       	mov	r18, r24
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	ce 01       	movw	r24, r28
    44a8:	07 96       	adiw	r24, 0x07	; 7
    44aa:	fc 01       	movw	r30, r24
    44ac:	e2 0f       	add	r30, r18
    44ae:	f3 1f       	adc	r31, r19
    44b0:	90 81       	ld	r25, Z
    44b2:	84 2f       	mov	r24, r20
    44b4:	69 2f       	mov	r22, r25
    44b6:	40 e0       	ldi	r20, 0x00	; 0
    44b8:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
        DIO_enuSetPinValue(Local_au8RowGrp[Local_u8Iter], Local_au8RowPin[Local_u8Iter] , DIO_PULL_UP);
    44bc:	89 81       	ldd	r24, Y+1	; 0x01
    44be:	28 2f       	mov	r18, r24
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	ce 01       	movw	r24, r28
    44c4:	03 96       	adiw	r24, 0x03	; 3
    44c6:	fc 01       	movw	r30, r24
    44c8:	e2 0f       	add	r30, r18
    44ca:	f3 1f       	adc	r31, r19
    44cc:	40 81       	ld	r20, Z
    44ce:	89 81       	ldd	r24, Y+1	; 0x01
    44d0:	28 2f       	mov	r18, r24
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	ce 01       	movw	r24, r28
    44d6:	07 96       	adiw	r24, 0x07	; 7
    44d8:	fc 01       	movw	r30, r24
    44da:	e2 0f       	add	r30, r18
    44dc:	f3 1f       	adc	r31, r19
    44de:	90 81       	ld	r25, Z
    44e0:	84 2f       	mov	r24, r20
    44e2:	69 2f       	mov	r22, r25
    44e4:	41 e0       	ldi	r20, 0x01	; 1
    44e6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

    u8 Local_au8ColGrp [4] = {C1_GRP,C2_GRP,C3_GRP,C4_GRP};
    u8 Local_au8ColPin [4] = {C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    u8 Local_u8Iter =0;

    for (Local_u8Iter = 0 ; Local_u8Iter <KEYPAD_ROW_NUM ; Local_u8Iter ++)
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
    44ec:	8f 5f       	subi	r24, 0xFF	; 255
    44ee:	89 83       	std	Y+1, r24	; 0x01
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	84 30       	cpi	r24, 0x04	; 4
    44f4:	60 f2       	brcs	.-104    	; 0x448e <Keypad_enuInit+0x5e>
    {
        DIO_enuSetPinDirection(Local_au8RowGrp[Local_u8Iter], Local_au8RowPin[Local_u8Iter] , DIO_INPUT);
        DIO_enuSetPinValue(Local_au8RowGrp[Local_u8Iter], Local_au8RowPin[Local_u8Iter] , DIO_PULL_UP);
    }
    
    for (Local_u8Iter = 0 ; Local_u8Iter <KEYPAD_ROW_NUM ; Local_u8Iter ++)
    44f6:	19 82       	std	Y+1, r1	; 0x01
    44f8:	31 c0       	rjmp	.+98     	; 0x455c <Keypad_enuInit+0x12c>
    {
        DIO_enuSetPinDirection(Local_au8ColGrp[Local_u8Iter], Local_au8ColPin[Local_u8Iter] , DIO_OUTPUT);
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	28 2f       	mov	r18, r24
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	ce 01       	movw	r24, r28
    4502:	0b 96       	adiw	r24, 0x0b	; 11
    4504:	fc 01       	movw	r30, r24
    4506:	e2 0f       	add	r30, r18
    4508:	f3 1f       	adc	r31, r19
    450a:	40 81       	ld	r20, Z
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	28 2f       	mov	r18, r24
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	ce 01       	movw	r24, r28
    4514:	0f 96       	adiw	r24, 0x0f	; 15
    4516:	fc 01       	movw	r30, r24
    4518:	e2 0f       	add	r30, r18
    451a:	f3 1f       	adc	r31, r19
    451c:	90 81       	ld	r25, Z
    451e:	84 2f       	mov	r24, r20
    4520:	69 2f       	mov	r22, r25
    4522:	41 e0       	ldi	r20, 0x01	; 1
    4524:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
        DIO_enuSetPinValue(Local_au8ColGrp[Local_u8Iter], Local_au8ColPin[Local_u8Iter] , DIO_HIGH);
    4528:	89 81       	ldd	r24, Y+1	; 0x01
    452a:	28 2f       	mov	r18, r24
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	ce 01       	movw	r24, r28
    4530:	0b 96       	adiw	r24, 0x0b	; 11
    4532:	fc 01       	movw	r30, r24
    4534:	e2 0f       	add	r30, r18
    4536:	f3 1f       	adc	r31, r19
    4538:	40 81       	ld	r20, Z
    453a:	89 81       	ldd	r24, Y+1	; 0x01
    453c:	28 2f       	mov	r18, r24
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	ce 01       	movw	r24, r28
    4542:	0f 96       	adiw	r24, 0x0f	; 15
    4544:	fc 01       	movw	r30, r24
    4546:	e2 0f       	add	r30, r18
    4548:	f3 1f       	adc	r31, r19
    454a:	90 81       	ld	r25, Z
    454c:	84 2f       	mov	r24, r20
    454e:	69 2f       	mov	r22, r25
    4550:	41 e0       	ldi	r20, 0x01	; 1
    4552:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    {
        DIO_enuSetPinDirection(Local_au8RowGrp[Local_u8Iter], Local_au8RowPin[Local_u8Iter] , DIO_INPUT);
        DIO_enuSetPinValue(Local_au8RowGrp[Local_u8Iter], Local_au8RowPin[Local_u8Iter] , DIO_PULL_UP);
    }
    
    for (Local_u8Iter = 0 ; Local_u8Iter <KEYPAD_ROW_NUM ; Local_u8Iter ++)
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	8f 5f       	subi	r24, 0xFF	; 255
    455a:	89 83       	std	Y+1, r24	; 0x01
    455c:	89 81       	ldd	r24, Y+1	; 0x01
    455e:	84 30       	cpi	r24, 0x04	; 4
    4560:	60 f2       	brcs	.-104    	; 0x44fa <Keypad_enuInit+0xca>
    {
        DIO_enuSetPinDirection(Local_au8ColGrp[Local_u8Iter], Local_au8ColPin[Local_u8Iter] , DIO_OUTPUT);
        DIO_enuSetPinValue(Local_au8ColGrp[Local_u8Iter], Local_au8ColPin[Local_u8Iter] , DIO_HIGH);
    }
    return Local_enuErrorState;
    4562:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4564:	62 96       	adiw	r28, 0x12	; 18
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	f8 94       	cli
    456a:	de bf       	out	0x3e, r29	; 62
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	cd bf       	out	0x3d, r28	; 61
    4570:	cf 91       	pop	r28
    4572:	df 91       	pop	r29
    4574:	08 95       	ret

00004576 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    4576:	df 93       	push	r29
    4578:	cf 93       	push	r28
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	ea 97       	sbiw	r28, 0x3a	; 58
    4580:	0f b6       	in	r0, 0x3f	; 63
    4582:	f8 94       	cli
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	0f be       	out	0x3f, r0	; 63
    4588:	cd bf       	out	0x3d, r28	; 61
    458a:	9d ab       	std	Y+53, r25	; 0x35
    458c:	8c ab       	std	Y+52, r24	; 0x34

	ES_t Local_enuErrorState = ES_NOK;
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	8a 8b       	std	Y+18, r24	; 0x12

    u8 Local_au8RowGrp [4] = {R1_GRP,R2_GRP,R3_GRP,R4_GRP};
    4592:	82 e0       	ldi	r24, 0x02	; 2
    4594:	8b 8b       	std	Y+19, r24	; 0x13
    4596:	82 e0       	ldi	r24, 0x02	; 2
    4598:	8c 8b       	std	Y+20, r24	; 0x14
    459a:	82 e0       	ldi	r24, 0x02	; 2
    459c:	8d 8b       	std	Y+21, r24	; 0x15
    459e:	82 e0       	ldi	r24, 0x02	; 2
    45a0:	8e 8b       	std	Y+22, r24	; 0x16
    u8 Local_au8RowPin [4] = {R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    45a2:	82 e0       	ldi	r24, 0x02	; 2
    45a4:	8f 8b       	std	Y+23, r24	; 0x17
    45a6:	83 e0       	ldi	r24, 0x03	; 3
    45a8:	88 8f       	std	Y+24, r24	; 0x18
    45aa:	84 e0       	ldi	r24, 0x04	; 4
    45ac:	89 8f       	std	Y+25, r24	; 0x19
    45ae:	85 e0       	ldi	r24, 0x05	; 5
    45b0:	8a 8f       	std	Y+26, r24	; 0x1a

    u8 Local_au8ColGrp [4] = {C1_GRP,C2_GRP,C3_GRP,C4_GRP};
    45b2:	83 e0       	ldi	r24, 0x03	; 3
    45b4:	8b 8f       	std	Y+27, r24	; 0x1b
    45b6:	83 e0       	ldi	r24, 0x03	; 3
    45b8:	8c 8f       	std	Y+28, r24	; 0x1c
    45ba:	83 e0       	ldi	r24, 0x03	; 3
    45bc:	8d 8f       	std	Y+29, r24	; 0x1d
    45be:	83 e0       	ldi	r24, 0x03	; 3
    45c0:	8e 8f       	std	Y+30, r24	; 0x1e
    u8 Local_au8ColPin [4] = {C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	8f 8f       	std	Y+31, r24	; 0x1f
    45c6:	83 e0       	ldi	r24, 0x03	; 3
    45c8:	88 a3       	std	Y+32, r24	; 0x20
    45ca:	82 e0       	ldi	r24, 0x02	; 2
    45cc:	89 a3       	std	Y+33, r24	; 0x21
    45ce:	87 e0       	ldi	r24, 0x07	; 7
    45d0:	8a a3       	std	Y+34, r24	; 0x22

    u8 Local_u8RowIter = 0 ;
    45d2:	19 8a       	std	Y+17, r1	; 0x11
    u8 Local_u8ColIter = 0 ;
    45d4:	18 8a       	std	Y+16, r1	; 0x10

    *Copy_pu8KeyValue = 0xFF ;
    45d6:	ec a9       	ldd	r30, Y+52	; 0x34
    45d8:	fd a9       	ldd	r31, Y+53	; 0x35
    45da:	8f ef       	ldi	r24, 0xFF	; 255
    45dc:	80 83       	st	Z, r24
    u8 Local_u8PinValue = 0xFF ;
    45de:	8f ef       	ldi	r24, 0xFF	; 255
    45e0:	8b a3       	std	Y+35, r24	; 0x23
    BOOL Local_bBreakFlag = false;
    45e2:	1f 86       	std	Y+15, r1	; 0x0f

    for (Local_u8ColIter = 0; Local_u8ColIter < KEYPAD_COL_NUM; Local_u8ColIter++)
    45e4:	18 8a       	std	Y+16, r1	; 0x10
    45e6:	42 c1       	rjmp	.+644    	; 0x486c <Keypad_enuGetPressedKey+0x2f6>
    {
        DIO_enuSetPinValue(Local_au8ColGrp[Local_u8ColIter], Local_au8ColPin[Local_u8ColIter], DIO_LOW);
    45e8:	88 89       	ldd	r24, Y+16	; 0x10
    45ea:	28 2f       	mov	r18, r24
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	ce 01       	movw	r24, r28
    45f0:	4b 96       	adiw	r24, 0x1b	; 27
    45f2:	fc 01       	movw	r30, r24
    45f4:	e2 0f       	add	r30, r18
    45f6:	f3 1f       	adc	r31, r19
    45f8:	40 81       	ld	r20, Z
    45fa:	88 89       	ldd	r24, Y+16	; 0x10
    45fc:	28 2f       	mov	r18, r24
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	ce 01       	movw	r24, r28
    4602:	4f 96       	adiw	r24, 0x1f	; 31
    4604:	fc 01       	movw	r30, r24
    4606:	e2 0f       	add	r30, r18
    4608:	f3 1f       	adc	r31, r19
    460a:	90 81       	ld	r25, Z
    460c:	84 2f       	mov	r24, r20
    460e:	69 2f       	mov	r22, r25
    4610:	40 e0       	ldi	r20, 0x00	; 0
    4612:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

        for (Local_u8RowIter =0 ; Local_u8RowIter <KEYPAD_ROW_NUM ; Local_u8RowIter++)
    4616:	19 8a       	std	Y+17, r1	; 0x11
    4618:	08 c1       	rjmp	.+528    	; 0x482a <Keypad_enuGetPressedKey+0x2b4>
        {
            DIO_enuGetPinValue(Local_au8RowGrp[Local_u8RowIter], Local_au8RowPin[Local_u8RowIter],&Local_u8PinValue);
    461a:	89 89       	ldd	r24, Y+17	; 0x11
    461c:	28 2f       	mov	r18, r24
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	ce 01       	movw	r24, r28
    4622:	43 96       	adiw	r24, 0x13	; 19
    4624:	fc 01       	movw	r30, r24
    4626:	e2 0f       	add	r30, r18
    4628:	f3 1f       	adc	r31, r19
    462a:	40 81       	ld	r20, Z
    462c:	89 89       	ldd	r24, Y+17	; 0x11
    462e:	28 2f       	mov	r18, r24
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	ce 01       	movw	r24, r28
    4634:	47 96       	adiw	r24, 0x17	; 23
    4636:	fc 01       	movw	r30, r24
    4638:	e2 0f       	add	r30, r18
    463a:	f3 1f       	adc	r31, r19
    463c:	90 81       	ld	r25, Z
    463e:	9e 01       	movw	r18, r28
    4640:	2d 5d       	subi	r18, 0xDD	; 221
    4642:	3f 4f       	sbci	r19, 0xFF	; 255
    4644:	84 2f       	mov	r24, r20
    4646:	69 2f       	mov	r22, r25
    4648:	a9 01       	movw	r20, r18
    464a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_enuGetPinValue>
            if (Local_u8PinValue == DIO_LOW)
    464e:	8b a1       	ldd	r24, Y+35	; 0x23
    4650:	88 23       	and	r24, r24
    4652:	09 f0       	breq	.+2      	; 0x4656 <Keypad_enuGetPressedKey+0xe0>
    4654:	e7 c0       	rjmp	.+462    	; 0x4824 <Keypad_enuGetPressedKey+0x2ae>
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	a0 e4       	ldi	r26, 0x40	; 64
    465c:	b0 e4       	ldi	r27, 0x40	; 64
    465e:	8b 87       	std	Y+11, r24	; 0x0b
    4660:	9c 87       	std	Y+12, r25	; 0x0c
    4662:	ad 87       	std	Y+13, r26	; 0x0d
    4664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4666:	6b 85       	ldd	r22, Y+11	; 0x0b
    4668:	7c 85       	ldd	r23, Y+12	; 0x0c
    466a:	8d 85       	ldd	r24, Y+13	; 0x0d
    466c:	9e 85       	ldd	r25, Y+14	; 0x0e
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	4a e7       	ldi	r20, 0x7A	; 122
    4674:	55 e4       	ldi	r21, 0x45	; 69
    4676:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	8f 83       	std	Y+7, r24	; 0x07
    4680:	98 87       	std	Y+8, r25	; 0x08
    4682:	a9 87       	std	Y+9, r26	; 0x09
    4684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4686:	6f 81       	ldd	r22, Y+7	; 0x07
    4688:	78 85       	ldd	r23, Y+8	; 0x08
    468a:	89 85       	ldd	r24, Y+9	; 0x09
    468c:	9a 85       	ldd	r25, Y+10	; 0x0a
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	40 e8       	ldi	r20, 0x80	; 128
    4694:	5f e3       	ldi	r21, 0x3F	; 63
    4696:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    469a:	88 23       	and	r24, r24
    469c:	2c f4       	brge	.+10     	; 0x46a8 <Keypad_enuGetPressedKey+0x132>
		__ticks = 1;
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	9e 83       	std	Y+6, r25	; 0x06
    46a4:	8d 83       	std	Y+5, r24	; 0x05
    46a6:	3f c0       	rjmp	.+126    	; 0x4726 <Keypad_enuGetPressedKey+0x1b0>
	else if (__tmp > 65535)
    46a8:	6f 81       	ldd	r22, Y+7	; 0x07
    46aa:	78 85       	ldd	r23, Y+8	; 0x08
    46ac:	89 85       	ldd	r24, Y+9	; 0x09
    46ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	3f ef       	ldi	r19, 0xFF	; 255
    46b4:	4f e7       	ldi	r20, 0x7F	; 127
    46b6:	57 e4       	ldi	r21, 0x47	; 71
    46b8:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    46bc:	18 16       	cp	r1, r24
    46be:	4c f5       	brge	.+82     	; 0x4712 <Keypad_enuGetPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	40 e2       	ldi	r20, 0x20	; 32
    46ce:	51 e4       	ldi	r21, 0x41	; 65
    46d0:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    46d4:	dc 01       	movw	r26, r24
    46d6:	cb 01       	movw	r24, r22
    46d8:	bc 01       	movw	r22, r24
    46da:	cd 01       	movw	r24, r26
    46dc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	9e 83       	std	Y+6, r25	; 0x06
    46e6:	8d 83       	std	Y+5, r24	; 0x05
    46e8:	0f c0       	rjmp	.+30     	; 0x4708 <Keypad_enuGetPressedKey+0x192>
    46ea:	80 e9       	ldi	r24, 0x90	; 144
    46ec:	91 e0       	ldi	r25, 0x01	; 1
    46ee:	9c 83       	std	Y+4, r25	; 0x04
    46f0:	8b 83       	std	Y+3, r24	; 0x03
    46f2:	8b 81       	ldd	r24, Y+3	; 0x03
    46f4:	9c 81       	ldd	r25, Y+4	; 0x04
    46f6:	01 97       	sbiw	r24, 0x01	; 1
    46f8:	f1 f7       	brne	.-4      	; 0x46f6 <Keypad_enuGetPressedKey+0x180>
    46fa:	9c 83       	std	Y+4, r25	; 0x04
    46fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4700:	9e 81       	ldd	r25, Y+6	; 0x06
    4702:	01 97       	sbiw	r24, 0x01	; 1
    4704:	9e 83       	std	Y+6, r25	; 0x06
    4706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4708:	8d 81       	ldd	r24, Y+5	; 0x05
    470a:	9e 81       	ldd	r25, Y+6	; 0x06
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	69 f7       	brne	.-38     	; 0x46ea <Keypad_enuGetPressedKey+0x174>
    4710:	14 c0       	rjmp	.+40     	; 0x473a <Keypad_enuGetPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4712:	6f 81       	ldd	r22, Y+7	; 0x07
    4714:	78 85       	ldd	r23, Y+8	; 0x08
    4716:	89 85       	ldd	r24, Y+9	; 0x09
    4718:	9a 85       	ldd	r25, Y+10	; 0x0a
    471a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    471e:	dc 01       	movw	r26, r24
    4720:	cb 01       	movw	r24, r22
    4722:	9e 83       	std	Y+6, r25	; 0x06
    4724:	8d 83       	std	Y+5, r24	; 0x05
    4726:	8d 81       	ldd	r24, Y+5	; 0x05
    4728:	9e 81       	ldd	r25, Y+6	; 0x06
    472a:	9a 83       	std	Y+2, r25	; 0x02
    472c:	89 83       	std	Y+1, r24	; 0x01
    472e:	89 81       	ldd	r24, Y+1	; 0x01
    4730:	9a 81       	ldd	r25, Y+2	; 0x02
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	f1 f7       	brne	.-4      	; 0x4732 <Keypad_enuGetPressedKey+0x1bc>
    4736:	9a 83       	std	Y+2, r25	; 0x02
    4738:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(3);
                DIO_enuGetPinValue(Local_au8RowGrp[Local_u8RowIter], Local_au8RowPin[Local_u8RowIter],&Local_u8PinValue);
    473a:	89 89       	ldd	r24, Y+17	; 0x11
    473c:	28 2f       	mov	r18, r24
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	ce 01       	movw	r24, r28
    4742:	43 96       	adiw	r24, 0x13	; 19
    4744:	fc 01       	movw	r30, r24
    4746:	e2 0f       	add	r30, r18
    4748:	f3 1f       	adc	r31, r19
    474a:	40 81       	ld	r20, Z
    474c:	89 89       	ldd	r24, Y+17	; 0x11
    474e:	28 2f       	mov	r18, r24
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	ce 01       	movw	r24, r28
    4754:	47 96       	adiw	r24, 0x17	; 23
    4756:	fc 01       	movw	r30, r24
    4758:	e2 0f       	add	r30, r18
    475a:	f3 1f       	adc	r31, r19
    475c:	90 81       	ld	r25, Z
    475e:	9e 01       	movw	r18, r28
    4760:	2d 5d       	subi	r18, 0xDD	; 221
    4762:	3f 4f       	sbci	r19, 0xFF	; 255
    4764:	84 2f       	mov	r24, r20
    4766:	69 2f       	mov	r22, r25
    4768:	a9 01       	movw	r20, r18
    476a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_enuGetPinValue>
                if (Local_u8PinValue == DIO_LOW)
    476e:	8b a1       	ldd	r24, Y+35	; 0x23
    4770:	88 23       	and	r24, r24
    4772:	09 f0       	breq	.+2      	; 0x4776 <Keypad_enuGetPressedKey+0x200>
    4774:	57 c0       	rjmp	.+174    	; 0x4824 <Keypad_enuGetPressedKey+0x2ae>
                {
                    // take action
                    u8 Local_au8KeyValues[KEYPAD_ROW_NUM][KEYPAD_COL_NUM] = KEYPAD_KEY_VALUES;
    4776:	ce 01       	movw	r24, r28
    4778:	84 96       	adiw	r24, 0x24	; 36
    477a:	9f ab       	std	Y+55, r25	; 0x37
    477c:	8e ab       	std	Y+54, r24	; 0x36
    477e:	e3 ed       	ldi	r30, 0xD3	; 211
    4780:	f2 e0       	ldi	r31, 0x02	; 2
    4782:	f9 af       	std	Y+57, r31	; 0x39
    4784:	e8 af       	std	Y+56, r30	; 0x38
    4786:	f0 e1       	ldi	r31, 0x10	; 16
    4788:	fa af       	std	Y+58, r31	; 0x3a
    478a:	e8 ad       	ldd	r30, Y+56	; 0x38
    478c:	f9 ad       	ldd	r31, Y+57	; 0x39
    478e:	00 80       	ld	r0, Z
    4790:	88 ad       	ldd	r24, Y+56	; 0x38
    4792:	99 ad       	ldd	r25, Y+57	; 0x39
    4794:	01 96       	adiw	r24, 0x01	; 1
    4796:	99 af       	std	Y+57, r25	; 0x39
    4798:	88 af       	std	Y+56, r24	; 0x38
    479a:	ee a9       	ldd	r30, Y+54	; 0x36
    479c:	ff a9       	ldd	r31, Y+55	; 0x37
    479e:	00 82       	st	Z, r0
    47a0:	8e a9       	ldd	r24, Y+54	; 0x36
    47a2:	9f a9       	ldd	r25, Y+55	; 0x37
    47a4:	01 96       	adiw	r24, 0x01	; 1
    47a6:	9f ab       	std	Y+55, r25	; 0x37
    47a8:	8e ab       	std	Y+54, r24	; 0x36
    47aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    47ac:	91 50       	subi	r25, 0x01	; 1
    47ae:	9a af       	std	Y+58, r25	; 0x3a
    47b0:	ea ad       	ldd	r30, Y+58	; 0x3a
    47b2:	ee 23       	and	r30, r30
    47b4:	51 f7       	brne	.-44     	; 0x478a <Keypad_enuGetPressedKey+0x214>
                    
                    *Copy_pu8KeyValue = Local_au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    47b6:	89 89       	ldd	r24, Y+17	; 0x11
    47b8:	28 2f       	mov	r18, r24
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	88 89       	ldd	r24, Y+16	; 0x10
    47be:	48 2f       	mov	r20, r24
    47c0:	50 e0       	ldi	r21, 0x00	; 0
    47c2:	22 0f       	add	r18, r18
    47c4:	33 1f       	adc	r19, r19
    47c6:	22 0f       	add	r18, r18
    47c8:	33 1f       	adc	r19, r19
    47ca:	ce 01       	movw	r24, r28
    47cc:	01 96       	adiw	r24, 0x01	; 1
    47ce:	82 0f       	add	r24, r18
    47d0:	93 1f       	adc	r25, r19
    47d2:	84 0f       	add	r24, r20
    47d4:	95 1f       	adc	r25, r21
    47d6:	fc 01       	movw	r30, r24
    47d8:	b3 96       	adiw	r30, 0x23	; 35
    47da:	80 81       	ld	r24, Z
    47dc:	ec a9       	ldd	r30, Y+52	; 0x34
    47de:	fd a9       	ldd	r31, Y+53	; 0x35
    47e0:	80 83       	st	Z, r24
    47e2:	1a c0       	rjmp	.+52     	; 0x4818 <Keypad_enuGetPressedKey+0x2a2>

                    while (Local_u8PinValue == DIO_LOW){

                        DIO_enuGetPinValue(Local_au8RowGrp[Local_u8RowIter], Local_au8RowPin[Local_u8RowIter],&Local_u8PinValue);
    47e4:	89 89       	ldd	r24, Y+17	; 0x11
    47e6:	28 2f       	mov	r18, r24
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	ce 01       	movw	r24, r28
    47ec:	43 96       	adiw	r24, 0x13	; 19
    47ee:	fc 01       	movw	r30, r24
    47f0:	e2 0f       	add	r30, r18
    47f2:	f3 1f       	adc	r31, r19
    47f4:	40 81       	ld	r20, Z
    47f6:	89 89       	ldd	r24, Y+17	; 0x11
    47f8:	28 2f       	mov	r18, r24
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	ce 01       	movw	r24, r28
    47fe:	47 96       	adiw	r24, 0x17	; 23
    4800:	fc 01       	movw	r30, r24
    4802:	e2 0f       	add	r30, r18
    4804:	f3 1f       	adc	r31, r19
    4806:	90 81       	ld	r25, Z
    4808:	9e 01       	movw	r18, r28
    480a:	2d 5d       	subi	r18, 0xDD	; 221
    480c:	3f 4f       	sbci	r19, 0xFF	; 255
    480e:	84 2f       	mov	r24, r20
    4810:	69 2f       	mov	r22, r25
    4812:	a9 01       	movw	r20, r18
    4814:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_enuGetPinValue>
                    // take action
                    u8 Local_au8KeyValues[KEYPAD_ROW_NUM][KEYPAD_COL_NUM] = KEYPAD_KEY_VALUES;
                    
                    *Copy_pu8KeyValue = Local_au8KeyValues[Local_u8RowIter][Local_u8ColIter];

                    while (Local_u8PinValue == DIO_LOW){
    4818:	8b a1       	ldd	r24, Y+35	; 0x23
    481a:	88 23       	and	r24, r24
    481c:	19 f3       	breq	.-58     	; 0x47e4 <Keypad_enuGetPressedKey+0x26e>

                        DIO_enuGetPinValue(Local_au8RowGrp[Local_u8RowIter], Local_au8RowPin[Local_u8RowIter],&Local_u8PinValue);
                    }
                    Local_bBreakFlag = true;
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	8f 87       	std	Y+15, r24	; 0x0f
    4822:	07 c0       	rjmp	.+14     	; 0x4832 <Keypad_enuGetPressedKey+0x2bc>

    for (Local_u8ColIter = 0; Local_u8ColIter < KEYPAD_COL_NUM; Local_u8ColIter++)
    {
        DIO_enuSetPinValue(Local_au8ColGrp[Local_u8ColIter], Local_au8ColPin[Local_u8ColIter], DIO_LOW);

        for (Local_u8RowIter =0 ; Local_u8RowIter <KEYPAD_ROW_NUM ; Local_u8RowIter++)
    4824:	89 89       	ldd	r24, Y+17	; 0x11
    4826:	8f 5f       	subi	r24, 0xFF	; 255
    4828:	89 8b       	std	Y+17, r24	; 0x11
    482a:	89 89       	ldd	r24, Y+17	; 0x11
    482c:	84 30       	cpi	r24, 0x04	; 4
    482e:	08 f4       	brcc	.+2      	; 0x4832 <Keypad_enuGetPressedKey+0x2bc>
    4830:	f4 ce       	rjmp	.-536    	; 0x461a <Keypad_enuGetPressedKey+0xa4>
                    break;
                }
            }
        }

        DIO_enuSetPinValue(Local_au8ColGrp[Local_u8ColIter], Local_au8ColPin[Local_u8ColIter], DIO_HIGH);
    4832:	88 89       	ldd	r24, Y+16	; 0x10
    4834:	28 2f       	mov	r18, r24
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	ce 01       	movw	r24, r28
    483a:	4b 96       	adiw	r24, 0x1b	; 27
    483c:	fc 01       	movw	r30, r24
    483e:	e2 0f       	add	r30, r18
    4840:	f3 1f       	adc	r31, r19
    4842:	40 81       	ld	r20, Z
    4844:	88 89       	ldd	r24, Y+16	; 0x10
    4846:	28 2f       	mov	r18, r24
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	ce 01       	movw	r24, r28
    484c:	4f 96       	adiw	r24, 0x1f	; 31
    484e:	fc 01       	movw	r30, r24
    4850:	e2 0f       	add	r30, r18
    4852:	f3 1f       	adc	r31, r19
    4854:	90 81       	ld	r25, Z
    4856:	84 2f       	mov	r24, r20
    4858:	69 2f       	mov	r22, r25
    485a:	41 e0       	ldi	r20, 0x01	; 1
    485c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

        if (Local_bBreakFlag == true){
    4860:	8f 85       	ldd	r24, Y+15	; 0x0f
    4862:	81 30       	cpi	r24, 0x01	; 1
    4864:	39 f0       	breq	.+14     	; 0x4874 <Keypad_enuGetPressedKey+0x2fe>

    *Copy_pu8KeyValue = 0xFF ;
    u8 Local_u8PinValue = 0xFF ;
    BOOL Local_bBreakFlag = false;

    for (Local_u8ColIter = 0; Local_u8ColIter < KEYPAD_COL_NUM; Local_u8ColIter++)
    4866:	88 89       	ldd	r24, Y+16	; 0x10
    4868:	8f 5f       	subi	r24, 0xFF	; 255
    486a:	88 8b       	std	Y+16, r24	; 0x10
    486c:	88 89       	ldd	r24, Y+16	; 0x10
    486e:	84 30       	cpi	r24, 0x04	; 4
    4870:	08 f4       	brcc	.+2      	; 0x4874 <Keypad_enuGetPressedKey+0x2fe>
    4872:	ba ce       	rjmp	.-652    	; 0x45e8 <Keypad_enuGetPressedKey+0x72>
        if (Local_bBreakFlag == true){

            break;
        }
    }
    return Local_enuErrorState;
    4874:	8a 89       	ldd	r24, Y+18	; 0x12
}
    4876:	ea 96       	adiw	r28, 0x3a	; 58
    4878:	0f b6       	in	r0, 0x3f	; 63
    487a:	f8 94       	cli
    487c:	de bf       	out	0x3e, r29	; 62
    487e:	0f be       	out	0x3f, r0	; 63
    4880:	cd bf       	out	0x3d, r28	; 61
    4882:	cf 91       	pop	r28
    4884:	df 91       	pop	r29
    4886:	08 95       	ret

00004888 <HexaDecoder_enuInit>:
//my own lib
#include "HexaDecoder_priv.h"
#include "HexaDecoder_config.h"


ES_t HexaDecoder_enuInit(void){
    4888:	df 93       	push	r29
    488a:	cf 93       	push	r28
    488c:	cd b7       	in	r28, 0x3d	; 61
    488e:	de b7       	in	r29, 0x3e	; 62
    4890:	28 97       	sbiw	r28, 0x08	; 8
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	f8 94       	cli
    4896:	de bf       	out	0x3e, r29	; 62
    4898:	0f be       	out	0x3f, r0	; 63
    489a:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState = ES_NOK;
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	8a 83       	std	Y+2, r24	; 0x02

    #if HEX_DEC_A_GRP <= DIO_GROUP_D && HEX_DEC_B_GRP <= DIO_GROUP_D && HEX_DEC_C_GRP <= DIO_GROUP_D && HEX_DEC_D_GRP <= DIO_GROUP_D

      #if HEX_DEC_A_PIN <= DIO_PIN_7 && HEX_DEC_B_PIN <= DIO_PIN_7 && HEX_DEC_C_PIN <= DIO_PIN_7 && HEX_DEC_D_PIN <= DIO_PIN_7

	      ES_t Local_aenuErrorState[HEX_DEC_ERROR_STATE_INIT_COND] = {0};
    48a0:	86 e0       	ldi	r24, 0x06	; 6
    48a2:	fe 01       	movw	r30, r28
    48a4:	33 96       	adiw	r30, 0x03	; 3
    48a6:	df 01       	movw	r26, r30
    48a8:	98 2f       	mov	r25, r24
    48aa:	1d 92       	st	X+, r1
    48ac:	9a 95       	dec	r25
    48ae:	e9 f7       	brne	.-6      	; 0x48aa <HexaDecoder_enuInit+0x22>

	      Local_aenuErrorState[0] = DIO_enuSetPinDirection(HEX_DEC_A_GRP,HEX_DEC_A_PIN,DIO_OUTPUT);
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	64 e0       	ldi	r22, 0x04	; 4
    48b4:	41 e0       	ldi	r20, 0x01	; 1
    48b6:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
    48ba:	8b 83       	std	Y+3, r24	; 0x03
	      Local_aenuErrorState[1] = DIO_enuSetPinDirection(HEX_DEC_B_GRP,HEX_DEC_B_PIN,DIO_OUTPUT);
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	65 e0       	ldi	r22, 0x05	; 5
    48c0:	41 e0       	ldi	r20, 0x01	; 1
    48c2:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
    48c6:	8c 83       	std	Y+4, r24	; 0x04
	      Local_aenuErrorState[2] = DIO_enuSetPinDirection(HEX_DEC_C_GRP,HEX_DEC_C_PIN,DIO_OUTPUT);
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	66 e0       	ldi	r22, 0x06	; 6
    48cc:	41 e0       	ldi	r20, 0x01	; 1
    48ce:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
    48d2:	8d 83       	std	Y+5, r24	; 0x05
	      Local_aenuErrorState[3] = DIO_enuSetPinDirection(HEX_DEC_D_GRP,HEX_DEC_D_PIN,DIO_OUTPUT);
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	67 e0       	ldi	r22, 0x07	; 7
    48d8:	41 e0       	ldi	r20, 0x01	; 1
    48da:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
    48de:	8e 83       	std	Y+6, r24	; 0x06

	      Local_aenuErrorState[4] = DIO_enuSetPinDirection(HEX_DEC_EN1_GRP,HEX_DEC_EN1_PIN,DIO_OUTPUT);
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	62 e0       	ldi	r22, 0x02	; 2
    48e4:	41 e0       	ldi	r20, 0x01	; 1
    48e6:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
    48ea:	8f 83       	std	Y+7, r24	; 0x07
	      Local_aenuErrorState[5] = DIO_enuSetPinDirection(HEX_DEC_EN2_GRP,HEX_DEC_EN2_PIN,DIO_OUTPUT);
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	61 e0       	ldi	r22, 0x01	; 1
    48f0:	41 e0       	ldi	r20, 0x01	; 1
    48f2:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
    48f6:	88 87       	std	Y+8, r24	; 0x08

	      for(u8 iter = 0 ; iter < HEX_DEC_ERROR_STATE_INIT_COND ; iter++){
    48f8:	19 82       	std	Y+1, r1	; 0x01
    48fa:	23 c0       	rjmp	.+70     	; 0x4942 <HexaDecoder_enuInit+0xba>

	    	  if( Local_aenuErrorState[iter] != ES_OK){
    48fc:	89 81       	ldd	r24, Y+1	; 0x01
    48fe:	28 2f       	mov	r18, r24
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	ce 01       	movw	r24, r28
    4904:	03 96       	adiw	r24, 0x03	; 3
    4906:	fc 01       	movw	r30, r24
    4908:	e2 0f       	add	r30, r18
    490a:	f3 1f       	adc	r31, r19
    490c:	80 81       	ld	r24, Z
    490e:	88 23       	and	r24, r24
    4910:	59 f0       	breq	.+22     	; 0x4928 <HexaDecoder_enuInit+0xa0>

	    		  Local_enuErrorState = Local_aenuErrorState[iter];
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	28 2f       	mov	r18, r24
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	ce 01       	movw	r24, r28
    491a:	03 96       	adiw	r24, 0x03	; 3
    491c:	fc 01       	movw	r30, r24
    491e:	e2 0f       	add	r30, r18
    4920:	f3 1f       	adc	r31, r19
    4922:	80 81       	ld	r24, Z
    4924:	8a 83       	std	Y+2, r24	; 0x02
    4926:	10 c0       	rjmp	.+32     	; 0x4948 <HexaDecoder_enuInit+0xc0>
	    		  break;
	    	  }
	    	  else{
	    		  Local_enuErrorState = Local_aenuErrorState[iter];
    4928:	89 81       	ldd	r24, Y+1	; 0x01
    492a:	28 2f       	mov	r18, r24
    492c:	30 e0       	ldi	r19, 0x00	; 0
    492e:	ce 01       	movw	r24, r28
    4930:	03 96       	adiw	r24, 0x03	; 3
    4932:	fc 01       	movw	r30, r24
    4934:	e2 0f       	add	r30, r18
    4936:	f3 1f       	adc	r31, r19
    4938:	80 81       	ld	r24, Z
    493a:	8a 83       	std	Y+2, r24	; 0x02
	      Local_aenuErrorState[3] = DIO_enuSetPinDirection(HEX_DEC_D_GRP,HEX_DEC_D_PIN,DIO_OUTPUT);

	      Local_aenuErrorState[4] = DIO_enuSetPinDirection(HEX_DEC_EN1_GRP,HEX_DEC_EN1_PIN,DIO_OUTPUT);
	      Local_aenuErrorState[5] = DIO_enuSetPinDirection(HEX_DEC_EN2_GRP,HEX_DEC_EN2_PIN,DIO_OUTPUT);

	      for(u8 iter = 0 ; iter < HEX_DEC_ERROR_STATE_INIT_COND ; iter++){
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	8f 5f       	subi	r24, 0xFF	; 255
    4940:	89 83       	std	Y+1, r24	; 0x01
    4942:	89 81       	ldd	r24, Y+1	; 0x01
    4944:	86 30       	cpi	r24, 0x06	; 6
    4946:	d0 f2       	brcs	.-76     	; 0x48fc <HexaDecoder_enuInit+0x74>
      #endif

    #else
      #error hexa group config is out of range
    #endif
	return Local_enuErrorState;
    4948:	8a 81       	ldd	r24, Y+2	; 0x02
}
    494a:	28 96       	adiw	r28, 0x08	; 8
    494c:	0f b6       	in	r0, 0x3f	; 63
    494e:	f8 94       	cli
    4950:	de bf       	out	0x3e, r29	; 62
    4952:	0f be       	out	0x3f, r0	; 63
    4954:	cd bf       	out	0x3d, r28	; 61
    4956:	cf 91       	pop	r28
    4958:	df 91       	pop	r29
    495a:	08 95       	ret

0000495c <HexaDecoder_enuDisplayNum>:

ES_t HexaDecoder_enuDisplayNum(u8 Copy_u8Num){
    495c:	df 93       	push	r29
    495e:	cf 93       	push	r28
    4960:	cd b7       	in	r28, 0x3d	; 61
    4962:	de b7       	in	r29, 0x3e	; 62
    4964:	27 97       	sbiw	r28, 0x07	; 7
    4966:	0f b6       	in	r0, 0x3f	; 63
    4968:	f8 94       	cli
    496a:	de bf       	out	0x3e, r29	; 62
    496c:	0f be       	out	0x3f, r0	; 63
    496e:	cd bf       	out	0x3d, r28	; 61
    4970:	8f 83       	std	Y+7, r24	; 0x07

	ES_t Local_enuErrorState = ES_NOK;
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8Num <= 9 ){
    4976:	8f 81       	ldd	r24, Y+7	; 0x07
    4978:	8a 30       	cpi	r24, 0x0A	; 10
    497a:	08 f0       	brcs	.+2      	; 0x497e <HexaDecoder_enuDisplayNum+0x22>
    497c:	4e c0       	rjmp	.+156    	; 0x4a1a <HexaDecoder_enuDisplayNum+0xbe>
		ES_t Local_aenuErrorState[HEX_DEC_ERROR_STATE_DISPLAY_COND] = {0};
    497e:	1b 82       	std	Y+3, r1	; 0x03
    4980:	1c 82       	std	Y+4, r1	; 0x04
    4982:	1d 82       	std	Y+5, r1	; 0x05
    4984:	1e 82       	std	Y+6, r1	; 0x06

	    Local_aenuErrorState[0] = DIO_enuSetPinValue(HEX_DEC_A_GRP,HEX_DEC_A_PIN,((Copy_u8Num>>HEX_DEC_NUM_BIT_0)&DIO_BIT_MASK));
    4986:	8f 81       	ldd	r24, Y+7	; 0x07
    4988:	98 2f       	mov	r25, r24
    498a:	91 70       	andi	r25, 0x01	; 1
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	64 e0       	ldi	r22, 0x04	; 4
    4990:	49 2f       	mov	r20, r25
    4992:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4996:	8b 83       	std	Y+3, r24	; 0x03
	    Local_aenuErrorState[1] = DIO_enuSetPinValue(HEX_DEC_B_GRP,HEX_DEC_B_PIN,((Copy_u8Num>>HEX_DEC_NUM_BIT_1)&DIO_BIT_MASK));
    4998:	8f 81       	ldd	r24, Y+7	; 0x07
    499a:	86 95       	lsr	r24
    499c:	98 2f       	mov	r25, r24
    499e:	91 70       	andi	r25, 0x01	; 1
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	65 e0       	ldi	r22, 0x05	; 5
    49a4:	49 2f       	mov	r20, r25
    49a6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    49aa:	8c 83       	std	Y+4, r24	; 0x04
	    Local_aenuErrorState[2] = DIO_enuSetPinValue(HEX_DEC_C_GRP,HEX_DEC_C_PIN,((Copy_u8Num>>HEX_DEC_NUM_BIT_2)&DIO_BIT_MASK));
    49ac:	8f 81       	ldd	r24, Y+7	; 0x07
    49ae:	86 95       	lsr	r24
    49b0:	86 95       	lsr	r24
    49b2:	98 2f       	mov	r25, r24
    49b4:	91 70       	andi	r25, 0x01	; 1
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	66 e0       	ldi	r22, 0x06	; 6
    49ba:	49 2f       	mov	r20, r25
    49bc:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    49c0:	8d 83       	std	Y+5, r24	; 0x05
	    Local_aenuErrorState[3] = DIO_enuSetPinValue(HEX_DEC_D_GRP,HEX_DEC_D_PIN,((Copy_u8Num>>HEX_DEC_NUM_BIT_3)&DIO_BIT_MASK));
    49c2:	8f 81       	ldd	r24, Y+7	; 0x07
    49c4:	86 95       	lsr	r24
    49c6:	86 95       	lsr	r24
    49c8:	86 95       	lsr	r24
    49ca:	98 2f       	mov	r25, r24
    49cc:	91 70       	andi	r25, 0x01	; 1
    49ce:	80 e0       	ldi	r24, 0x00	; 0
    49d0:	67 e0       	ldi	r22, 0x07	; 7
    49d2:	49 2f       	mov	r20, r25
    49d4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    49d8:	8e 83       	std	Y+6, r24	; 0x06

	    for(u8 iter = 0 ; iter < HEX_DEC_ERROR_STATE_DISPLAY_COND ; iter++){
    49da:	19 82       	std	Y+1, r1	; 0x01
    49dc:	1b c0       	rjmp	.+54     	; 0x4a14 <HexaDecoder_enuDisplayNum+0xb8>

	    	if( Local_enuErrorState != ES_OK){
    49de:	8a 81       	ldd	r24, Y+2	; 0x02
    49e0:	88 23       	and	r24, r24
    49e2:	59 f0       	breq	.+22     	; 0x49fa <HexaDecoder_enuDisplayNum+0x9e>

	    		Local_enuErrorState = Local_aenuErrorState[iter];
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	28 2f       	mov	r18, r24
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	ce 01       	movw	r24, r28
    49ec:	03 96       	adiw	r24, 0x03	; 3
    49ee:	fc 01       	movw	r30, r24
    49f0:	e2 0f       	add	r30, r18
    49f2:	f3 1f       	adc	r31, r19
    49f4:	80 81       	ld	r24, Z
    49f6:	8a 83       	std	Y+2, r24	; 0x02
    49f8:	10 c0       	rjmp	.+32     	; 0x4a1a <HexaDecoder_enuDisplayNum+0xbe>
	    		break;
	    	}
	    	else{

	    	Local_enuErrorState = Local_aenuErrorState[iter];
    49fa:	89 81       	ldd	r24, Y+1	; 0x01
    49fc:	28 2f       	mov	r18, r24
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	ce 01       	movw	r24, r28
    4a02:	03 96       	adiw	r24, 0x03	; 3
    4a04:	fc 01       	movw	r30, r24
    4a06:	e2 0f       	add	r30, r18
    4a08:	f3 1f       	adc	r31, r19
    4a0a:	80 81       	ld	r24, Z
    4a0c:	8a 83       	std	Y+2, r24	; 0x02
	    Local_aenuErrorState[0] = DIO_enuSetPinValue(HEX_DEC_A_GRP,HEX_DEC_A_PIN,((Copy_u8Num>>HEX_DEC_NUM_BIT_0)&DIO_BIT_MASK));
	    Local_aenuErrorState[1] = DIO_enuSetPinValue(HEX_DEC_B_GRP,HEX_DEC_B_PIN,((Copy_u8Num>>HEX_DEC_NUM_BIT_1)&DIO_BIT_MASK));
	    Local_aenuErrorState[2] = DIO_enuSetPinValue(HEX_DEC_C_GRP,HEX_DEC_C_PIN,((Copy_u8Num>>HEX_DEC_NUM_BIT_2)&DIO_BIT_MASK));
	    Local_aenuErrorState[3] = DIO_enuSetPinValue(HEX_DEC_D_GRP,HEX_DEC_D_PIN,((Copy_u8Num>>HEX_DEC_NUM_BIT_3)&DIO_BIT_MASK));

	    for(u8 iter = 0 ; iter < HEX_DEC_ERROR_STATE_DISPLAY_COND ; iter++){
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	8f 5f       	subi	r24, 0xFF	; 255
    4a12:	89 83       	std	Y+1, r24	; 0x01
    4a14:	89 81       	ldd	r24, Y+1	; 0x01
    4a16:	84 30       	cpi	r24, 0x04	; 4
    4a18:	10 f3       	brcs	.-60     	; 0x49de <HexaDecoder_enuDisplayNum+0x82>
	    	Local_enuErrorState = Local_aenuErrorState[iter];
		}
	}
	}

	return Local_enuErrorState;
    4a1a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a1c:	27 96       	adiw	r28, 0x07	; 7
    4a1e:	0f b6       	in	r0, 0x3f	; 63
    4a20:	f8 94       	cli
    4a22:	de bf       	out	0x3e, r29	; 62
    4a24:	0f be       	out	0x3f, r0	; 63
    4a26:	cd bf       	out	0x3d, r28	; 61
    4a28:	cf 91       	pop	r28
    4a2a:	df 91       	pop	r29
    4a2c:	08 95       	ret

00004a2e <HexaDecoder_enuEnableSSG>:

ES_t HexaDecoder_enuEnableSSG(u8 Copy_u8SSGNum){
    4a2e:	df 93       	push	r29
    4a30:	cf 93       	push	r28
    4a32:	00 d0       	rcall	.+0      	; 0x4a34 <HexaDecoder_enuEnableSSG+0x6>
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    4a38:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8SSGNum == HEX_DEC_SSG_LEFT){
    4a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a40:	82 33       	cpi	r24, 0x32	; 50
    4a42:	39 f4       	brne	.+14     	; 0x4a52 <HexaDecoder_enuEnableSSG+0x24>

		Local_enuErrorState = DIO_enuSetPinValue(HEX_DEC_EN1_GRP,HEX_DEC_EN1_PIN,DIO_HIGH);
    4a44:	81 e0       	ldi	r24, 0x01	; 1
    4a46:	62 e0       	ldi	r22, 0x02	; 2
    4a48:	41 e0       	ldi	r20, 0x01	; 1
    4a4a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4a4e:	89 83       	std	Y+1, r24	; 0x01
    4a50:	0c c0       	rjmp	.+24     	; 0x4a6a <HexaDecoder_enuEnableSSG+0x3c>
	}
	else if ( Copy_u8SSGNum ==  HEX_DEC_SSG_RIGHT){
    4a52:	8a 81       	ldd	r24, Y+2	; 0x02
    4a54:	84 36       	cpi	r24, 0x64	; 100
    4a56:	39 f4       	brne	.+14     	; 0x4a66 <HexaDecoder_enuEnableSSG+0x38>

		Local_enuErrorState = DIO_enuSetPinValue(HEX_DEC_EN2_GRP,HEX_DEC_EN2_PIN,DIO_HIGH);
    4a58:	81 e0       	ldi	r24, 0x01	; 1
    4a5a:	61 e0       	ldi	r22, 0x01	; 1
    4a5c:	41 e0       	ldi	r20, 0x01	; 1
    4a5e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4a62:	89 83       	std	Y+1, r24	; 0x01
    4a64:	02 c0       	rjmp	.+4      	; 0x4a6a <HexaDecoder_enuEnableSSG+0x3c>
	}

	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    4a66:	82 e0       	ldi	r24, 0x02	; 2
    4a68:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0
    4a70:	cf 91       	pop	r28
    4a72:	df 91       	pop	r29
    4a74:	08 95       	ret

00004a76 <HexaDecoder_enuDisableSSG>:

ES_t HexaDecoder_enuDisableSSG(u8 Copy_u8SSGNum){
    4a76:	df 93       	push	r29
    4a78:	cf 93       	push	r28
    4a7a:	00 d0       	rcall	.+0      	; 0x4a7c <HexaDecoder_enuDisableSSG+0x6>
    4a7c:	cd b7       	in	r28, 0x3d	; 61
    4a7e:	de b7       	in	r29, 0x3e	; 62
    4a80:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8SSGNum == HEX_DEC_SSG_LEFT){
    4a86:	8a 81       	ldd	r24, Y+2	; 0x02
    4a88:	82 33       	cpi	r24, 0x32	; 50
    4a8a:	39 f4       	brne	.+14     	; 0x4a9a <HexaDecoder_enuDisableSSG+0x24>

		Local_enuErrorState = DIO_enuSetPinValue(HEX_DEC_EN1_GRP,HEX_DEC_EN1_PIN,DIO_LOW);
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	62 e0       	ldi	r22, 0x02	; 2
    4a90:	40 e0       	ldi	r20, 0x00	; 0
    4a92:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4a96:	89 83       	std	Y+1, r24	; 0x01
    4a98:	0c c0       	rjmp	.+24     	; 0x4ab2 <HexaDecoder_enuDisableSSG+0x3c>
	}
	else if ( Copy_u8SSGNum ==  HEX_DEC_SSG_RIGHT){
    4a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9c:	84 36       	cpi	r24, 0x64	; 100
    4a9e:	39 f4       	brne	.+14     	; 0x4aae <HexaDecoder_enuDisableSSG+0x38>

		Local_enuErrorState = DIO_enuSetPinValue(HEX_DEC_EN2_GRP,HEX_DEC_EN2_PIN,DIO_LOW);
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	61 e0       	ldi	r22, 0x01	; 1
    4aa4:	40 e0       	ldi	r20, 0x00	; 0
    4aa6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4aaa:	89 83       	std	Y+1, r24	; 0x01
    4aac:	02 c0       	rjmp	.+4      	; 0x4ab2 <HexaDecoder_enuDisableSSG+0x3c>
	}

	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    4aae:	82 e0       	ldi	r24, 0x02	; 2
    4ab0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ab4:	0f 90       	pop	r0
    4ab6:	0f 90       	pop	r0
    4ab8:	cf 91       	pop	r28
    4aba:	df 91       	pop	r29
    4abc:	08 95       	ret

00004abe <HexaDecoder_enuStopDisplay>:

ES_t HexaDecoder_enuStopDisplay(void){
    4abe:	df 93       	push	r29
    4ac0:	cf 93       	push	r28
    4ac2:	00 d0       	rcall	.+0      	; 0x4ac4 <HexaDecoder_enuStopDisplay+0x6>
    4ac4:	00 d0       	rcall	.+0      	; 0x4ac6 <HexaDecoder_enuStopDisplay+0x8>
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_aenuErrorState[HEX_DEC_ERROR_STATE_STOP_DISPLAY_COND] = {0};
    4ace:	1c 82       	std	Y+4, r1	; 0x04
    4ad0:	1b 82       	std	Y+3, r1	; 0x03

	Local_aenuErrorState[0] = DIO_enuSetPinValue(HEX_DEC_EN1_GRP,HEX_DEC_EN1_PIN,DIO_LOW);
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	62 e0       	ldi	r22, 0x02	; 2
    4ad6:	40 e0       	ldi	r20, 0x00	; 0
    4ad8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4adc:	8b 83       	std	Y+3, r24	; 0x03

	Local_aenuErrorState[1] = DIO_enuSetPinValue(HEX_DEC_EN2_GRP,HEX_DEC_EN2_PIN,DIO_LOW);
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	61 e0       	ldi	r22, 0x01	; 1
    4ae2:	40 e0       	ldi	r20, 0x00	; 0
    4ae4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
    4ae8:	8c 83       	std	Y+4, r24	; 0x04

	for(u8 iter = 0 ; iter < HEX_DEC_ERROR_STATE_STOP_DISPLAY_COND ; iter++){
    4aea:	19 82       	std	Y+1, r1	; 0x01
    4aec:	23 c0       	rjmp	.+70     	; 0x4b34 <HexaDecoder_enuStopDisplay+0x76>

		if( Local_aenuErrorState[iter] != ES_NOK ){
    4aee:	89 81       	ldd	r24, Y+1	; 0x01
    4af0:	28 2f       	mov	r18, r24
    4af2:	30 e0       	ldi	r19, 0x00	; 0
    4af4:	ce 01       	movw	r24, r28
    4af6:	03 96       	adiw	r24, 0x03	; 3
    4af8:	fc 01       	movw	r30, r24
    4afa:	e2 0f       	add	r30, r18
    4afc:	f3 1f       	adc	r31, r19
    4afe:	80 81       	ld	r24, Z
    4b00:	81 30       	cpi	r24, 0x01	; 1
    4b02:	59 f0       	breq	.+22     	; 0x4b1a <HexaDecoder_enuStopDisplay+0x5c>

			Local_enuErrorState = Local_aenuErrorState[iter];
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	28 2f       	mov	r18, r24
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	ce 01       	movw	r24, r28
    4b0c:	03 96       	adiw	r24, 0x03	; 3
    4b0e:	fc 01       	movw	r30, r24
    4b10:	e2 0f       	add	r30, r18
    4b12:	f3 1f       	adc	r31, r19
    4b14:	80 81       	ld	r24, Z
    4b16:	8a 83       	std	Y+2, r24	; 0x02
    4b18:	10 c0       	rjmp	.+32     	; 0x4b3a <HexaDecoder_enuStopDisplay+0x7c>
			break;
		}
		else{
			Local_enuErrorState = Local_aenuErrorState[iter];
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
    4b1c:	28 2f       	mov	r18, r24
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	ce 01       	movw	r24, r28
    4b22:	03 96       	adiw	r24, 0x03	; 3
    4b24:	fc 01       	movw	r30, r24
    4b26:	e2 0f       	add	r30, r18
    4b28:	f3 1f       	adc	r31, r19
    4b2a:	80 81       	ld	r24, Z
    4b2c:	8a 83       	std	Y+2, r24	; 0x02

	Local_aenuErrorState[0] = DIO_enuSetPinValue(HEX_DEC_EN1_GRP,HEX_DEC_EN1_PIN,DIO_LOW);

	Local_aenuErrorState[1] = DIO_enuSetPinValue(HEX_DEC_EN2_GRP,HEX_DEC_EN2_PIN,DIO_LOW);

	for(u8 iter = 0 ; iter < HEX_DEC_ERROR_STATE_STOP_DISPLAY_COND ; iter++){
    4b2e:	89 81       	ldd	r24, Y+1	; 0x01
    4b30:	8f 5f       	subi	r24, 0xFF	; 255
    4b32:	89 83       	std	Y+1, r24	; 0x01
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	82 30       	cpi	r24, 0x02	; 2
    4b38:	d0 f2       	brcs	.-76     	; 0x4aee <HexaDecoder_enuStopDisplay+0x30>
		else{
			Local_enuErrorState = Local_aenuErrorState[iter];
		}
	}

	return Local_enuErrorState;
    4b3a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4b3c:	0f 90       	pop	r0
    4b3e:	0f 90       	pop	r0
    4b40:	0f 90       	pop	r0
    4b42:	0f 90       	pop	r0
    4b44:	cf 91       	pop	r28
    4b46:	df 91       	pop	r29
    4b48:	08 95       	ret

00004b4a <Buzzer_enuInit>:
//my own lib
#include "Buzzer_priv.h"
#include "Buzzer_config.h"


ES_t Buzzer_enuInit(void){
    4b4a:	df 93       	push	r29
    4b4c:	cf 93       	push	r28
    4b4e:	cd b7       	in	r28, 0x3d	; 61
    4b50:	de b7       	in	r29, 0x3e	; 62

	return DIO_enuSetPinDirection(BUZZER_GRP,BUZZER_PIN,DIO_OUTPUT);
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	63 e0       	ldi	r22, 0x03	; 3
    4b56:	41 e0       	ldi	r20, 0x01	; 1
    4b58:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
}
    4b5c:	cf 91       	pop	r28
    4b5e:	df 91       	pop	r29
    4b60:	08 95       	ret

00004b62 <Buzzer_enuAlertActivator>:

ES_t Buzzer_enuAlertActivator(void){
    4b62:	df 93       	push	r29
    4b64:	cf 93       	push	r28
    4b66:	cd b7       	in	r28, 0x3d	; 61
    4b68:	de b7       	in	r29, 0x3e	; 62

	return DIO_enuSetPinValue(BUZZER_GRP,BUZZER_PIN,DIO_HIGH);
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	63 e0       	ldi	r22, 0x03	; 3
    4b6e:	41 e0       	ldi	r20, 0x01	; 1
    4b70:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
}
    4b74:	cf 91       	pop	r28
    4b76:	df 91       	pop	r29
    4b78:	08 95       	ret

00004b7a <Buzzer_enuSilenceDeactivation>:

ES_t Buzzer_enuSilenceDeactivation(void){
    4b7a:	df 93       	push	r29
    4b7c:	cf 93       	push	r28
    4b7e:	cd b7       	in	r28, 0x3d	; 61
    4b80:	de b7       	in	r29, 0x3e	; 62

	return DIO_enuSetPinValue(BUZZER_GRP,BUZZER_PIN,DIO_LOW);
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	63 e0       	ldi	r22, 0x03	; 3
    4b86:	40 e0       	ldi	r20, 0x00	; 0
    4b88:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>
}
    4b8c:	cf 91       	pop	r28
    4b8e:	df 91       	pop	r29
    4b90:	08 95       	ret

00004b92 <TrafficLight_enuInit>:

//my own
#include "../POV/POV_int.h"
#include "TrafficLight_priv.h"

ES_t TrafficLight_enuInit(void){
    4b92:	df 93       	push	r29
    4b94:	cf 93       	push	r28
    4b96:	0f 92       	push	r0
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	89 83       	std	Y+1, r24	; 0x01

	POV_enuInit();
    4ba0:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <POV_enuInit>
	Led_enuInit();
    4ba4:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <Led_enuInit>
	Switch_enuInit();
    4ba8:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <Switch_enuInit>

	return Local_enuErrorState;
    4bac:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bae:	0f 90       	pop	r0
    4bb0:	cf 91       	pop	r28
    4bb2:	df 91       	pop	r29
    4bb4:	08 95       	ret

00004bb6 <TrafficLight_enuTrafficON>:

ES_t TrafficLight_enuTrafficON(void){
    4bb6:	df 93       	push	r29
    4bb8:	cf 93       	push	r28
    4bba:	cd b7       	in	r28, 0x3d	; 61
    4bbc:	de b7       	in	r29, 0x3e	; 62
    4bbe:	28 97       	sbiw	r28, 0x08	; 8
    4bc0:	0f b6       	in	r0, 0x3f	; 63
    4bc2:	f8 94       	cli
    4bc4:	de bf       	out	0x3e, r29	; 62
    4bc6:	0f be       	out	0x3f, r0	; 63
    4bc8:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState = ES_NOK;
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	8e 83       	std	Y+6, r24	; 0x06


	//static u8 SLocal_u8Time = 15 ;
	u8 SLocal_u8TrafficTime = SLocal_u8Time ;
    4bce:	80 91 d2 02 	lds	r24, 0x02D2
    4bd2:	8d 83       	std	Y+5, r24	; 0x05

	for(u8 Local_u8TimePassed = 0 ; Local_u8TimePassed <= SLocal_u8TrafficTime ; Local_u8TimePassed++){
    4bd4:	1c 82       	std	Y+4, r1	; 0x04
    4bd6:	40 c0       	rjmp	.+128    	; 0x4c58 <TrafficLight_enuTrafficON+0xa2>

		for(u8 Local_u8Wait = 0 ; Local_u8Wait < 100 ; Local_u8Wait++){
    4bd8:	1b 82       	std	Y+3, r1	; 0x03
    4bda:	06 c0       	rjmp	.+12     	; 0x4be8 <TrafficLight_enuTrafficON+0x32>

			POV_enuDisplayNum(Local_u8TimePassed);
    4bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    4bde:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <POV_enuDisplayNum>
	//static u8 SLocal_u8Time = 15 ;
	u8 SLocal_u8TrafficTime = SLocal_u8Time ;

	for(u8 Local_u8TimePassed = 0 ; Local_u8TimePassed <= SLocal_u8TrafficTime ; Local_u8TimePassed++){

		for(u8 Local_u8Wait = 0 ; Local_u8Wait < 100 ; Local_u8Wait++){
    4be2:	8b 81       	ldd	r24, Y+3	; 0x03
    4be4:	8f 5f       	subi	r24, 0xFF	; 255
    4be6:	8b 83       	std	Y+3, r24	; 0x03
    4be8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bea:	84 36       	cpi	r24, 0x64	; 100
    4bec:	b8 f3       	brcs	.-18     	; 0x4bdc <TrafficLight_enuTrafficON+0x26>

			POV_enuDisplayNum(Local_u8TimePassed);
		}

		Led_enuLedTurnON(LED_GREEN_ID);
    4bee:	80 e0       	ldi	r24, 0x00	; 0
    4bf0:	0e 94 40 1b 	call	0x3680	; 0x3680 <Led_enuLedTurnON>

		if( Local_u8TimePassed >= (u8)(SLocal_u8TrafficTime - (u8)3) ){
    4bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf6:	98 2f       	mov	r25, r24
    4bf8:	93 50       	subi	r25, 0x03	; 3
    4bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    4bfc:	89 17       	cp	r24, r25
    4bfe:	18 f0       	brcs	.+6      	; 0x4c06 <TrafficLight_enuTrafficON+0x50>

			Led_enuLedTurnON(LED_YELLOW_ID);
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	0e 94 40 1b 	call	0x3680	; 0x3680 <Led_enuLedTurnON>
		}

		u8 Local_u8SwitchState;
		Switch_enuGetSwitchState(SWITCH_BUTTON_0,&Local_u8SwitchState);
    4c06:	9e 01       	movw	r18, r28
    4c08:	29 5f       	subi	r18, 0xF9	; 249
    4c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	b9 01       	movw	r22, r18
    4c10:	0e 94 98 1a 	call	0x3530	; 0x3530 <Switch_enuGetSwitchState>

		if( (SLocal_u8Time < TRAFFIC_LIGHT_MAX_TIME ) && (Local_u8SwitchState == SWITCH_ON) ){
    4c14:	80 91 d2 02 	lds	r24, 0x02D2
    4c18:	83 36       	cpi	r24, 0x63	; 99
    4c1a:	40 f4       	brcc	.+16     	; 0x4c2c <TrafficLight_enuTrafficON+0x76>
    4c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c1e:	81 30       	cpi	r24, 0x01	; 1
    4c20:	29 f4       	brne	.+10     	; 0x4c2c <TrafficLight_enuTrafficON+0x76>

			SLocal_u8Time++;
    4c22:	80 91 d2 02 	lds	r24, 0x02D2
    4c26:	8f 5f       	subi	r24, 0xFF	; 255
    4c28:	80 93 d2 02 	sts	0x02D2, r24
		}

		Switch_enuGetSwitchState(SWITCH_BUTTON_1,&Local_u8SwitchState);
    4c2c:	9e 01       	movw	r18, r28
    4c2e:	29 5f       	subi	r18, 0xF9	; 249
    4c30:	3f 4f       	sbci	r19, 0xFF	; 255
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	b9 01       	movw	r22, r18
    4c36:	0e 94 98 1a 	call	0x3530	; 0x3530 <Switch_enuGetSwitchState>

		if( (SLocal_u8Time > TRAFFIC_LIGHT_MIN_TIME ) && (Local_u8SwitchState == SWITCH_ON) ){
    4c3a:	80 91 d2 02 	lds	r24, 0x02D2
    4c3e:	80 31       	cpi	r24, 0x10	; 16
    4c40:	40 f0       	brcs	.+16     	; 0x4c52 <TrafficLight_enuTrafficON+0x9c>
    4c42:	8f 81       	ldd	r24, Y+7	; 0x07
    4c44:	81 30       	cpi	r24, 0x01	; 1
    4c46:	29 f4       	brne	.+10     	; 0x4c52 <TrafficLight_enuTrafficON+0x9c>

			SLocal_u8Time--;
    4c48:	80 91 d2 02 	lds	r24, 0x02D2
    4c4c:	81 50       	subi	r24, 0x01	; 1
    4c4e:	80 93 d2 02 	sts	0x02D2, r24


	//static u8 SLocal_u8Time = 15 ;
	u8 SLocal_u8TrafficTime = SLocal_u8Time ;

	for(u8 Local_u8TimePassed = 0 ; Local_u8TimePassed <= SLocal_u8TrafficTime ; Local_u8TimePassed++){
    4c52:	8c 81       	ldd	r24, Y+4	; 0x04
    4c54:	8f 5f       	subi	r24, 0xFF	; 255
    4c56:	8c 83       	std	Y+4, r24	; 0x04
    4c58:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5c:	89 17       	cp	r24, r25
    4c5e:	08 f0       	brcs	.+2      	; 0x4c62 <TrafficLight_enuTrafficON+0xac>
    4c60:	bb cf       	rjmp	.-138    	; 0x4bd8 <TrafficLight_enuTrafficON+0x22>
			SLocal_u8Time--;
		}

	}

	Led_enuLedTurnOFF(LED_GREEN_ID);
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>
	Led_enuLedTurnOFF(LED_YELLOW_ID);
    4c68:	82 e0       	ldi	r24, 0x02	; 2
    4c6a:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>

	for(u8 Local_u8TimePassed = 0 ; Local_u8TimePassed <= SLocal_u8TrafficTime ; Local_u8TimePassed++){
    4c6e:	1a 82       	std	Y+2, r1	; 0x02
    4c70:	40 c0       	rjmp	.+128    	; 0x4cf2 <TrafficLight_enuTrafficON+0x13c>

		for(u8 Local_u8Wait = 0 ; Local_u8Wait < 100 ; Local_u8Wait++){
    4c72:	19 82       	std	Y+1, r1	; 0x01
    4c74:	06 c0       	rjmp	.+12     	; 0x4c82 <TrafficLight_enuTrafficON+0xcc>

			POV_enuDisplayNum(Local_u8TimePassed);
    4c76:	8a 81       	ldd	r24, Y+2	; 0x02
    4c78:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <POV_enuDisplayNum>
	Led_enuLedTurnOFF(LED_GREEN_ID);
	Led_enuLedTurnOFF(LED_YELLOW_ID);

	for(u8 Local_u8TimePassed = 0 ; Local_u8TimePassed <= SLocal_u8TrafficTime ; Local_u8TimePassed++){

		for(u8 Local_u8Wait = 0 ; Local_u8Wait < 100 ; Local_u8Wait++){
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	8f 5f       	subi	r24, 0xFF	; 255
    4c80:	89 83       	std	Y+1, r24	; 0x01
    4c82:	89 81       	ldd	r24, Y+1	; 0x01
    4c84:	84 36       	cpi	r24, 0x64	; 100
    4c86:	b8 f3       	brcs	.-18     	; 0x4c76 <TrafficLight_enuTrafficON+0xc0>

			POV_enuDisplayNum(Local_u8TimePassed);
		}

		Led_enuLedTurnON(LED_RED_ID);
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	0e 94 40 1b 	call	0x3680	; 0x3680 <Led_enuLedTurnON>

		if( Local_u8TimePassed >= (u8)(SLocal_u8TrafficTime - (u8)3) ){
    4c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c90:	98 2f       	mov	r25, r24
    4c92:	93 50       	subi	r25, 0x03	; 3
    4c94:	8a 81       	ldd	r24, Y+2	; 0x02
    4c96:	89 17       	cp	r24, r25
    4c98:	18 f0       	brcs	.+6      	; 0x4ca0 <TrafficLight_enuTrafficON+0xea>

			Led_enuLedTurnON(LED_YELLOW_ID);
    4c9a:	82 e0       	ldi	r24, 0x02	; 2
    4c9c:	0e 94 40 1b 	call	0x3680	; 0x3680 <Led_enuLedTurnON>
		}

		u8 Local_u8SwitchState;
		Switch_enuGetSwitchState(SWITCH_BUTTON_0,&Local_u8SwitchState);
    4ca0:	9e 01       	movw	r18, r28
    4ca2:	28 5f       	subi	r18, 0xF8	; 248
    4ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
    4ca8:	b9 01       	movw	r22, r18
    4caa:	0e 94 98 1a 	call	0x3530	; 0x3530 <Switch_enuGetSwitchState>

		if( (SLocal_u8Time < TRAFFIC_LIGHT_MAX_TIME ) && (Local_u8SwitchState == SWITCH_ON) ){
    4cae:	80 91 d2 02 	lds	r24, 0x02D2
    4cb2:	83 36       	cpi	r24, 0x63	; 99
    4cb4:	40 f4       	brcc	.+16     	; 0x4cc6 <TrafficLight_enuTrafficON+0x110>
    4cb6:	88 85       	ldd	r24, Y+8	; 0x08
    4cb8:	81 30       	cpi	r24, 0x01	; 1
    4cba:	29 f4       	brne	.+10     	; 0x4cc6 <TrafficLight_enuTrafficON+0x110>

			SLocal_u8Time++;
    4cbc:	80 91 d2 02 	lds	r24, 0x02D2
    4cc0:	8f 5f       	subi	r24, 0xFF	; 255
    4cc2:	80 93 d2 02 	sts	0x02D2, r24
		}

		Switch_enuGetSwitchState(SWITCH_BUTTON_1,&Local_u8SwitchState);
    4cc6:	9e 01       	movw	r18, r28
    4cc8:	28 5f       	subi	r18, 0xF8	; 248
    4cca:	3f 4f       	sbci	r19, 0xFF	; 255
    4ccc:	81 e0       	ldi	r24, 0x01	; 1
    4cce:	b9 01       	movw	r22, r18
    4cd0:	0e 94 98 1a 	call	0x3530	; 0x3530 <Switch_enuGetSwitchState>

		if( (SLocal_u8Time > TRAFFIC_LIGHT_MIN_TIME ) && (Local_u8SwitchState == SWITCH_ON) ){
    4cd4:	80 91 d2 02 	lds	r24, 0x02D2
    4cd8:	80 31       	cpi	r24, 0x10	; 16
    4cda:	40 f0       	brcs	.+16     	; 0x4cec <TrafficLight_enuTrafficON+0x136>
    4cdc:	88 85       	ldd	r24, Y+8	; 0x08
    4cde:	81 30       	cpi	r24, 0x01	; 1
    4ce0:	29 f4       	brne	.+10     	; 0x4cec <TrafficLight_enuTrafficON+0x136>

			SLocal_u8Time--;
    4ce2:	80 91 d2 02 	lds	r24, 0x02D2
    4ce6:	81 50       	subi	r24, 0x01	; 1
    4ce8:	80 93 d2 02 	sts	0x02D2, r24
	}

	Led_enuLedTurnOFF(LED_GREEN_ID);
	Led_enuLedTurnOFF(LED_YELLOW_ID);

	for(u8 Local_u8TimePassed = 0 ; Local_u8TimePassed <= SLocal_u8TrafficTime ; Local_u8TimePassed++){
    4cec:	8a 81       	ldd	r24, Y+2	; 0x02
    4cee:	8f 5f       	subi	r24, 0xFF	; 255
    4cf0:	8a 83       	std	Y+2, r24	; 0x02
    4cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf6:	89 17       	cp	r24, r25
    4cf8:	08 f0       	brcs	.+2      	; 0x4cfc <TrafficLight_enuTrafficON+0x146>
    4cfa:	bb cf       	rjmp	.-138    	; 0x4c72 <TrafficLight_enuTrafficON+0xbc>
			SLocal_u8Time--;
		}

	}

	Led_enuLedTurnOFF(LED_RED_ID);
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>
	Led_enuLedTurnOFF(LED_YELLOW_ID);
    4d02:	82 e0       	ldi	r24, 0x02	; 2
    4d04:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>

	return Local_enuErrorState;
    4d08:	8e 81       	ldd	r24, Y+6	; 0x06

}
    4d0a:	28 96       	adiw	r28, 0x08	; 8
    4d0c:	0f b6       	in	r0, 0x3f	; 63
    4d0e:	f8 94       	cli
    4d10:	de bf       	out	0x3e, r29	; 62
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	cd bf       	out	0x3d, r28	; 61
    4d16:	cf 91       	pop	r28
    4d18:	df 91       	pop	r29
    4d1a:	08 95       	ret

00004d1c <TrafficLight_enuTrafficOFF>:

ES_t TrafficLight_enuTrafficOFF(void){
    4d1c:	df 93       	push	r29
    4d1e:	cf 93       	push	r28
    4d20:	0f 92       	push	r0
    4d22:	cd b7       	in	r28, 0x3d	; 61
    4d24:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	89 83       	std	Y+1, r24	; 0x01

	HexaDecoder_enuStopDisplay();
    4d2a:	0e 94 5f 25 	call	0x4abe	; 0x4abe <HexaDecoder_enuStopDisplay>

	return Local_enuErrorState;
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d30:	0f 90       	pop	r0
    4d32:	cf 91       	pop	r28
    4d34:	df 91       	pop	r29
    4d36:	08 95       	ret

00004d38 <TrafficLight_enuTrafficStatus>:

ES_t TrafficLight_enuTrafficStatus(u8 * Copy_pu8TrafficStatus){
    4d38:	df 93       	push	r29
    4d3a:	cf 93       	push	r28
    4d3c:	00 d0       	rcall	.+0      	; 0x4d3e <TrafficLight_enuTrafficStatus+0x6>
    4d3e:	0f 92       	push	r0
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62
    4d44:	9b 83       	std	Y+3, r25	; 0x03
    4d46:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	89 83       	std	Y+1, r24	; 0x01

	//u8 Local_u8TrafficSwitch = 2;

	if( Copy_pu8TrafficStatus != NULL){
    4d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d50:	00 97       	sbiw	r24, 0x00	; 0
    4d52:	41 f0       	breq	.+16     	; 0x4d64 <TrafficLight_enuTrafficStatus+0x2c>

		Switch_enuGetSwitchState(SWITHC_BUTTON_2,Copy_pu8TrafficStatus);
    4d54:	2a 81       	ldd	r18, Y+2	; 0x02
    4d56:	3b 81       	ldd	r19, Y+3	; 0x03
    4d58:	82 e0       	ldi	r24, 0x02	; 2
    4d5a:	b9 01       	movw	r22, r18
    4d5c:	0e 94 98 1a 	call	0x3530	; 0x3530 <Switch_enuGetSwitchState>

		Local_enuErrorState = ES_OK;
    4d60:	19 82       	std	Y+1, r1	; 0x01
    4d62:	02 c0       	rjmp	.+4      	; 0x4d68 <TrafficLight_enuTrafficStatus+0x30>

	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    4d64:	83 e0       	ldi	r24, 0x03	; 3
    4d66:	89 83       	std	Y+1, r24	; 0x01
	}
	return ES_NOK;
    4d68:	81 e0       	ldi	r24, 0x01	; 1
}
    4d6a:	0f 90       	pop	r0
    4d6c:	0f 90       	pop	r0
    4d6e:	0f 90       	pop	r0
    4d70:	cf 91       	pop	r28
    4d72:	df 91       	pop	r29
    4d74:	08 95       	ret

00004d76 <POV_enuInit>:
//my own
#include "POV_priv.h"
#include "POV_config.h"


ES_t POV_enuInit(void){
    4d76:	df 93       	push	r29
    4d78:	cf 93       	push	r28
    4d7a:	cd b7       	in	r28, 0x3d	; 61
    4d7c:	de b7       	in	r29, 0x3e	; 62

	return HexaDecoder_enuInit();
    4d7e:	0e 94 44 24 	call	0x4888	; 0x4888 <HexaDecoder_enuInit>
}
    4d82:	cf 91       	pop	r28
    4d84:	df 91       	pop	r29
    4d86:	08 95       	ret

00004d88 <POV_enuDisplayNum>:

ES_t POV_enuDisplayNum(u8 Copy_u8Num){
    4d88:	df 93       	push	r29
    4d8a:	cf 93       	push	r28
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
    4d90:	6e 97       	sbiw	r28, 0x1e	; 30
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	f8 94       	cli
    4d96:	de bf       	out	0x3e, r29	; 62
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	cd bf       	out	0x3d, r28	; 61
    4d9c:	8e 8f       	std	Y+30, r24	; 0x1e

	ES_t Local_enuErrorState = ES_NOK;
    4d9e:	81 e0       	ldi	r24, 0x01	; 1
    4da0:	8d 8f       	std	Y+29, r24	; 0x1d

	if( Copy_u8Num < 100 ){
    4da2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4da4:	84 36       	cpi	r24, 0x64	; 100
    4da6:	08 f0       	brcs	.+2      	; 0x4daa <POV_enuDisplayNum+0x22>
    4da8:	06 c1       	rjmp	.+524    	; 0x4fb6 <POV_enuDisplayNum+0x22e>

		HexaDecoder_enuDisableSSG(HEX_DEC_SSG_LEFT);
    4daa:	82 e3       	ldi	r24, 0x32	; 50
    4dac:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <HexaDecoder_enuDisableSSG>
		HexaDecoder_enuDisableSSG(HEX_DEC_SSG_RIGHT);
    4db0:	84 e6       	ldi	r24, 0x64	; 100
    4db2:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <HexaDecoder_enuDisableSSG>

		HexaDecoder_enuDisplayNum(Copy_u8Num / 10);
    4db6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4db8:	9a e0       	ldi	r25, 0x0A	; 10
    4dba:	69 2f       	mov	r22, r25
    4dbc:	0e 94 ec 3a 	call	0x75d8	; 0x75d8 <__udivmodqi4>
    4dc0:	0e 94 ae 24 	call	0x495c	; 0x495c <HexaDecoder_enuDisplayNum>
		HexaDecoder_enuEnableSSG(HEX_DEC_SSG_LEFT);
    4dc4:	82 e3       	ldi	r24, 0x32	; 50
    4dc6:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <HexaDecoder_enuEnableSSG>
    4dca:	80 e0       	ldi	r24, 0x00	; 0
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	a0 e2       	ldi	r26, 0x20	; 32
    4dd0:	b1 e4       	ldi	r27, 0x41	; 65
    4dd2:	89 8f       	std	Y+25, r24	; 0x19
    4dd4:	9a 8f       	std	Y+26, r25	; 0x1a
    4dd6:	ab 8f       	std	Y+27, r26	; 0x1b
    4dd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dda:	69 8d       	ldd	r22, Y+25	; 0x19
    4ddc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4de0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4de2:	20 e0       	ldi	r18, 0x00	; 0
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    4de6:	4a e7       	ldi	r20, 0x7A	; 122
    4de8:	55 e4       	ldi	r21, 0x45	; 69
    4dea:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    4dee:	dc 01       	movw	r26, r24
    4df0:	cb 01       	movw	r24, r22
    4df2:	8d 8b       	std	Y+21, r24	; 0x15
    4df4:	9e 8b       	std	Y+22, r25	; 0x16
    4df6:	af 8b       	std	Y+23, r26	; 0x17
    4df8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    4dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    4dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    4e00:	98 8d       	ldd	r25, Y+24	; 0x18
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	40 e8       	ldi	r20, 0x80	; 128
    4e08:	5f e3       	ldi	r21, 0x3F	; 63
    4e0a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    4e0e:	88 23       	and	r24, r24
    4e10:	2c f4       	brge	.+10     	; 0x4e1c <POV_enuDisplayNum+0x94>
		__ticks = 1;
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	9c 8b       	std	Y+20, r25	; 0x14
    4e18:	8b 8b       	std	Y+19, r24	; 0x13
    4e1a:	3f c0       	rjmp	.+126    	; 0x4e9a <POV_enuDisplayNum+0x112>
	else if (__tmp > 65535)
    4e1c:	6d 89       	ldd	r22, Y+21	; 0x15
    4e1e:	7e 89       	ldd	r23, Y+22	; 0x16
    4e20:	8f 89       	ldd	r24, Y+23	; 0x17
    4e22:	98 8d       	ldd	r25, Y+24	; 0x18
    4e24:	20 e0       	ldi	r18, 0x00	; 0
    4e26:	3f ef       	ldi	r19, 0xFF	; 255
    4e28:	4f e7       	ldi	r20, 0x7F	; 127
    4e2a:	57 e4       	ldi	r21, 0x47	; 71
    4e2c:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    4e30:	18 16       	cp	r1, r24
    4e32:	4c f5       	brge	.+82     	; 0x4e86 <POV_enuDisplayNum+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e34:	69 8d       	ldd	r22, Y+25	; 0x19
    4e36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e3c:	20 e0       	ldi	r18, 0x00	; 0
    4e3e:	30 e0       	ldi	r19, 0x00	; 0
    4e40:	40 e2       	ldi	r20, 0x20	; 32
    4e42:	51 e4       	ldi	r21, 0x41	; 65
    4e44:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    4e48:	dc 01       	movw	r26, r24
    4e4a:	cb 01       	movw	r24, r22
    4e4c:	bc 01       	movw	r22, r24
    4e4e:	cd 01       	movw	r24, r26
    4e50:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4e54:	dc 01       	movw	r26, r24
    4e56:	cb 01       	movw	r24, r22
    4e58:	9c 8b       	std	Y+20, r25	; 0x14
    4e5a:	8b 8b       	std	Y+19, r24	; 0x13
    4e5c:	0f c0       	rjmp	.+30     	; 0x4e7c <POV_enuDisplayNum+0xf4>
    4e5e:	80 e9       	ldi	r24, 0x90	; 144
    4e60:	91 e0       	ldi	r25, 0x01	; 1
    4e62:	9a 8b       	std	Y+18, r25	; 0x12
    4e64:	89 8b       	std	Y+17, r24	; 0x11
    4e66:	89 89       	ldd	r24, Y+17	; 0x11
    4e68:	9a 89       	ldd	r25, Y+18	; 0x12
    4e6a:	01 97       	sbiw	r24, 0x01	; 1
    4e6c:	f1 f7       	brne	.-4      	; 0x4e6a <POV_enuDisplayNum+0xe2>
    4e6e:	9a 8b       	std	Y+18, r25	; 0x12
    4e70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e72:	8b 89       	ldd	r24, Y+19	; 0x13
    4e74:	9c 89       	ldd	r25, Y+20	; 0x14
    4e76:	01 97       	sbiw	r24, 0x01	; 1
    4e78:	9c 8b       	std	Y+20, r25	; 0x14
    4e7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    4e80:	00 97       	sbiw	r24, 0x00	; 0
    4e82:	69 f7       	brne	.-38     	; 0x4e5e <POV_enuDisplayNum+0xd6>
    4e84:	14 c0       	rjmp	.+40     	; 0x4eae <POV_enuDisplayNum+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e86:	6d 89       	ldd	r22, Y+21	; 0x15
    4e88:	7e 89       	ldd	r23, Y+22	; 0x16
    4e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e8e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4e92:	dc 01       	movw	r26, r24
    4e94:	cb 01       	movw	r24, r22
    4e96:	9c 8b       	std	Y+20, r25	; 0x14
    4e98:	8b 8b       	std	Y+19, r24	; 0x13
    4e9a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e9c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e9e:	98 8b       	std	Y+16, r25	; 0x10
    4ea0:	8f 87       	std	Y+15, r24	; 0x0f
    4ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ea4:	98 89       	ldd	r25, Y+16	; 0x10
    4ea6:	01 97       	sbiw	r24, 0x01	; 1
    4ea8:	f1 f7       	brne	.-4      	; 0x4ea6 <POV_enuDisplayNum+0x11e>
    4eaa:	98 8b       	std	Y+16, r25	; 0x10
    4eac:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);

		HexaDecoder_enuDisableSSG(HEX_DEC_SSG_LEFT);
    4eae:	82 e3       	ldi	r24, 0x32	; 50
    4eb0:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <HexaDecoder_enuDisableSSG>
		HexaDecoder_enuDisplayNum(Copy_u8Num % 10);
    4eb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4eb6:	9a e0       	ldi	r25, 0x0A	; 10
    4eb8:	69 2f       	mov	r22, r25
    4eba:	0e 94 ec 3a 	call	0x75d8	; 0x75d8 <__udivmodqi4>
    4ebe:	89 2f       	mov	r24, r25
    4ec0:	0e 94 ae 24 	call	0x495c	; 0x495c <HexaDecoder_enuDisplayNum>
		HexaDecoder_enuEnableSSG(HEX_DEC_SSG_RIGHT);
    4ec4:	84 e6       	ldi	r24, 0x64	; 100
    4ec6:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <HexaDecoder_enuEnableSSG>
    4eca:	80 e0       	ldi	r24, 0x00	; 0
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	a0 e2       	ldi	r26, 0x20	; 32
    4ed0:	b1 e4       	ldi	r27, 0x41	; 65
    4ed2:	8b 87       	std	Y+11, r24	; 0x0b
    4ed4:	9c 87       	std	Y+12, r25	; 0x0c
    4ed6:	ad 87       	std	Y+13, r26	; 0x0d
    4ed8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    4edc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ee2:	20 e0       	ldi	r18, 0x00	; 0
    4ee4:	30 e0       	ldi	r19, 0x00	; 0
    4ee6:	4a e7       	ldi	r20, 0x7A	; 122
    4ee8:	55 e4       	ldi	r21, 0x45	; 69
    4eea:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    4eee:	dc 01       	movw	r26, r24
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	8f 83       	std	Y+7, r24	; 0x07
    4ef4:	98 87       	std	Y+8, r25	; 0x08
    4ef6:	a9 87       	std	Y+9, r26	; 0x09
    4ef8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4efa:	6f 81       	ldd	r22, Y+7	; 0x07
    4efc:	78 85       	ldd	r23, Y+8	; 0x08
    4efe:	89 85       	ldd	r24, Y+9	; 0x09
    4f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f02:	20 e0       	ldi	r18, 0x00	; 0
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	40 e8       	ldi	r20, 0x80	; 128
    4f08:	5f e3       	ldi	r21, 0x3F	; 63
    4f0a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    4f0e:	88 23       	and	r24, r24
    4f10:	2c f4       	brge	.+10     	; 0x4f1c <POV_enuDisplayNum+0x194>
		__ticks = 1;
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	9e 83       	std	Y+6, r25	; 0x06
    4f18:	8d 83       	std	Y+5, r24	; 0x05
    4f1a:	3f c0       	rjmp	.+126    	; 0x4f9a <POV_enuDisplayNum+0x212>
	else if (__tmp > 65535)
    4f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f1e:	78 85       	ldd	r23, Y+8	; 0x08
    4f20:	89 85       	ldd	r24, Y+9	; 0x09
    4f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	3f ef       	ldi	r19, 0xFF	; 255
    4f28:	4f e7       	ldi	r20, 0x7F	; 127
    4f2a:	57 e4       	ldi	r21, 0x47	; 71
    4f2c:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    4f30:	18 16       	cp	r1, r24
    4f32:	4c f5       	brge	.+82     	; 0x4f86 <POV_enuDisplayNum+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	40 e2       	ldi	r20, 0x20	; 32
    4f42:	51 e4       	ldi	r21, 0x41	; 65
    4f44:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	bc 01       	movw	r22, r24
    4f4e:	cd 01       	movw	r24, r26
    4f50:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4f54:	dc 01       	movw	r26, r24
    4f56:	cb 01       	movw	r24, r22
    4f58:	9e 83       	std	Y+6, r25	; 0x06
    4f5a:	8d 83       	std	Y+5, r24	; 0x05
    4f5c:	0f c0       	rjmp	.+30     	; 0x4f7c <POV_enuDisplayNum+0x1f4>
    4f5e:	80 e9       	ldi	r24, 0x90	; 144
    4f60:	91 e0       	ldi	r25, 0x01	; 1
    4f62:	9c 83       	std	Y+4, r25	; 0x04
    4f64:	8b 83       	std	Y+3, r24	; 0x03
    4f66:	8b 81       	ldd	r24, Y+3	; 0x03
    4f68:	9c 81       	ldd	r25, Y+4	; 0x04
    4f6a:	01 97       	sbiw	r24, 0x01	; 1
    4f6c:	f1 f7       	brne	.-4      	; 0x4f6a <POV_enuDisplayNum+0x1e2>
    4f6e:	9c 83       	std	Y+4, r25	; 0x04
    4f70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f72:	8d 81       	ldd	r24, Y+5	; 0x05
    4f74:	9e 81       	ldd	r25, Y+6	; 0x06
    4f76:	01 97       	sbiw	r24, 0x01	; 1
    4f78:	9e 83       	std	Y+6, r25	; 0x06
    4f7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f80:	00 97       	sbiw	r24, 0x00	; 0
    4f82:	69 f7       	brne	.-38     	; 0x4f5e <POV_enuDisplayNum+0x1d6>
    4f84:	14 c0       	rjmp	.+40     	; 0x4fae <POV_enuDisplayNum+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f86:	6f 81       	ldd	r22, Y+7	; 0x07
    4f88:	78 85       	ldd	r23, Y+8	; 0x08
    4f8a:	89 85       	ldd	r24, Y+9	; 0x09
    4f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f8e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	9e 83       	std	Y+6, r25	; 0x06
    4f98:	8d 83       	std	Y+5, r24	; 0x05
    4f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f9e:	9a 83       	std	Y+2, r25	; 0x02
    4fa0:	89 83       	std	Y+1, r24	; 0x01
    4fa2:	89 81       	ldd	r24, Y+1	; 0x01
    4fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa6:	01 97       	sbiw	r24, 0x01	; 1
    4fa8:	f1 f7       	brne	.-4      	; 0x4fa6 <POV_enuDisplayNum+0x21e>
    4faa:	9a 83       	std	Y+2, r25	; 0x02
    4fac:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

		HexaDecoder_enuStopDisplay();
    4fae:	0e 94 5f 25 	call	0x4abe	; 0x4abe <HexaDecoder_enuStopDisplay>

		Local_enuErrorState = ES_OK;
    4fb2:	1d 8e       	std	Y+29, r1	; 0x1d
    4fb4:	02 c0       	rjmp	.+4      	; 0x4fba <POV_enuDisplayNum+0x232>

	}
	else{

		Local_enuErrorState = ES_OUT_OF_RANGE;
    4fb6:	82 e0       	ldi	r24, 0x02	; 2
    4fb8:	8d 8f       	std	Y+29, r24	; 0x1d
	}

	return Local_enuErrorState;
    4fba:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4fbc:	6e 96       	adiw	r28, 0x1e	; 30
    4fbe:	0f b6       	in	r0, 0x3f	; 63
    4fc0:	f8 94       	cli
    4fc2:	de bf       	out	0x3e, r29	; 62
    4fc4:	0f be       	out	0x3f, r0	; 63
    4fc6:	cd bf       	out	0x3d, r28	; 61
    4fc8:	cf 91       	pop	r28
    4fca:	df 91       	pop	r29
    4fcc:	08 95       	ret

00004fce <LoginSystem_enuInit>:

// owm
#include "LoginSystem_config.h"
#include "LoginSystem_priv.h"

ES_t LoginSystem_enuInit(void){
    4fce:	df 93       	push	r29
    4fd0:	cf 93       	push	r28
    4fd2:	00 d0       	rcall	.+0      	; 0x4fd4 <LoginSystem_enuInit+0x6>
    4fd4:	cd b7       	in	r28, 0x3d	; 61
    4fd6:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    4fd8:	81 e0       	ldi	r24, 0x01	; 1
    4fda:	8a 83       	std	Y+2, r24	; 0x02

	Lcd_enuInit();
    4fdc:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <Lcd_enuInit>
	Led_enuInit();
    4fe0:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <Led_enuInit>
	Keypad_enuInit();
    4fe4:	0e 94 18 22 	call	0x4430	; 0x4430 <Keypad_enuInit>
	Buzzer_enuInit();
    4fe8:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <Buzzer_enuInit>
	ADC_enuInit();
    4fec:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <ADC_enuInit>
	Lcd_enuSendCommand(LCD_CURSOR_OFF);
    4ff0:	8c e0       	ldi	r24, 0x0C	; 12
    4ff2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

	DIO_enuSetPinDirection(DIO_GROUP_A,DIO_PIN_1,DIO_INPUT);
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	61 e0       	ldi	r22, 0x01	; 1
    4ffa:	40 e0       	ldi	r20, 0x00	; 0
    4ffc:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_GROUP_A,DIO_PIN_1,DIO_FLOAT);
    5000:	80 e0       	ldi	r24, 0x00	; 0
    5002:	61 e0       	ldi	r22, 0x01	; 1
    5004:	40 e0       	ldi	r20, 0x00	; 0
    5006:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <DIO_enuSetPinValue>

	ADCChannels_t Local_u8ADCChannels = ADC1;
    500a:	81 e0       	ldi	r24, 0x01	; 1
    500c:	89 83       	std	Y+1, r24	; 0x01

	ADC_enuSetADCChannel(ADC1);
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	0e 94 55 18 	call	0x30aa	; 0x30aa <ADC_enuSetADCChannel>
	ADC_enuClearTriggerSource();
    5014:	0e 94 1f 19 	call	0x323e	; 0x323e <ADC_enuClearTriggerSource>
	ADC_enuSetTriggerSource(ADC_SINGLE_CONVERSION);
    5018:	88 e0       	ldi	r24, 0x08	; 8
    501a:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <ADC_enuSetTriggerSource>
	ADC_enuSetIterruptMode(ADC1,ADC_POLLING);
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	60 e0       	ldi	r22, 0x00	; 0
    5022:	0e 94 6e 19 	call	0x32dc	; 0x32dc <ADC_enuSetIterruptMode>


	//enuSendDataAtCursorLocation("Omar",1,1);

	return Local_enuErrorState;
    5026:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5028:	0f 90       	pop	r0
    502a:	0f 90       	pop	r0
    502c:	cf 91       	pop	r28
    502e:	df 91       	pop	r29
    5030:	08 95       	ret

00005032 <LoginSystem_enuWelcomePage>:

ES_t LoginSystem_enuWelcomePage(void){
    5032:	df 93       	push	r29
    5034:	cf 93       	push	r28
    5036:	cd b7       	in	r28, 0x3d	; 61
    5038:	de b7       	in	r29, 0x3e	; 62
    503a:	2f 97       	sbiw	r28, 0x0f	; 15
    503c:	0f b6       	in	r0, 0x3f	; 63
    503e:	f8 94       	cli
    5040:	de bf       	out	0x3e, r29	; 62
    5042:	0f be       	out	0x3f, r0	; 63
    5044:	cd bf       	out	0x3d, r28	; 61


	ES_t Local_enuErrorState = ES_NOK;
    5046:	81 e0       	ldi	r24, 0x01	; 1
    5048:	8f 87       	std	Y+15, r24	; 0x0f

	Lcd_enuSendCommand(LCD_CURSOR_OFF);
    504a:	8c e0       	ldi	r24, 0x0C	; 12
    504c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

	enuSendDataAtCursorLocation("Welcome :)",LCD_ROW_1,LCD_COLUMN_4);
    5050:	80 e6       	ldi	r24, 0x60	; 96
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	61 e0       	ldi	r22, 0x01	; 1
    5056:	44 e0       	ldi	r20, 0x04	; 4
    5058:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>

	//Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_4);
	//Lcd_enuSendString("Welcome :)");

	enuSendDataAtCursorLocation("Loading......",LCD_ROW_2,LCD_COLUMN_4);
    505c:	8b e6       	ldi	r24, 0x6B	; 107
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	62 e0       	ldi	r22, 0x02	; 2
    5062:	44 e0       	ldi	r20, 0x04	; 4
    5064:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
    5068:	80 e0       	ldi	r24, 0x00	; 0
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	aa e7       	ldi	r26, 0x7A	; 122
    506e:	b4 e4       	ldi	r27, 0x44	; 68
    5070:	8b 87       	std	Y+11, r24	; 0x0b
    5072:	9c 87       	std	Y+12, r25	; 0x0c
    5074:	ad 87       	std	Y+13, r26	; 0x0d
    5076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5078:	6b 85       	ldd	r22, Y+11	; 0x0b
    507a:	7c 85       	ldd	r23, Y+12	; 0x0c
    507c:	8d 85       	ldd	r24, Y+13	; 0x0d
    507e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	4a e7       	ldi	r20, 0x7A	; 122
    5086:	55 e4       	ldi	r21, 0x45	; 69
    5088:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    508c:	dc 01       	movw	r26, r24
    508e:	cb 01       	movw	r24, r22
    5090:	8f 83       	std	Y+7, r24	; 0x07
    5092:	98 87       	std	Y+8, r25	; 0x08
    5094:	a9 87       	std	Y+9, r26	; 0x09
    5096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5098:	6f 81       	ldd	r22, Y+7	; 0x07
    509a:	78 85       	ldd	r23, Y+8	; 0x08
    509c:	89 85       	ldd	r24, Y+9	; 0x09
    509e:	9a 85       	ldd	r25, Y+10	; 0x0a
    50a0:	20 e0       	ldi	r18, 0x00	; 0
    50a2:	30 e0       	ldi	r19, 0x00	; 0
    50a4:	40 e8       	ldi	r20, 0x80	; 128
    50a6:	5f e3       	ldi	r21, 0x3F	; 63
    50a8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    50ac:	88 23       	and	r24, r24
    50ae:	2c f4       	brge	.+10     	; 0x50ba <LoginSystem_enuWelcomePage+0x88>
		__ticks = 1;
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	9e 83       	std	Y+6, r25	; 0x06
    50b6:	8d 83       	std	Y+5, r24	; 0x05
    50b8:	3f c0       	rjmp	.+126    	; 0x5138 <LoginSystem_enuWelcomePage+0x106>
	else if (__tmp > 65535)
    50ba:	6f 81       	ldd	r22, Y+7	; 0x07
    50bc:	78 85       	ldd	r23, Y+8	; 0x08
    50be:	89 85       	ldd	r24, Y+9	; 0x09
    50c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    50c2:	20 e0       	ldi	r18, 0x00	; 0
    50c4:	3f ef       	ldi	r19, 0xFF	; 255
    50c6:	4f e7       	ldi	r20, 0x7F	; 127
    50c8:	57 e4       	ldi	r21, 0x47	; 71
    50ca:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    50ce:	18 16       	cp	r1, r24
    50d0:	4c f5       	brge	.+82     	; 0x5124 <LoginSystem_enuWelcomePage+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    50d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    50d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50da:	20 e0       	ldi	r18, 0x00	; 0
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	40 e2       	ldi	r20, 0x20	; 32
    50e0:	51 e4       	ldi	r21, 0x41	; 65
    50e2:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    50e6:	dc 01       	movw	r26, r24
    50e8:	cb 01       	movw	r24, r22
    50ea:	bc 01       	movw	r22, r24
    50ec:	cd 01       	movw	r24, r26
    50ee:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    50f2:	dc 01       	movw	r26, r24
    50f4:	cb 01       	movw	r24, r22
    50f6:	9e 83       	std	Y+6, r25	; 0x06
    50f8:	8d 83       	std	Y+5, r24	; 0x05
    50fa:	0f c0       	rjmp	.+30     	; 0x511a <LoginSystem_enuWelcomePage+0xe8>
    50fc:	80 e9       	ldi	r24, 0x90	; 144
    50fe:	91 e0       	ldi	r25, 0x01	; 1
    5100:	9c 83       	std	Y+4, r25	; 0x04
    5102:	8b 83       	std	Y+3, r24	; 0x03
    5104:	8b 81       	ldd	r24, Y+3	; 0x03
    5106:	9c 81       	ldd	r25, Y+4	; 0x04
    5108:	01 97       	sbiw	r24, 0x01	; 1
    510a:	f1 f7       	brne	.-4      	; 0x5108 <LoginSystem_enuWelcomePage+0xd6>
    510c:	9c 83       	std	Y+4, r25	; 0x04
    510e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5110:	8d 81       	ldd	r24, Y+5	; 0x05
    5112:	9e 81       	ldd	r25, Y+6	; 0x06
    5114:	01 97       	sbiw	r24, 0x01	; 1
    5116:	9e 83       	std	Y+6, r25	; 0x06
    5118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    511a:	8d 81       	ldd	r24, Y+5	; 0x05
    511c:	9e 81       	ldd	r25, Y+6	; 0x06
    511e:	00 97       	sbiw	r24, 0x00	; 0
    5120:	69 f7       	brne	.-38     	; 0x50fc <LoginSystem_enuWelcomePage+0xca>
    5122:	14 c0       	rjmp	.+40     	; 0x514c <LoginSystem_enuWelcomePage+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5124:	6f 81       	ldd	r22, Y+7	; 0x07
    5126:	78 85       	ldd	r23, Y+8	; 0x08
    5128:	89 85       	ldd	r24, Y+9	; 0x09
    512a:	9a 85       	ldd	r25, Y+10	; 0x0a
    512c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5130:	dc 01       	movw	r26, r24
    5132:	cb 01       	movw	r24, r22
    5134:	9e 83       	std	Y+6, r25	; 0x06
    5136:	8d 83       	std	Y+5, r24	; 0x05
    5138:	8d 81       	ldd	r24, Y+5	; 0x05
    513a:	9e 81       	ldd	r25, Y+6	; 0x06
    513c:	9a 83       	std	Y+2, r25	; 0x02
    513e:	89 83       	std	Y+1, r24	; 0x01
    5140:	89 81       	ldd	r24, Y+1	; 0x01
    5142:	9a 81       	ldd	r25, Y+2	; 0x02
    5144:	01 97       	sbiw	r24, 0x01	; 1
    5146:	f1 f7       	brne	.-4      	; 0x5144 <LoginSystem_enuWelcomePage+0x112>
    5148:	9a 83       	std	Y+2, r25	; 0x02
    514a:	89 83       	std	Y+1, r24	; 0x01
	//Lcd_enuSetCursor(LCD_ROW_2,LCD_COLUMN_4);
	//Lcd_enuSendString("Loading......");

	_delay_ms(1000);

	Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>


	return Local_enuErrorState;
    5152:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    5154:	2f 96       	adiw	r28, 0x0f	; 15
    5156:	0f b6       	in	r0, 0x3f	; 63
    5158:	f8 94       	cli
    515a:	de bf       	out	0x3e, r29	; 62
    515c:	0f be       	out	0x3f, r0	; 63
    515e:	cd bf       	out	0x3d, r28	; 61
    5160:	cf 91       	pop	r28
    5162:	df 91       	pop	r29
    5164:	08 95       	ret

00005166 <LoginSystem_enuEnterPassPage>:

ES_t LoginSystem_enuEnterPassPage(BOOL * Copy_bPasswordCheck){
    5166:	df 93       	push	r29
    5168:	cf 93       	push	r28
    516a:	cd b7       	in	r28, 0x3d	; 61
    516c:	de b7       	in	r29, 0x3e	; 62
    516e:	c6 55       	subi	r28, 0x56	; 86
    5170:	d0 40       	sbci	r29, 0x00	; 0
    5172:	0f b6       	in	r0, 0x3f	; 63
    5174:	f8 94       	cli
    5176:	de bf       	out	0x3e, r29	; 62
    5178:	0f be       	out	0x3f, r0	; 63
    517a:	cd bf       	out	0x3d, r28	; 61
    517c:	fe 01       	movw	r30, r28
    517e:	e0 5b       	subi	r30, 0xB0	; 176
    5180:	ff 4f       	sbci	r31, 0xFF	; 255
    5182:	91 83       	std	Z+1, r25	; 0x01
    5184:	80 83       	st	Z, r24

	ES_t Local_enuErrorState = ES_NOK;
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	8c af       	std	Y+60, r24	; 0x3c

	enuSendDataAtCursorLocation("Enter Password : ",LCD_ROW_1,LCD_COLUMN_1);
    518a:	89 e7       	ldi	r24, 0x79	; 121
    518c:	90 e0       	ldi	r25, 0x00	; 0
    518e:	61 e0       	ldi	r22, 0x01	; 1
    5190:	41 e0       	ldi	r20, 0x01	; 1
    5192:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
	//Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_1);
	//Lcd_enuSendString("Password : ");
	Lcd_enuSetCursor(LCD_ROW_2,LCD_COLUMN_1);
    5196:	82 e0       	ldi	r24, 0x02	; 2
    5198:	61 e0       	ldi	r22, 0x01	; 1
    519a:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>

	u8 Local_au8EnteredPassword[10] = {'\0'};
    519e:	8a e0       	ldi	r24, 0x0A	; 10
    51a0:	fe 01       	movw	r30, r28
    51a2:	fd 96       	adiw	r30, 0x3d	; 61
    51a4:	df 01       	movw	r26, r30
    51a6:	98 2f       	mov	r25, r24
    51a8:	1d 92       	st	X+, r1
    51aa:	9a 95       	dec	r25
    51ac:	e9 f7       	brne	.-6      	; 0x51a8 <LoginSystem_enuEnterPassPage+0x42>
	u8 Local_u8Iter = 0;
    51ae:	1b ae       	std	Y+59, r1	; 0x3b
	u8 Local_u8TrialCounter = 0;
    51b0:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Local_u8KeypadValue;

	if( Copy_bPasswordCheck != NULL){
    51b2:	fe 01       	movw	r30, r28
    51b4:	e0 5b       	subi	r30, 0xB0	; 176
    51b6:	ff 4f       	sbci	r31, 0xFF	; 255
    51b8:	80 81       	ld	r24, Z
    51ba:	91 81       	ldd	r25, Z+1	; 0x01
    51bc:	00 97       	sbiw	r24, 0x00	; 0
    51be:	09 f4       	brne	.+2      	; 0x51c2 <LoginSystem_enuEnterPassPage+0x5c>
    51c0:	e0 c2       	rjmp	.+1472   	; 0x5782 <LoginSystem_enuEnterPassPage+0x61c>

		while(1){

			if(Local_u8TrialCounter < LOGINSYSTEM_NUM_OF_TRIALS){
    51c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    51c4:	83 30       	cpi	r24, 0x03	; 3
    51c6:	08 f0       	brcs	.+2      	; 0x51ca <LoginSystem_enuEnterPassPage+0x64>
    51c8:	52 c2       	rjmp	.+1188   	; 0x566e <LoginSystem_enuEnterPassPage+0x508>


				Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    51ca:	ce 01       	movw	r24, r28
    51cc:	89 5b       	subi	r24, 0xB9	; 185
    51ce:	9f 4f       	sbci	r25, 0xFF	; 255
    51d0:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>

				if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    51d4:	fe 01       	movw	r30, r28
    51d6:	e9 5b       	subi	r30, 0xB9	; 185
    51d8:	ff 4f       	sbci	r31, 0xFF	; 255
    51da:	80 81       	ld	r24, Z
    51dc:	8f 3f       	cpi	r24, 0xFF	; 255
    51de:	89 f3       	breq	.-30     	; 0x51c2 <LoginSystem_enuEnterPassPage+0x5c>

					if(Local_u8Iter < LOGINSYSTEM_LENGTH_OF_PASSWORD){
    51e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    51e2:	8a 30       	cpi	r24, 0x0A	; 10
    51e4:	08 f0       	brcs	.+2      	; 0x51e8 <LoginSystem_enuEnterPassPage+0x82>
    51e6:	a0 c1       	rjmp	.+832    	; 0x5528 <LoginSystem_enuEnterPassPage+0x3c2>

						if(Local_u8KeypadValue == LOGINSYSTEM_ENTER_KEY){
    51e8:	fe 01       	movw	r30, r28
    51ea:	e9 5b       	subi	r30, 0xB9	; 185
    51ec:	ff 4f       	sbci	r31, 0xFF	; 255
    51ee:	80 81       	ld	r24, Z
    51f0:	85 34       	cpi	r24, 0x45	; 69
    51f2:	09 f0       	breq	.+2      	; 0x51f6 <LoginSystem_enuEnterPassPage+0x90>
    51f4:	85 c1       	rjmp	.+778    	; 0x5500 <LoginSystem_enuEnterPassPage+0x39a>

							u8 Local_u8SystemPassword[]= LOGINSTSYTEM_PASSWORD;
    51f6:	ce 01       	movw	r24, r28
    51f8:	88 5b       	subi	r24, 0xB8	; 184
    51fa:	9f 4f       	sbci	r25, 0xFF	; 255
    51fc:	64 96       	adiw	r28, 0x14	; 20
    51fe:	9f af       	std	Y+63, r25	; 0x3f
    5200:	8e af       	std	Y+62, r24	; 0x3e
    5202:	64 97       	sbiw	r28, 0x14	; 20
    5204:	ae ed       	ldi	r26, 0xDE	; 222
    5206:	b0 e0       	ldi	r27, 0x00	; 0
    5208:	66 96       	adiw	r28, 0x16	; 22
    520a:	bf af       	std	Y+63, r27	; 0x3f
    520c:	ae af       	std	Y+62, r26	; 0x3e
    520e:	66 97       	sbiw	r28, 0x16	; 22
    5210:	b8 e0       	ldi	r27, 0x08	; 8
    5212:	67 96       	adiw	r28, 0x17	; 23
    5214:	bf af       	std	Y+63, r27	; 0x3f
    5216:	67 97       	sbiw	r28, 0x17	; 23
    5218:	66 96       	adiw	r28, 0x16	; 22
    521a:	ee ad       	ldd	r30, Y+62	; 0x3e
    521c:	ff ad       	ldd	r31, Y+63	; 0x3f
    521e:	66 97       	sbiw	r28, 0x16	; 22
    5220:	00 80       	ld	r0, Z
    5222:	66 96       	adiw	r28, 0x16	; 22
    5224:	8e ad       	ldd	r24, Y+62	; 0x3e
    5226:	9f ad       	ldd	r25, Y+63	; 0x3f
    5228:	66 97       	sbiw	r28, 0x16	; 22
    522a:	01 96       	adiw	r24, 0x01	; 1
    522c:	66 96       	adiw	r28, 0x16	; 22
    522e:	9f af       	std	Y+63, r25	; 0x3f
    5230:	8e af       	std	Y+62, r24	; 0x3e
    5232:	66 97       	sbiw	r28, 0x16	; 22
    5234:	64 96       	adiw	r28, 0x14	; 20
    5236:	ae ad       	ldd	r26, Y+62	; 0x3e
    5238:	bf ad       	ldd	r27, Y+63	; 0x3f
    523a:	64 97       	sbiw	r28, 0x14	; 20
    523c:	0c 92       	st	X, r0
    523e:	64 96       	adiw	r28, 0x14	; 20
    5240:	ee ad       	ldd	r30, Y+62	; 0x3e
    5242:	ff ad       	ldd	r31, Y+63	; 0x3f
    5244:	64 97       	sbiw	r28, 0x14	; 20
    5246:	31 96       	adiw	r30, 0x01	; 1
    5248:	64 96       	adiw	r28, 0x14	; 20
    524a:	ff af       	std	Y+63, r31	; 0x3f
    524c:	ee af       	std	Y+62, r30	; 0x3e
    524e:	64 97       	sbiw	r28, 0x14	; 20
    5250:	67 96       	adiw	r28, 0x17	; 23
    5252:	ff ad       	ldd	r31, Y+63	; 0x3f
    5254:	67 97       	sbiw	r28, 0x17	; 23
    5256:	f1 50       	subi	r31, 0x01	; 1
    5258:	67 96       	adiw	r28, 0x17	; 23
    525a:	ff af       	std	Y+63, r31	; 0x3f
    525c:	67 97       	sbiw	r28, 0x17	; 23
    525e:	67 96       	adiw	r28, 0x17	; 23
    5260:	8f ad       	ldd	r24, Y+63	; 0x3f
    5262:	67 97       	sbiw	r28, 0x17	; 23
    5264:	88 23       	and	r24, r24
    5266:	c1 f6       	brne	.-80     	; 0x5218 <LoginSystem_enuEnterPassPage+0xb2>
							BOOL Local_bCorrectPass;
							Local_u8Iter = 0;
    5268:	1b ae       	std	Y+59, r1	; 0x3b
    526a:	1d c0       	rjmp	.+58     	; 0x52a6 <LoginSystem_enuEnterPassPage+0x140>

							while( //(Local_au8EnteredPassword[Local_u8Iter] != '\0') &&
									(Local_u8SystemPassword[Local_u8Iter] != '\0') ){

								if( Local_au8EnteredPassword[Local_u8Iter] == Local_u8SystemPassword[Local_u8Iter]){
    526c:	8b ad       	ldd	r24, Y+59	; 0x3b
    526e:	28 2f       	mov	r18, r24
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	ce 01       	movw	r24, r28
    5274:	cd 96       	adiw	r24, 0x3d	; 61
    5276:	fc 01       	movw	r30, r24
    5278:	e2 0f       	add	r30, r18
    527a:	f3 1f       	adc	r31, r19
    527c:	40 81       	ld	r20, Z
    527e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5280:	28 2f       	mov	r18, r24
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	ce 01       	movw	r24, r28
    5286:	88 5b       	subi	r24, 0xB8	; 184
    5288:	9f 4f       	sbci	r25, 0xFF	; 255
    528a:	fc 01       	movw	r30, r24
    528c:	e2 0f       	add	r30, r18
    528e:	f3 1f       	adc	r31, r19
    5290:	80 81       	ld	r24, Z
    5292:	48 17       	cp	r20, r24
    5294:	31 f4       	brne	.+12     	; 0x52a2 <LoginSystem_enuEnterPassPage+0x13c>

									Local_bCorrectPass = true;
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	89 af       	std	Y+57, r24	; 0x39
									Local_u8Iter++;
    529a:	8b ad       	ldd	r24, Y+59	; 0x3b
    529c:	8f 5f       	subi	r24, 0xFF	; 255
    529e:	8b af       	std	Y+59, r24	; 0x3b
    52a0:	02 c0       	rjmp	.+4      	; 0x52a6 <LoginSystem_enuEnterPassPage+0x140>
								}
								else{

									Local_bCorrectPass = false;
    52a2:	19 ae       	std	Y+57, r1	; 0x39
    52a4:	0c c0       	rjmp	.+24     	; 0x52be <LoginSystem_enuEnterPassPage+0x158>
							u8 Local_u8SystemPassword[]= LOGINSTSYTEM_PASSWORD;
							BOOL Local_bCorrectPass;
							Local_u8Iter = 0;

							while( //(Local_au8EnteredPassword[Local_u8Iter] != '\0') &&
									(Local_u8SystemPassword[Local_u8Iter] != '\0') ){
    52a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    52a8:	28 2f       	mov	r18, r24
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	ce 01       	movw	r24, r28
    52ae:	88 5b       	subi	r24, 0xB8	; 184
    52b0:	9f 4f       	sbci	r25, 0xFF	; 255
    52b2:	fc 01       	movw	r30, r24
    52b4:	e2 0f       	add	r30, r18
    52b6:	f3 1f       	adc	r31, r19
    52b8:	80 81       	ld	r24, Z

							u8 Local_u8SystemPassword[]= LOGINSTSYTEM_PASSWORD;
							BOOL Local_bCorrectPass;
							Local_u8Iter = 0;

							while( //(Local_au8EnteredPassword[Local_u8Iter] != '\0') &&
    52ba:	88 23       	and	r24, r24
    52bc:	b9 f6       	brne	.-82     	; 0x526c <LoginSystem_enuEnterPassPage+0x106>
									Local_bCorrectPass = false;
									break;
								}
							}

							if( Local_bCorrectPass == true ){
    52be:	89 ad       	ldd	r24, Y+57	; 0x39
    52c0:	81 30       	cpi	r24, 0x01	; 1
    52c2:	09 f0       	breq	.+2      	; 0x52c6 <LoginSystem_enuEnterPassPage+0x160>
    52c4:	89 c0       	rjmp	.+274    	; 0x53d8 <LoginSystem_enuEnterPassPage+0x272>

								Buzzer_enuAlertActivator();
    52c6:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <Buzzer_enuAlertActivator>

								enuSendDataAtCursorLocation("Correct Password",LCD_ROW_1,LCD_COLUMN_1);
    52ca:	8b e8       	ldi	r24, 0x8B	; 139
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	61 e0       	ldi	r22, 0x01	; 1
    52d0:	41 e0       	ldi	r20, 0x01	; 1
    52d2:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	aa ef       	ldi	r26, 0xFA	; 250
    52dc:	b3 e4       	ldi	r27, 0x43	; 67
    52de:	8d ab       	std	Y+53, r24	; 0x35
    52e0:	9e ab       	std	Y+54, r25	; 0x36
    52e2:	af ab       	std	Y+55, r26	; 0x37
    52e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52e6:	6d a9       	ldd	r22, Y+53	; 0x35
    52e8:	7e a9       	ldd	r23, Y+54	; 0x36
    52ea:	8f a9       	ldd	r24, Y+55	; 0x37
    52ec:	98 ad       	ldd	r25, Y+56	; 0x38
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	4a e7       	ldi	r20, 0x7A	; 122
    52f4:	55 e4       	ldi	r21, 0x45	; 69
    52f6:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	89 ab       	std	Y+49, r24	; 0x31
    5300:	9a ab       	std	Y+50, r25	; 0x32
    5302:	ab ab       	std	Y+51, r26	; 0x33
    5304:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5306:	69 a9       	ldd	r22, Y+49	; 0x31
    5308:	7a a9       	ldd	r23, Y+50	; 0x32
    530a:	8b a9       	ldd	r24, Y+51	; 0x33
    530c:	9c a9       	ldd	r25, Y+52	; 0x34
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	40 e8       	ldi	r20, 0x80	; 128
    5314:	5f e3       	ldi	r21, 0x3F	; 63
    5316:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    531a:	88 23       	and	r24, r24
    531c:	2c f4       	brge	.+10     	; 0x5328 <LoginSystem_enuEnterPassPage+0x1c2>
		__ticks = 1;
    531e:	81 e0       	ldi	r24, 0x01	; 1
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	98 ab       	std	Y+48, r25	; 0x30
    5324:	8f a7       	std	Y+47, r24	; 0x2f
    5326:	3f c0       	rjmp	.+126    	; 0x53a6 <LoginSystem_enuEnterPassPage+0x240>
	else if (__tmp > 65535)
    5328:	69 a9       	ldd	r22, Y+49	; 0x31
    532a:	7a a9       	ldd	r23, Y+50	; 0x32
    532c:	8b a9       	ldd	r24, Y+51	; 0x33
    532e:	9c a9       	ldd	r25, Y+52	; 0x34
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	3f ef       	ldi	r19, 0xFF	; 255
    5334:	4f e7       	ldi	r20, 0x7F	; 127
    5336:	57 e4       	ldi	r21, 0x47	; 71
    5338:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    533c:	18 16       	cp	r1, r24
    533e:	4c f5       	brge	.+82     	; 0x5392 <LoginSystem_enuEnterPassPage+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5340:	6d a9       	ldd	r22, Y+53	; 0x35
    5342:	7e a9       	ldd	r23, Y+54	; 0x36
    5344:	8f a9       	ldd	r24, Y+55	; 0x37
    5346:	98 ad       	ldd	r25, Y+56	; 0x38
    5348:	20 e0       	ldi	r18, 0x00	; 0
    534a:	30 e0       	ldi	r19, 0x00	; 0
    534c:	40 e2       	ldi	r20, 0x20	; 32
    534e:	51 e4       	ldi	r21, 0x41	; 65
    5350:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5354:	dc 01       	movw	r26, r24
    5356:	cb 01       	movw	r24, r22
    5358:	bc 01       	movw	r22, r24
    535a:	cd 01       	movw	r24, r26
    535c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	98 ab       	std	Y+48, r25	; 0x30
    5366:	8f a7       	std	Y+47, r24	; 0x2f
    5368:	0f c0       	rjmp	.+30     	; 0x5388 <LoginSystem_enuEnterPassPage+0x222>
    536a:	80 e9       	ldi	r24, 0x90	; 144
    536c:	91 e0       	ldi	r25, 0x01	; 1
    536e:	9e a7       	std	Y+46, r25	; 0x2e
    5370:	8d a7       	std	Y+45, r24	; 0x2d
    5372:	8d a5       	ldd	r24, Y+45	; 0x2d
    5374:	9e a5       	ldd	r25, Y+46	; 0x2e
    5376:	01 97       	sbiw	r24, 0x01	; 1
    5378:	f1 f7       	brne	.-4      	; 0x5376 <LoginSystem_enuEnterPassPage+0x210>
    537a:	9e a7       	std	Y+46, r25	; 0x2e
    537c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    537e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5380:	98 a9       	ldd	r25, Y+48	; 0x30
    5382:	01 97       	sbiw	r24, 0x01	; 1
    5384:	98 ab       	std	Y+48, r25	; 0x30
    5386:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5388:	8f a5       	ldd	r24, Y+47	; 0x2f
    538a:	98 a9       	ldd	r25, Y+48	; 0x30
    538c:	00 97       	sbiw	r24, 0x00	; 0
    538e:	69 f7       	brne	.-38     	; 0x536a <LoginSystem_enuEnterPassPage+0x204>
    5390:	14 c0       	rjmp	.+40     	; 0x53ba <LoginSystem_enuEnterPassPage+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5392:	69 a9       	ldd	r22, Y+49	; 0x31
    5394:	7a a9       	ldd	r23, Y+50	; 0x32
    5396:	8b a9       	ldd	r24, Y+51	; 0x33
    5398:	9c a9       	ldd	r25, Y+52	; 0x34
    539a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	98 ab       	std	Y+48, r25	; 0x30
    53a4:	8f a7       	std	Y+47, r24	; 0x2f
    53a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    53a8:	98 a9       	ldd	r25, Y+48	; 0x30
    53aa:	9c a7       	std	Y+44, r25	; 0x2c
    53ac:	8b a7       	std	Y+43, r24	; 0x2b
    53ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    53b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    53b2:	01 97       	sbiw	r24, 0x01	; 1
    53b4:	f1 f7       	brne	.-4      	; 0x53b2 <LoginSystem_enuEnterPassPage+0x24c>
    53b6:	9c a7       	std	Y+44, r25	; 0x2c
    53b8:	8b a7       	std	Y+43, r24	; 0x2b
								//Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_1);
								//Lcd_enuSendString("Correct Password");

								_delay_ms(500);
								Buzzer_enuSilenceDeactivation();
    53ba:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <Buzzer_enuSilenceDeactivation>

								Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    53be:	81 e0       	ldi	r24, 0x01	; 1
    53c0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

								*Copy_bPasswordCheck = true;
    53c4:	fe 01       	movw	r30, r28
    53c6:	e0 5b       	subi	r30, 0xB0	; 176
    53c8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ca:	01 90       	ld	r0, Z+
    53cc:	f0 81       	ld	r31, Z
    53ce:	e0 2d       	mov	r30, r0
    53d0:	81 e0       	ldi	r24, 0x01	; 1
    53d2:	80 83       	st	Z, r24
								Local_u8Iter = 0;
    53d4:	1b ae       	std	Y+59, r1	; 0x3b
    53d6:	d7 c1       	rjmp	.+942    	; 0x5786 <LoginSystem_enuEnterPassPage+0x620>

								break;
							}
							else{

								Local_u8TrialCounter++;
    53d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    53da:	8f 5f       	subi	r24, 0xFF	; 255
    53dc:	8a af       	std	Y+58, r24	; 0x3a

								Buzzer_enuAlertActivator();
    53de:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <Buzzer_enuAlertActivator>

								Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    53e2:	81 e0       	ldi	r24, 0x01	; 1
    53e4:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>
								enuSendDataAtCursorLocation("InCorrect Password",LCD_ROW_1,LCD_COLUMN_1);
    53e8:	8c e9       	ldi	r24, 0x9C	; 156
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	61 e0       	ldi	r22, 0x01	; 1
    53ee:	41 e0       	ldi	r20, 0x01	; 1
    53f0:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
    53f4:	80 e0       	ldi	r24, 0x00	; 0
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	aa ef       	ldi	r26, 0xFA	; 250
    53fa:	b3 e4       	ldi	r27, 0x43	; 67
    53fc:	8f a3       	std	Y+39, r24	; 0x27
    53fe:	98 a7       	std	Y+40, r25	; 0x28
    5400:	a9 a7       	std	Y+41, r26	; 0x29
    5402:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5404:	6f a1       	ldd	r22, Y+39	; 0x27
    5406:	78 a5       	ldd	r23, Y+40	; 0x28
    5408:	89 a5       	ldd	r24, Y+41	; 0x29
    540a:	9a a5       	ldd	r25, Y+42	; 0x2a
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	4a e7       	ldi	r20, 0x7A	; 122
    5412:	55 e4       	ldi	r21, 0x45	; 69
    5414:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	8b a3       	std	Y+35, r24	; 0x23
    541e:	9c a3       	std	Y+36, r25	; 0x24
    5420:	ad a3       	std	Y+37, r26	; 0x25
    5422:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5424:	6b a1       	ldd	r22, Y+35	; 0x23
    5426:	7c a1       	ldd	r23, Y+36	; 0x24
    5428:	8d a1       	ldd	r24, Y+37	; 0x25
    542a:	9e a1       	ldd	r25, Y+38	; 0x26
    542c:	20 e0       	ldi	r18, 0x00	; 0
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	40 e8       	ldi	r20, 0x80	; 128
    5432:	5f e3       	ldi	r21, 0x3F	; 63
    5434:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    5438:	88 23       	and	r24, r24
    543a:	2c f4       	brge	.+10     	; 0x5446 <LoginSystem_enuEnterPassPage+0x2e0>
		__ticks = 1;
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	9a a3       	std	Y+34, r25	; 0x22
    5442:	89 a3       	std	Y+33, r24	; 0x21
    5444:	3f c0       	rjmp	.+126    	; 0x54c4 <LoginSystem_enuEnterPassPage+0x35e>
	else if (__tmp > 65535)
    5446:	6b a1       	ldd	r22, Y+35	; 0x23
    5448:	7c a1       	ldd	r23, Y+36	; 0x24
    544a:	8d a1       	ldd	r24, Y+37	; 0x25
    544c:	9e a1       	ldd	r25, Y+38	; 0x26
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	3f ef       	ldi	r19, 0xFF	; 255
    5452:	4f e7       	ldi	r20, 0x7F	; 127
    5454:	57 e4       	ldi	r21, 0x47	; 71
    5456:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    545a:	18 16       	cp	r1, r24
    545c:	4c f5       	brge	.+82     	; 0x54b0 <LoginSystem_enuEnterPassPage+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    545e:	6f a1       	ldd	r22, Y+39	; 0x27
    5460:	78 a5       	ldd	r23, Y+40	; 0x28
    5462:	89 a5       	ldd	r24, Y+41	; 0x29
    5464:	9a a5       	ldd	r25, Y+42	; 0x2a
    5466:	20 e0       	ldi	r18, 0x00	; 0
    5468:	30 e0       	ldi	r19, 0x00	; 0
    546a:	40 e2       	ldi	r20, 0x20	; 32
    546c:	51 e4       	ldi	r21, 0x41	; 65
    546e:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5472:	dc 01       	movw	r26, r24
    5474:	cb 01       	movw	r24, r22
    5476:	bc 01       	movw	r22, r24
    5478:	cd 01       	movw	r24, r26
    547a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    547e:	dc 01       	movw	r26, r24
    5480:	cb 01       	movw	r24, r22
    5482:	9a a3       	std	Y+34, r25	; 0x22
    5484:	89 a3       	std	Y+33, r24	; 0x21
    5486:	0f c0       	rjmp	.+30     	; 0x54a6 <LoginSystem_enuEnterPassPage+0x340>
    5488:	80 e9       	ldi	r24, 0x90	; 144
    548a:	91 e0       	ldi	r25, 0x01	; 1
    548c:	98 a3       	std	Y+32, r25	; 0x20
    548e:	8f 8f       	std	Y+31, r24	; 0x1f
    5490:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5492:	98 a1       	ldd	r25, Y+32	; 0x20
    5494:	01 97       	sbiw	r24, 0x01	; 1
    5496:	f1 f7       	brne	.-4      	; 0x5494 <LoginSystem_enuEnterPassPage+0x32e>
    5498:	98 a3       	std	Y+32, r25	; 0x20
    549a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    549c:	89 a1       	ldd	r24, Y+33	; 0x21
    549e:	9a a1       	ldd	r25, Y+34	; 0x22
    54a0:	01 97       	sbiw	r24, 0x01	; 1
    54a2:	9a a3       	std	Y+34, r25	; 0x22
    54a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54a6:	89 a1       	ldd	r24, Y+33	; 0x21
    54a8:	9a a1       	ldd	r25, Y+34	; 0x22
    54aa:	00 97       	sbiw	r24, 0x00	; 0
    54ac:	69 f7       	brne	.-38     	; 0x5488 <LoginSystem_enuEnterPassPage+0x322>
    54ae:	14 c0       	rjmp	.+40     	; 0x54d8 <LoginSystem_enuEnterPassPage+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54b0:	6b a1       	ldd	r22, Y+35	; 0x23
    54b2:	7c a1       	ldd	r23, Y+36	; 0x24
    54b4:	8d a1       	ldd	r24, Y+37	; 0x25
    54b6:	9e a1       	ldd	r25, Y+38	; 0x26
    54b8:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	9a a3       	std	Y+34, r25	; 0x22
    54c2:	89 a3       	std	Y+33, r24	; 0x21
    54c4:	89 a1       	ldd	r24, Y+33	; 0x21
    54c6:	9a a1       	ldd	r25, Y+34	; 0x22
    54c8:	9e 8f       	std	Y+30, r25	; 0x1e
    54ca:	8d 8f       	std	Y+29, r24	; 0x1d
    54cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    54ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    54d0:	01 97       	sbiw	r24, 0x01	; 1
    54d2:	f1 f7       	brne	.-4      	; 0x54d0 <LoginSystem_enuEnterPassPage+0x36a>
    54d4:	9e 8f       	std	Y+30, r25	; 0x1e
    54d6:	8d 8f       	std	Y+29, r24	; 0x1d
								//Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_1);
							    //Lcd_enuSendString("InCorrect Password");

								_delay_ms(500);
								Buzzer_enuSilenceDeactivation();
    54d8:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <Buzzer_enuSilenceDeactivation>

								if(Local_u8TrialCounter < LOGINSYSTEM_NUM_OF_TRIALS){
    54dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    54de:	83 30       	cpi	r24, 0x03	; 3
    54e0:	68 f4       	brcc	.+26     	; 0x54fc <LoginSystem_enuEnterPassPage+0x396>

									Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>
									enuSendDataAtCursorLocation("Enter Password : ",LCD_ROW_1,LCD_COLUMN_1);
    54e8:	89 e7       	ldi	r24, 0x79	; 121
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	61 e0       	ldi	r22, 0x01	; 1
    54ee:	41 e0       	ldi	r20, 0x01	; 1
    54f0:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
									Lcd_enuSetCursor(LCD_ROW_2,LCD_COLUMN_1);
    54f4:	82 e0       	ldi	r24, 0x02	; 2
    54f6:	61 e0       	ldi	r22, 0x01	; 1
    54f8:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
								}

								Local_u8Iter = 0;
    54fc:	1b ae       	std	Y+59, r1	; 0x3b
    54fe:	61 ce       	rjmp	.-830    	; 0x51c2 <LoginSystem_enuEnterPassPage+0x5c>

						}

						else{

							Lcd_enuSendData('*');
    5500:	8a e2       	ldi	r24, 0x2A	; 42
    5502:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>
							Local_au8EnteredPassword[Local_u8Iter] = Local_u8KeypadValue;
    5506:	8b ad       	ldd	r24, Y+59	; 0x3b
    5508:	28 2f       	mov	r18, r24
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	fe 01       	movw	r30, r28
    550e:	e9 5b       	subi	r30, 0xB9	; 185
    5510:	ff 4f       	sbci	r31, 0xFF	; 255
    5512:	40 81       	ld	r20, Z
    5514:	ce 01       	movw	r24, r28
    5516:	cd 96       	adiw	r24, 0x3d	; 61
    5518:	fc 01       	movw	r30, r24
    551a:	e2 0f       	add	r30, r18
    551c:	f3 1f       	adc	r31, r19
    551e:	40 83       	st	Z, r20
							Local_u8Iter++;
    5520:	8b ad       	ldd	r24, Y+59	; 0x3b
    5522:	8f 5f       	subi	r24, 0xFF	; 255
    5524:	8b af       	std	Y+59, r24	; 0x3b
    5526:	4d ce       	rjmp	.-870    	; 0x51c2 <LoginSystem_enuEnterPassPage+0x5c>
						}

					}

					else{
						Local_u8TrialCounter++;
    5528:	8a ad       	ldd	r24, Y+58	; 0x3a
    552a:	8f 5f       	subi	r24, 0xFF	; 255
    552c:	8a af       	std	Y+58, r24	; 0x3a

						Buzzer_enuAlertActivator();
    552e:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <Buzzer_enuAlertActivator>

						Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

						enuSendDataAtCursorLocation("Incorrect Password",LCD_ROW_1,LCD_COLUMN_1);
    5538:	8f ea       	ldi	r24, 0xAF	; 175
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	61 e0       	ldi	r22, 0x01	; 1
    553e:	41 e0       	ldi	r20, 0x01	; 1
    5540:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
						//Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_1);
						//Lcd_enuSendString("Incorrect Password");

						enuSendDataAtCursorLocation("0<Pass should<",LCD_ROW_2,LCD_COLUMN_1);
    5544:	82 ec       	ldi	r24, 0xC2	; 194
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	62 e0       	ldi	r22, 0x02	; 2
    554a:	41 e0       	ldi	r20, 0x01	; 1
    554c:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
						Lcd_enuWriteIntegarNum(LOGINSYSTEM_LENGTH_OF_PASSWORD);
    5550:	6a e0       	ldi	r22, 0x0A	; 10
    5552:	70 e0       	ldi	r23, 0x00	; 0
    5554:	80 e0       	ldi	r24, 0x00	; 0
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <Lcd_enuWriteIntegarNum>
    555c:	80 e0       	ldi	r24, 0x00	; 0
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	aa ef       	ldi	r26, 0xFA	; 250
    5562:	b3 e4       	ldi	r27, 0x43	; 67
    5564:	89 8f       	std	Y+25, r24	; 0x19
    5566:	9a 8f       	std	Y+26, r25	; 0x1a
    5568:	ab 8f       	std	Y+27, r26	; 0x1b
    556a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    556c:	69 8d       	ldd	r22, Y+25	; 0x19
    556e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	4a e7       	ldi	r20, 0x7A	; 122
    557a:	55 e4       	ldi	r21, 0x45	; 69
    557c:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5580:	dc 01       	movw	r26, r24
    5582:	cb 01       	movw	r24, r22
    5584:	8d 8b       	std	Y+21, r24	; 0x15
    5586:	9e 8b       	std	Y+22, r25	; 0x16
    5588:	af 8b       	std	Y+23, r26	; 0x17
    558a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    558c:	6d 89       	ldd	r22, Y+21	; 0x15
    558e:	7e 89       	ldd	r23, Y+22	; 0x16
    5590:	8f 89       	ldd	r24, Y+23	; 0x17
    5592:	98 8d       	ldd	r25, Y+24	; 0x18
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	40 e8       	ldi	r20, 0x80	; 128
    559a:	5f e3       	ldi	r21, 0x3F	; 63
    559c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    55a0:	88 23       	and	r24, r24
    55a2:	2c f4       	brge	.+10     	; 0x55ae <LoginSystem_enuEnterPassPage+0x448>
		__ticks = 1;
    55a4:	81 e0       	ldi	r24, 0x01	; 1
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	9c 8b       	std	Y+20, r25	; 0x14
    55aa:	8b 8b       	std	Y+19, r24	; 0x13
    55ac:	3f c0       	rjmp	.+126    	; 0x562c <LoginSystem_enuEnterPassPage+0x4c6>
	else if (__tmp > 65535)
    55ae:	6d 89       	ldd	r22, Y+21	; 0x15
    55b0:	7e 89       	ldd	r23, Y+22	; 0x16
    55b2:	8f 89       	ldd	r24, Y+23	; 0x17
    55b4:	98 8d       	ldd	r25, Y+24	; 0x18
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	3f ef       	ldi	r19, 0xFF	; 255
    55ba:	4f e7       	ldi	r20, 0x7F	; 127
    55bc:	57 e4       	ldi	r21, 0x47	; 71
    55be:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    55c2:	18 16       	cp	r1, r24
    55c4:	4c f5       	brge	.+82     	; 0x5618 <LoginSystem_enuEnterPassPage+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55c6:	69 8d       	ldd	r22, Y+25	; 0x19
    55c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55ce:	20 e0       	ldi	r18, 0x00	; 0
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	40 e2       	ldi	r20, 0x20	; 32
    55d4:	51 e4       	ldi	r21, 0x41	; 65
    55d6:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    55da:	dc 01       	movw	r26, r24
    55dc:	cb 01       	movw	r24, r22
    55de:	bc 01       	movw	r22, r24
    55e0:	cd 01       	movw	r24, r26
    55e2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    55e6:	dc 01       	movw	r26, r24
    55e8:	cb 01       	movw	r24, r22
    55ea:	9c 8b       	std	Y+20, r25	; 0x14
    55ec:	8b 8b       	std	Y+19, r24	; 0x13
    55ee:	0f c0       	rjmp	.+30     	; 0x560e <LoginSystem_enuEnterPassPage+0x4a8>
    55f0:	80 e9       	ldi	r24, 0x90	; 144
    55f2:	91 e0       	ldi	r25, 0x01	; 1
    55f4:	9a 8b       	std	Y+18, r25	; 0x12
    55f6:	89 8b       	std	Y+17, r24	; 0x11
    55f8:	89 89       	ldd	r24, Y+17	; 0x11
    55fa:	9a 89       	ldd	r25, Y+18	; 0x12
    55fc:	01 97       	sbiw	r24, 0x01	; 1
    55fe:	f1 f7       	brne	.-4      	; 0x55fc <LoginSystem_enuEnterPassPage+0x496>
    5600:	9a 8b       	std	Y+18, r25	; 0x12
    5602:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5604:	8b 89       	ldd	r24, Y+19	; 0x13
    5606:	9c 89       	ldd	r25, Y+20	; 0x14
    5608:	01 97       	sbiw	r24, 0x01	; 1
    560a:	9c 8b       	std	Y+20, r25	; 0x14
    560c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    560e:	8b 89       	ldd	r24, Y+19	; 0x13
    5610:	9c 89       	ldd	r25, Y+20	; 0x14
    5612:	00 97       	sbiw	r24, 0x00	; 0
    5614:	69 f7       	brne	.-38     	; 0x55f0 <LoginSystem_enuEnterPassPage+0x48a>
    5616:	14 c0       	rjmp	.+40     	; 0x5640 <LoginSystem_enuEnterPassPage+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5618:	6d 89       	ldd	r22, Y+21	; 0x15
    561a:	7e 89       	ldd	r23, Y+22	; 0x16
    561c:	8f 89       	ldd	r24, Y+23	; 0x17
    561e:	98 8d       	ldd	r25, Y+24	; 0x18
    5620:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5624:	dc 01       	movw	r26, r24
    5626:	cb 01       	movw	r24, r22
    5628:	9c 8b       	std	Y+20, r25	; 0x14
    562a:	8b 8b       	std	Y+19, r24	; 0x13
    562c:	8b 89       	ldd	r24, Y+19	; 0x13
    562e:	9c 89       	ldd	r25, Y+20	; 0x14
    5630:	98 8b       	std	Y+16, r25	; 0x10
    5632:	8f 87       	std	Y+15, r24	; 0x0f
    5634:	8f 85       	ldd	r24, Y+15	; 0x0f
    5636:	98 89       	ldd	r25, Y+16	; 0x10
    5638:	01 97       	sbiw	r24, 0x01	; 1
    563a:	f1 f7       	brne	.-4      	; 0x5638 <LoginSystem_enuEnterPassPage+0x4d2>
    563c:	98 8b       	std	Y+16, r25	; 0x10
    563e:	8f 87       	std	Y+15, r24	; 0x0f
						//Lcd_enuSetCursor(LCD_ROW_2,LCD_COLUMN_1);
						//Lcd_enuSendString("0<Pass should<30");

						_delay_ms(500);
						Buzzer_enuSilenceDeactivation();
    5640:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <Buzzer_enuSilenceDeactivation>

						Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    5644:	81 e0       	ldi	r24, 0x01	; 1
    5646:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

						if(Local_u8TrialCounter < LOGINSYSTEM_NUM_OF_TRIALS){
    564a:	8a ad       	ldd	r24, Y+58	; 0x3a
    564c:	83 30       	cpi	r24, 0x03	; 3
    564e:	68 f4       	brcc	.+26     	; 0x566a <LoginSystem_enuEnterPassPage+0x504>

							Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>
							enuSendDataAtCursorLocation("Enter Password : ",LCD_ROW_1,LCD_COLUMN_1);
    5656:	89 e7       	ldi	r24, 0x79	; 121
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	61 e0       	ldi	r22, 0x01	; 1
    565c:	41 e0       	ldi	r20, 0x01	; 1
    565e:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
							Lcd_enuSetCursor(LCD_ROW_2,LCD_COLUMN_1);
    5662:	82 e0       	ldi	r24, 0x02	; 2
    5664:	61 e0       	ldi	r22, 0x01	; 1
    5666:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
						}

						Local_u8Iter = 0;
    566a:	1b ae       	std	Y+59, r1	; 0x3b
    566c:	aa cd       	rjmp	.-1196   	; 0x51c2 <LoginSystem_enuEnterPassPage+0x5c>

			}

			else{

				Buzzer_enuAlertActivator();
    566e:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <Buzzer_enuAlertActivator>
				Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    5672:	81 e0       	ldi	r24, 0x01	; 1
    5674:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>
				enuSendDataAtCursorLocation("Theif.......",LCD_ROW_1,LCD_COLUMN_1);
    5678:	81 ed       	ldi	r24, 0xD1	; 209
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	61 e0       	ldi	r22, 0x01	; 1
    567e:	41 e0       	ldi	r20, 0x01	; 1
    5680:	0e 94 6d 33 	call	0x66da	; 0x66da <enuSendDataAtCursorLocation>
				Buzzer_enuSilenceDeactivation();
    5684:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <Buzzer_enuSilenceDeactivation>
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	90 e4       	ldi	r25, 0x40	; 64
    568c:	ac e9       	ldi	r26, 0x9C	; 156
    568e:	b5 e4       	ldi	r27, 0x45	; 69
    5690:	8b 87       	std	Y+11, r24	; 0x0b
    5692:	9c 87       	std	Y+12, r25	; 0x0c
    5694:	ad 87       	std	Y+13, r26	; 0x0d
    5696:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5698:	6b 85       	ldd	r22, Y+11	; 0x0b
    569a:	7c 85       	ldd	r23, Y+12	; 0x0c
    569c:	8d 85       	ldd	r24, Y+13	; 0x0d
    569e:	9e 85       	ldd	r25, Y+14	; 0x0e
    56a0:	20 e0       	ldi	r18, 0x00	; 0
    56a2:	30 e0       	ldi	r19, 0x00	; 0
    56a4:	4a e7       	ldi	r20, 0x7A	; 122
    56a6:	55 e4       	ldi	r21, 0x45	; 69
    56a8:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    56ac:	dc 01       	movw	r26, r24
    56ae:	cb 01       	movw	r24, r22
    56b0:	8f 83       	std	Y+7, r24	; 0x07
    56b2:	98 87       	std	Y+8, r25	; 0x08
    56b4:	a9 87       	std	Y+9, r26	; 0x09
    56b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56b8:	6f 81       	ldd	r22, Y+7	; 0x07
    56ba:	78 85       	ldd	r23, Y+8	; 0x08
    56bc:	89 85       	ldd	r24, Y+9	; 0x09
    56be:	9a 85       	ldd	r25, Y+10	; 0x0a
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	40 e8       	ldi	r20, 0x80	; 128
    56c6:	5f e3       	ldi	r21, 0x3F	; 63
    56c8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    56cc:	88 23       	and	r24, r24
    56ce:	2c f4       	brge	.+10     	; 0x56da <LoginSystem_enuEnterPassPage+0x574>
		__ticks = 1;
    56d0:	81 e0       	ldi	r24, 0x01	; 1
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	9e 83       	std	Y+6, r25	; 0x06
    56d6:	8d 83       	std	Y+5, r24	; 0x05
    56d8:	3f c0       	rjmp	.+126    	; 0x5758 <LoginSystem_enuEnterPassPage+0x5f2>
	else if (__tmp > 65535)
    56da:	6f 81       	ldd	r22, Y+7	; 0x07
    56dc:	78 85       	ldd	r23, Y+8	; 0x08
    56de:	89 85       	ldd	r24, Y+9	; 0x09
    56e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56e2:	20 e0       	ldi	r18, 0x00	; 0
    56e4:	3f ef       	ldi	r19, 0xFF	; 255
    56e6:	4f e7       	ldi	r20, 0x7F	; 127
    56e8:	57 e4       	ldi	r21, 0x47	; 71
    56ea:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    56ee:	18 16       	cp	r1, r24
    56f0:	4c f5       	brge	.+82     	; 0x5744 <LoginSystem_enuEnterPassPage+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    56f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    56f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    56f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	30 e0       	ldi	r19, 0x00	; 0
    56fe:	40 e2       	ldi	r20, 0x20	; 32
    5700:	51 e4       	ldi	r21, 0x41	; 65
    5702:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5706:	dc 01       	movw	r26, r24
    5708:	cb 01       	movw	r24, r22
    570a:	bc 01       	movw	r22, r24
    570c:	cd 01       	movw	r24, r26
    570e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5712:	dc 01       	movw	r26, r24
    5714:	cb 01       	movw	r24, r22
    5716:	9e 83       	std	Y+6, r25	; 0x06
    5718:	8d 83       	std	Y+5, r24	; 0x05
    571a:	0f c0       	rjmp	.+30     	; 0x573a <LoginSystem_enuEnterPassPage+0x5d4>
    571c:	80 e9       	ldi	r24, 0x90	; 144
    571e:	91 e0       	ldi	r25, 0x01	; 1
    5720:	9c 83       	std	Y+4, r25	; 0x04
    5722:	8b 83       	std	Y+3, r24	; 0x03
    5724:	8b 81       	ldd	r24, Y+3	; 0x03
    5726:	9c 81       	ldd	r25, Y+4	; 0x04
    5728:	01 97       	sbiw	r24, 0x01	; 1
    572a:	f1 f7       	brne	.-4      	; 0x5728 <LoginSystem_enuEnterPassPage+0x5c2>
    572c:	9c 83       	std	Y+4, r25	; 0x04
    572e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5730:	8d 81       	ldd	r24, Y+5	; 0x05
    5732:	9e 81       	ldd	r25, Y+6	; 0x06
    5734:	01 97       	sbiw	r24, 0x01	; 1
    5736:	9e 83       	std	Y+6, r25	; 0x06
    5738:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    573a:	8d 81       	ldd	r24, Y+5	; 0x05
    573c:	9e 81       	ldd	r25, Y+6	; 0x06
    573e:	00 97       	sbiw	r24, 0x00	; 0
    5740:	69 f7       	brne	.-38     	; 0x571c <LoginSystem_enuEnterPassPage+0x5b6>
    5742:	14 c0       	rjmp	.+40     	; 0x576c <LoginSystem_enuEnterPassPage+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5744:	6f 81       	ldd	r22, Y+7	; 0x07
    5746:	78 85       	ldd	r23, Y+8	; 0x08
    5748:	89 85       	ldd	r24, Y+9	; 0x09
    574a:	9a 85       	ldd	r25, Y+10	; 0x0a
    574c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5750:	dc 01       	movw	r26, r24
    5752:	cb 01       	movw	r24, r22
    5754:	9e 83       	std	Y+6, r25	; 0x06
    5756:	8d 83       	std	Y+5, r24	; 0x05
    5758:	8d 81       	ldd	r24, Y+5	; 0x05
    575a:	9e 81       	ldd	r25, Y+6	; 0x06
    575c:	9a 83       	std	Y+2, r25	; 0x02
    575e:	89 83       	std	Y+1, r24	; 0x01
    5760:	89 81       	ldd	r24, Y+1	; 0x01
    5762:	9a 81       	ldd	r25, Y+2	; 0x02
    5764:	01 97       	sbiw	r24, 0x01	; 1
    5766:	f1 f7       	brne	.-4      	; 0x5764 <LoginSystem_enuEnterPassPage+0x5fe>
    5768:	9a 83       	std	Y+2, r25	; 0x02
    576a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5000);
				Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

				*Copy_bPasswordCheck = false;
    5772:	fe 01       	movw	r30, r28
    5774:	e0 5b       	subi	r30, 0xB0	; 176
    5776:	ff 4f       	sbci	r31, 0xFF	; 255
    5778:	01 90       	ld	r0, Z+
    577a:	f0 81       	ld	r31, Z
    577c:	e0 2d       	mov	r30, r0
    577e:	10 82       	st	Z, r1
    5780:	02 c0       	rjmp	.+4      	; 0x5786 <LoginSystem_enuEnterPassPage+0x620>
			}
		}
	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    5782:	83 e0       	ldi	r24, 0x03	; 3
    5784:	8c af       	std	Y+60, r24	; 0x3c
	}



	return Local_enuErrorState;
    5786:	8c ad       	ldd	r24, Y+60	; 0x3c

}
    5788:	ca 5a       	subi	r28, 0xAA	; 170
    578a:	df 4f       	sbci	r29, 0xFF	; 255
    578c:	0f b6       	in	r0, 0x3f	; 63
    578e:	f8 94       	cli
    5790:	de bf       	out	0x3e, r29	; 62
    5792:	0f be       	out	0x3f, r0	; 63
    5794:	cd bf       	out	0x3d, r28	; 61
    5796:	cf 91       	pop	r28
    5798:	df 91       	pop	r29
    579a:	08 95       	ret

0000579c <LoginSystem_enuMainDashBoard>:

ES_t LoginSystem_enuMainDashBoard(void){
    579c:	0f 93       	push	r16
    579e:	1f 93       	push	r17
    57a0:	df 93       	push	r29
    57a2:	cf 93       	push	r28
    57a4:	cd b7       	in	r28, 0x3d	; 61
    57a6:	de b7       	in	r29, 0x3e	; 62
    57a8:	cf 59       	subi	r28, 0x9F	; 159
    57aa:	d0 40       	sbci	r29, 0x00	; 0
    57ac:	0f b6       	in	r0, 0x3f	; 63
    57ae:	f8 94       	cli
    57b0:	de bf       	out	0x3e, r29	; 62
    57b2:	0f be       	out	0x3f, r0	; 63
    57b4:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState = ES_NOK;
    57b6:	fe 01       	movw	r30, r28
    57b8:	ed 59       	subi	r30, 0x9D	; 157
    57ba:	ff 4f       	sbci	r31, 0xFF	; 255
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	80 83       	st	Z, r24

	u8 * Local_pau8PageOneOptions[] = {"1-LED","2-AC","3-TEMP","4-EXIT"};
    57c0:	ce 01       	movw	r24, r28
    57c2:	8c 59       	subi	r24, 0x9C	; 156
    57c4:	9f 4f       	sbci	r25, 0xFF	; 255
    57c6:	c9 57       	subi	r28, 0x79	; 121
    57c8:	df 4f       	sbci	r29, 0xFF	; 255
    57ca:	99 83       	std	Y+1, r25	; 0x01
    57cc:	88 83       	st	Y, r24
    57ce:	c7 58       	subi	r28, 0x87	; 135
    57d0:	d0 40       	sbci	r29, 0x00	; 0
    57d2:	8d ef       	ldi	r24, 0xFD	; 253
    57d4:	92 e0       	ldi	r25, 0x02	; 2
    57d6:	c7 57       	subi	r28, 0x77	; 119
    57d8:	df 4f       	sbci	r29, 0xFF	; 255
    57da:	99 83       	std	Y+1, r25	; 0x01
    57dc:	88 83       	st	Y, r24
    57de:	c9 58       	subi	r28, 0x89	; 137
    57e0:	d0 40       	sbci	r29, 0x00	; 0
    57e2:	98 e0       	ldi	r25, 0x08	; 8
    57e4:	c5 57       	subi	r28, 0x75	; 117
    57e6:	df 4f       	sbci	r29, 0xFF	; 255
    57e8:	98 83       	st	Y, r25
    57ea:	cb 58       	subi	r28, 0x8B	; 139
    57ec:	d0 40       	sbci	r29, 0x00	; 0
    57ee:	c7 57       	subi	r28, 0x77	; 119
    57f0:	df 4f       	sbci	r29, 0xFF	; 255
    57f2:	e8 81       	ld	r30, Y
    57f4:	f9 81       	ldd	r31, Y+1	; 0x01
    57f6:	c9 58       	subi	r28, 0x89	; 137
    57f8:	d0 40       	sbci	r29, 0x00	; 0
    57fa:	00 80       	ld	r0, Z
    57fc:	c7 57       	subi	r28, 0x77	; 119
    57fe:	df 4f       	sbci	r29, 0xFF	; 255
    5800:	88 81       	ld	r24, Y
    5802:	99 81       	ldd	r25, Y+1	; 0x01
    5804:	c9 58       	subi	r28, 0x89	; 137
    5806:	d0 40       	sbci	r29, 0x00	; 0
    5808:	01 96       	adiw	r24, 0x01	; 1
    580a:	c7 57       	subi	r28, 0x77	; 119
    580c:	df 4f       	sbci	r29, 0xFF	; 255
    580e:	99 83       	std	Y+1, r25	; 0x01
    5810:	88 83       	st	Y, r24
    5812:	c9 58       	subi	r28, 0x89	; 137
    5814:	d0 40       	sbci	r29, 0x00	; 0
    5816:	c9 57       	subi	r28, 0x79	; 121
    5818:	df 4f       	sbci	r29, 0xFF	; 255
    581a:	e8 81       	ld	r30, Y
    581c:	f9 81       	ldd	r31, Y+1	; 0x01
    581e:	c7 58       	subi	r28, 0x87	; 135
    5820:	d0 40       	sbci	r29, 0x00	; 0
    5822:	00 82       	st	Z, r0
    5824:	c9 57       	subi	r28, 0x79	; 121
    5826:	df 4f       	sbci	r29, 0xFF	; 255
    5828:	88 81       	ld	r24, Y
    582a:	99 81       	ldd	r25, Y+1	; 0x01
    582c:	c7 58       	subi	r28, 0x87	; 135
    582e:	d0 40       	sbci	r29, 0x00	; 0
    5830:	01 96       	adiw	r24, 0x01	; 1
    5832:	c9 57       	subi	r28, 0x79	; 121
    5834:	df 4f       	sbci	r29, 0xFF	; 255
    5836:	99 83       	std	Y+1, r25	; 0x01
    5838:	88 83       	st	Y, r24
    583a:	c7 58       	subi	r28, 0x87	; 135
    583c:	d0 40       	sbci	r29, 0x00	; 0
    583e:	c5 57       	subi	r28, 0x75	; 117
    5840:	df 4f       	sbci	r29, 0xFF	; 255
    5842:	98 81       	ld	r25, Y
    5844:	cb 58       	subi	r28, 0x8B	; 139
    5846:	d0 40       	sbci	r29, 0x00	; 0
    5848:	91 50       	subi	r25, 0x01	; 1
    584a:	c5 57       	subi	r28, 0x75	; 117
    584c:	df 4f       	sbci	r29, 0xFF	; 255
    584e:	98 83       	st	Y, r25
    5850:	cb 58       	subi	r28, 0x8B	; 139
    5852:	d0 40       	sbci	r29, 0x00	; 0
    5854:	c5 57       	subi	r28, 0x75	; 117
    5856:	df 4f       	sbci	r29, 0xFF	; 255
    5858:	e8 81       	ld	r30, Y
    585a:	cb 58       	subi	r28, 0x8B	; 139
    585c:	d0 40       	sbci	r29, 0x00	; 0
    585e:	ee 23       	and	r30, r30
    5860:	31 f6       	brne	.-116    	; 0x57ee <LoginSystem_enuMainDashBoard+0x52>
	enuOptionPage(Local_pau8PageOneOptions,4);
    5862:	ce 01       	movw	r24, r28
    5864:	8c 59       	subi	r24, 0x9C	; 156
    5866:	9f 4f       	sbci	r25, 0xFF	; 255
    5868:	64 e0       	ldi	r22, 0x04	; 4
    586a:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>

	u8 Local_u8KeypadValue;

	while(1){

		Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    586e:	ce 01       	movw	r24, r28
    5870:	84 59       	subi	r24, 0x94	; 148
    5872:	9f 4f       	sbci	r25, 0xFF	; 255
    5874:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>

		if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    5878:	fe 01       	movw	r30, r28
    587a:	e4 59       	subi	r30, 0x94	; 148
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	80 81       	ld	r24, Z
    5880:	8f 3f       	cpi	r24, 0xFF	; 255
    5882:	a9 f3       	breq	.-22     	; 0x586e <LoginSystem_enuMainDashBoard+0xd2>

			//Keypad_enuGetPressedKey(&Local_u8KeypadValue);

			if(Local_u8KeypadValue == '1'){
    5884:	fe 01       	movw	r30, r28
    5886:	e4 59       	subi	r30, 0x94	; 148
    5888:	ff 4f       	sbci	r31, 0xFF	; 255
    588a:	80 81       	ld	r24, Z
    588c:	81 33       	cpi	r24, 0x31	; 49
    588e:	09 f0       	breq	.+2      	; 0x5892 <LoginSystem_enuMainDashBoard+0xf6>
    5890:	d0 c3       	rjmp	.+1952   	; 0x6032 <LoginSystem_enuMainDashBoard+0x896>

				u8 * Local_pau8LedsOptions[] = {"1-LED1","2-LED2","3-LED3","4-BACK"};
    5892:	ce 01       	movw	r24, r28
    5894:	83 59       	subi	r24, 0x93	; 147
    5896:	9f 4f       	sbci	r25, 0xFF	; 255
    5898:	c4 57       	subi	r28, 0x74	; 116
    589a:	df 4f       	sbci	r29, 0xFF	; 255
    589c:	99 83       	std	Y+1, r25	; 0x01
    589e:	88 83       	st	Y, r24
    58a0:	cc 58       	subi	r28, 0x8C	; 140
    58a2:	d0 40       	sbci	r29, 0x00	; 0
    58a4:	85 ef       	ldi	r24, 0xF5	; 245
    58a6:	92 e0       	ldi	r25, 0x02	; 2
    58a8:	c2 57       	subi	r28, 0x72	; 114
    58aa:	df 4f       	sbci	r29, 0xFF	; 255
    58ac:	99 83       	std	Y+1, r25	; 0x01
    58ae:	88 83       	st	Y, r24
    58b0:	ce 58       	subi	r28, 0x8E	; 142
    58b2:	d0 40       	sbci	r29, 0x00	; 0
    58b4:	98 e0       	ldi	r25, 0x08	; 8
    58b6:	c0 57       	subi	r28, 0x70	; 112
    58b8:	df 4f       	sbci	r29, 0xFF	; 255
    58ba:	98 83       	st	Y, r25
    58bc:	c0 59       	subi	r28, 0x90	; 144
    58be:	d0 40       	sbci	r29, 0x00	; 0
    58c0:	c2 57       	subi	r28, 0x72	; 114
    58c2:	df 4f       	sbci	r29, 0xFF	; 255
    58c4:	e8 81       	ld	r30, Y
    58c6:	f9 81       	ldd	r31, Y+1	; 0x01
    58c8:	ce 58       	subi	r28, 0x8E	; 142
    58ca:	d0 40       	sbci	r29, 0x00	; 0
    58cc:	00 80       	ld	r0, Z
    58ce:	c2 57       	subi	r28, 0x72	; 114
    58d0:	df 4f       	sbci	r29, 0xFF	; 255
    58d2:	88 81       	ld	r24, Y
    58d4:	99 81       	ldd	r25, Y+1	; 0x01
    58d6:	ce 58       	subi	r28, 0x8E	; 142
    58d8:	d0 40       	sbci	r29, 0x00	; 0
    58da:	01 96       	adiw	r24, 0x01	; 1
    58dc:	c2 57       	subi	r28, 0x72	; 114
    58de:	df 4f       	sbci	r29, 0xFF	; 255
    58e0:	99 83       	std	Y+1, r25	; 0x01
    58e2:	88 83       	st	Y, r24
    58e4:	ce 58       	subi	r28, 0x8E	; 142
    58e6:	d0 40       	sbci	r29, 0x00	; 0
    58e8:	c4 57       	subi	r28, 0x74	; 116
    58ea:	df 4f       	sbci	r29, 0xFF	; 255
    58ec:	e8 81       	ld	r30, Y
    58ee:	f9 81       	ldd	r31, Y+1	; 0x01
    58f0:	cc 58       	subi	r28, 0x8C	; 140
    58f2:	d0 40       	sbci	r29, 0x00	; 0
    58f4:	00 82       	st	Z, r0
    58f6:	c4 57       	subi	r28, 0x74	; 116
    58f8:	df 4f       	sbci	r29, 0xFF	; 255
    58fa:	88 81       	ld	r24, Y
    58fc:	99 81       	ldd	r25, Y+1	; 0x01
    58fe:	cc 58       	subi	r28, 0x8C	; 140
    5900:	d0 40       	sbci	r29, 0x00	; 0
    5902:	01 96       	adiw	r24, 0x01	; 1
    5904:	c4 57       	subi	r28, 0x74	; 116
    5906:	df 4f       	sbci	r29, 0xFF	; 255
    5908:	99 83       	std	Y+1, r25	; 0x01
    590a:	88 83       	st	Y, r24
    590c:	cc 58       	subi	r28, 0x8C	; 140
    590e:	d0 40       	sbci	r29, 0x00	; 0
    5910:	c0 57       	subi	r28, 0x70	; 112
    5912:	df 4f       	sbci	r29, 0xFF	; 255
    5914:	98 81       	ld	r25, Y
    5916:	c0 59       	subi	r28, 0x90	; 144
    5918:	d0 40       	sbci	r29, 0x00	; 0
    591a:	91 50       	subi	r25, 0x01	; 1
    591c:	c0 57       	subi	r28, 0x70	; 112
    591e:	df 4f       	sbci	r29, 0xFF	; 255
    5920:	98 83       	st	Y, r25
    5922:	c0 59       	subi	r28, 0x90	; 144
    5924:	d0 40       	sbci	r29, 0x00	; 0
    5926:	c0 57       	subi	r28, 0x70	; 112
    5928:	df 4f       	sbci	r29, 0xFF	; 255
    592a:	e8 81       	ld	r30, Y
    592c:	c0 59       	subi	r28, 0x90	; 144
    592e:	d0 40       	sbci	r29, 0x00	; 0
    5930:	ee 23       	and	r30, r30
    5932:	31 f6       	brne	.-116    	; 0x58c0 <LoginSystem_enuMainDashBoard+0x124>
				enuOptionPage(Local_pau8LedsOptions,4);
    5934:	ce 01       	movw	r24, r28
    5936:	83 59       	subi	r24, 0x93	; 147
    5938:	9f 4f       	sbci	r25, 0xFF	; 255
    593a:	64 e0       	ldi	r22, 0x04	; 4
    593c:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    5940:	fe 01       	movw	r30, r28
    5942:	e1 5a       	subi	r30, 0xA1	; 161
    5944:	ff 4f       	sbci	r31, 0xFF	; 255
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	a8 e4       	ldi	r26, 0x48	; 72
    594c:	b2 e4       	ldi	r27, 0x42	; 66
    594e:	80 83       	st	Z, r24
    5950:	91 83       	std	Z+1, r25	; 0x01
    5952:	a2 83       	std	Z+2, r26	; 0x02
    5954:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5956:	8e 01       	movw	r16, r28
    5958:	05 5a       	subi	r16, 0xA5	; 165
    595a:	1f 4f       	sbci	r17, 0xFF	; 255
    595c:	fe 01       	movw	r30, r28
    595e:	e1 5a       	subi	r30, 0xA1	; 161
    5960:	ff 4f       	sbci	r31, 0xFF	; 255
    5962:	60 81       	ld	r22, Z
    5964:	71 81       	ldd	r23, Z+1	; 0x01
    5966:	82 81       	ldd	r24, Z+2	; 0x02
    5968:	93 81       	ldd	r25, Z+3	; 0x03
    596a:	20 e0       	ldi	r18, 0x00	; 0
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	4a e7       	ldi	r20, 0x7A	; 122
    5970:	55 e4       	ldi	r21, 0x45	; 69
    5972:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5976:	dc 01       	movw	r26, r24
    5978:	cb 01       	movw	r24, r22
    597a:	f8 01       	movw	r30, r16
    597c:	80 83       	st	Z, r24
    597e:	91 83       	std	Z+1, r25	; 0x01
    5980:	a2 83       	std	Z+2, r26	; 0x02
    5982:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5984:	fe 01       	movw	r30, r28
    5986:	e5 5a       	subi	r30, 0xA5	; 165
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	60 81       	ld	r22, Z
    598c:	71 81       	ldd	r23, Z+1	; 0x01
    598e:	82 81       	ldd	r24, Z+2	; 0x02
    5990:	93 81       	ldd	r25, Z+3	; 0x03
    5992:	20 e0       	ldi	r18, 0x00	; 0
    5994:	30 e0       	ldi	r19, 0x00	; 0
    5996:	40 e8       	ldi	r20, 0x80	; 128
    5998:	5f e3       	ldi	r21, 0x3F	; 63
    599a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    599e:	88 23       	and	r24, r24
    59a0:	44 f4       	brge	.+16     	; 0x59b2 <LoginSystem_enuMainDashBoard+0x216>
		__ticks = 1;
    59a2:	fe 01       	movw	r30, r28
    59a4:	e7 5a       	subi	r30, 0xA7	; 167
    59a6:	ff 4f       	sbci	r31, 0xFF	; 255
    59a8:	81 e0       	ldi	r24, 0x01	; 1
    59aa:	90 e0       	ldi	r25, 0x00	; 0
    59ac:	91 83       	std	Z+1, r25	; 0x01
    59ae:	80 83       	st	Z, r24
    59b0:	64 c0       	rjmp	.+200    	; 0x5a7a <LoginSystem_enuMainDashBoard+0x2de>
	else if (__tmp > 65535)
    59b2:	fe 01       	movw	r30, r28
    59b4:	e5 5a       	subi	r30, 0xA5	; 165
    59b6:	ff 4f       	sbci	r31, 0xFF	; 255
    59b8:	60 81       	ld	r22, Z
    59ba:	71 81       	ldd	r23, Z+1	; 0x01
    59bc:	82 81       	ldd	r24, Z+2	; 0x02
    59be:	93 81       	ldd	r25, Z+3	; 0x03
    59c0:	20 e0       	ldi	r18, 0x00	; 0
    59c2:	3f ef       	ldi	r19, 0xFF	; 255
    59c4:	4f e7       	ldi	r20, 0x7F	; 127
    59c6:	57 e4       	ldi	r21, 0x47	; 71
    59c8:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    59cc:	18 16       	cp	r1, r24
    59ce:	0c f0       	brlt	.+2      	; 0x59d2 <LoginSystem_enuMainDashBoard+0x236>
    59d0:	43 c0       	rjmp	.+134    	; 0x5a58 <LoginSystem_enuMainDashBoard+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59d2:	fe 01       	movw	r30, r28
    59d4:	e1 5a       	subi	r30, 0xA1	; 161
    59d6:	ff 4f       	sbci	r31, 0xFF	; 255
    59d8:	60 81       	ld	r22, Z
    59da:	71 81       	ldd	r23, Z+1	; 0x01
    59dc:	82 81       	ldd	r24, Z+2	; 0x02
    59de:	93 81       	ldd	r25, Z+3	; 0x03
    59e0:	20 e0       	ldi	r18, 0x00	; 0
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	40 e2       	ldi	r20, 0x20	; 32
    59e6:	51 e4       	ldi	r21, 0x41	; 65
    59e8:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    59ec:	dc 01       	movw	r26, r24
    59ee:	cb 01       	movw	r24, r22
    59f0:	8e 01       	movw	r16, r28
    59f2:	07 5a       	subi	r16, 0xA7	; 167
    59f4:	1f 4f       	sbci	r17, 0xFF	; 255
    59f6:	bc 01       	movw	r22, r24
    59f8:	cd 01       	movw	r24, r26
    59fa:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    59fe:	dc 01       	movw	r26, r24
    5a00:	cb 01       	movw	r24, r22
    5a02:	f8 01       	movw	r30, r16
    5a04:	91 83       	std	Z+1, r25	; 0x01
    5a06:	80 83       	st	Z, r24
    5a08:	1f c0       	rjmp	.+62     	; 0x5a48 <LoginSystem_enuMainDashBoard+0x2ac>
    5a0a:	fe 01       	movw	r30, r28
    5a0c:	e9 5a       	subi	r30, 0xA9	; 169
    5a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a10:	80 e9       	ldi	r24, 0x90	; 144
    5a12:	91 e0       	ldi	r25, 0x01	; 1
    5a14:	91 83       	std	Z+1, r25	; 0x01
    5a16:	80 83       	st	Z, r24
    5a18:	fe 01       	movw	r30, r28
    5a1a:	e9 5a       	subi	r30, 0xA9	; 169
    5a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1e:	80 81       	ld	r24, Z
    5a20:	91 81       	ldd	r25, Z+1	; 0x01
    5a22:	01 97       	sbiw	r24, 0x01	; 1
    5a24:	f1 f7       	brne	.-4      	; 0x5a22 <LoginSystem_enuMainDashBoard+0x286>
    5a26:	fe 01       	movw	r30, r28
    5a28:	e9 5a       	subi	r30, 0xA9	; 169
    5a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2c:	91 83       	std	Z+1, r25	; 0x01
    5a2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a30:	de 01       	movw	r26, r28
    5a32:	a7 5a       	subi	r26, 0xA7	; 167
    5a34:	bf 4f       	sbci	r27, 0xFF	; 255
    5a36:	fe 01       	movw	r30, r28
    5a38:	e7 5a       	subi	r30, 0xA7	; 167
    5a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3c:	80 81       	ld	r24, Z
    5a3e:	91 81       	ldd	r25, Z+1	; 0x01
    5a40:	01 97       	sbiw	r24, 0x01	; 1
    5a42:	11 96       	adiw	r26, 0x01	; 1
    5a44:	9c 93       	st	X, r25
    5a46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a48:	fe 01       	movw	r30, r28
    5a4a:	e7 5a       	subi	r30, 0xA7	; 167
    5a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4e:	80 81       	ld	r24, Z
    5a50:	91 81       	ldd	r25, Z+1	; 0x01
    5a52:	00 97       	sbiw	r24, 0x00	; 0
    5a54:	d1 f6       	brne	.-76     	; 0x5a0a <LoginSystem_enuMainDashBoard+0x26e>
    5a56:	27 c0       	rjmp	.+78     	; 0x5aa6 <LoginSystem_enuMainDashBoard+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a58:	8e 01       	movw	r16, r28
    5a5a:	07 5a       	subi	r16, 0xA7	; 167
    5a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a5e:	fe 01       	movw	r30, r28
    5a60:	e5 5a       	subi	r30, 0xA5	; 165
    5a62:	ff 4f       	sbci	r31, 0xFF	; 255
    5a64:	60 81       	ld	r22, Z
    5a66:	71 81       	ldd	r23, Z+1	; 0x01
    5a68:	82 81       	ldd	r24, Z+2	; 0x02
    5a6a:	93 81       	ldd	r25, Z+3	; 0x03
    5a6c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5a70:	dc 01       	movw	r26, r24
    5a72:	cb 01       	movw	r24, r22
    5a74:	f8 01       	movw	r30, r16
    5a76:	91 83       	std	Z+1, r25	; 0x01
    5a78:	80 83       	st	Z, r24
    5a7a:	de 01       	movw	r26, r28
    5a7c:	ab 5a       	subi	r26, 0xAB	; 171
    5a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    5a80:	fe 01       	movw	r30, r28
    5a82:	e7 5a       	subi	r30, 0xA7	; 167
    5a84:	ff 4f       	sbci	r31, 0xFF	; 255
    5a86:	80 81       	ld	r24, Z
    5a88:	91 81       	ldd	r25, Z+1	; 0x01
    5a8a:	8d 93       	st	X+, r24
    5a8c:	9c 93       	st	X, r25
    5a8e:	fe 01       	movw	r30, r28
    5a90:	eb 5a       	subi	r30, 0xAB	; 171
    5a92:	ff 4f       	sbci	r31, 0xFF	; 255
    5a94:	80 81       	ld	r24, Z
    5a96:	91 81       	ldd	r25, Z+1	; 0x01
    5a98:	01 97       	sbiw	r24, 0x01	; 1
    5a9a:	f1 f7       	brne	.-4      	; 0x5a98 <LoginSystem_enuMainDashBoard+0x2fc>
    5a9c:	fe 01       	movw	r30, r28
    5a9e:	eb 5a       	subi	r30, 0xAB	; 171
    5aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa2:	91 83       	std	Z+1, r25	; 0x01
    5aa4:	80 83       	st	Z, r24

				while(1){
					_delay_ms(50);
					Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    5aa6:	ce 01       	movw	r24, r28
    5aa8:	84 59       	subi	r24, 0x94	; 148
    5aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    5aac:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>

					if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    5ab0:	fe 01       	movw	r30, r28
    5ab2:	e4 59       	subi	r30, 0x94	; 148
    5ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab6:	80 81       	ld	r24, Z
    5ab8:	8f 3f       	cpi	r24, 0xFF	; 255
    5aba:	09 f4       	brne	.+2      	; 0x5abe <LoginSystem_enuMainDashBoard+0x322>
    5abc:	41 cf       	rjmp	.-382    	; 0x5940 <LoginSystem_enuMainDashBoard+0x1a4>

						u8 * Local_pau8LedStateOptions[] = {"1-LED ON","2-LED OFF","3-BACK"};
    5abe:	ce 01       	movw	r24, r28
    5ac0:	8b 58       	subi	r24, 0x8B	; 139
    5ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac4:	cf 56       	subi	r28, 0x6F	; 111
    5ac6:	df 4f       	sbci	r29, 0xFF	; 255
    5ac8:	99 83       	std	Y+1, r25	; 0x01
    5aca:	88 83       	st	Y, r24
    5acc:	c1 59       	subi	r28, 0x91	; 145
    5ace:	d0 40       	sbci	r29, 0x00	; 0
    5ad0:	8f ee       	ldi	r24, 0xEF	; 239
    5ad2:	92 e0       	ldi	r25, 0x02	; 2
    5ad4:	cd 56       	subi	r28, 0x6D	; 109
    5ad6:	df 4f       	sbci	r29, 0xFF	; 255
    5ad8:	99 83       	std	Y+1, r25	; 0x01
    5ada:	88 83       	st	Y, r24
    5adc:	c3 59       	subi	r28, 0x93	; 147
    5ade:	d0 40       	sbci	r29, 0x00	; 0
    5ae0:	96 e0       	ldi	r25, 0x06	; 6
    5ae2:	cb 56       	subi	r28, 0x6B	; 107
    5ae4:	df 4f       	sbci	r29, 0xFF	; 255
    5ae6:	98 83       	st	Y, r25
    5ae8:	c5 59       	subi	r28, 0x95	; 149
    5aea:	d0 40       	sbci	r29, 0x00	; 0
    5aec:	cd 56       	subi	r28, 0x6D	; 109
    5aee:	df 4f       	sbci	r29, 0xFF	; 255
    5af0:	e8 81       	ld	r30, Y
    5af2:	f9 81       	ldd	r31, Y+1	; 0x01
    5af4:	c3 59       	subi	r28, 0x93	; 147
    5af6:	d0 40       	sbci	r29, 0x00	; 0
    5af8:	00 80       	ld	r0, Z
    5afa:	cd 56       	subi	r28, 0x6D	; 109
    5afc:	df 4f       	sbci	r29, 0xFF	; 255
    5afe:	88 81       	ld	r24, Y
    5b00:	99 81       	ldd	r25, Y+1	; 0x01
    5b02:	c3 59       	subi	r28, 0x93	; 147
    5b04:	d0 40       	sbci	r29, 0x00	; 0
    5b06:	01 96       	adiw	r24, 0x01	; 1
    5b08:	cd 56       	subi	r28, 0x6D	; 109
    5b0a:	df 4f       	sbci	r29, 0xFF	; 255
    5b0c:	99 83       	std	Y+1, r25	; 0x01
    5b0e:	88 83       	st	Y, r24
    5b10:	c3 59       	subi	r28, 0x93	; 147
    5b12:	d0 40       	sbci	r29, 0x00	; 0
    5b14:	cf 56       	subi	r28, 0x6F	; 111
    5b16:	df 4f       	sbci	r29, 0xFF	; 255
    5b18:	e8 81       	ld	r30, Y
    5b1a:	f9 81       	ldd	r31, Y+1	; 0x01
    5b1c:	c1 59       	subi	r28, 0x91	; 145
    5b1e:	d0 40       	sbci	r29, 0x00	; 0
    5b20:	00 82       	st	Z, r0
    5b22:	cf 56       	subi	r28, 0x6F	; 111
    5b24:	df 4f       	sbci	r29, 0xFF	; 255
    5b26:	88 81       	ld	r24, Y
    5b28:	99 81       	ldd	r25, Y+1	; 0x01
    5b2a:	c1 59       	subi	r28, 0x91	; 145
    5b2c:	d0 40       	sbci	r29, 0x00	; 0
    5b2e:	01 96       	adiw	r24, 0x01	; 1
    5b30:	cf 56       	subi	r28, 0x6F	; 111
    5b32:	df 4f       	sbci	r29, 0xFF	; 255
    5b34:	99 83       	std	Y+1, r25	; 0x01
    5b36:	88 83       	st	Y, r24
    5b38:	c1 59       	subi	r28, 0x91	; 145
    5b3a:	d0 40       	sbci	r29, 0x00	; 0
    5b3c:	cb 56       	subi	r28, 0x6B	; 107
    5b3e:	df 4f       	sbci	r29, 0xFF	; 255
    5b40:	98 81       	ld	r25, Y
    5b42:	c5 59       	subi	r28, 0x95	; 149
    5b44:	d0 40       	sbci	r29, 0x00	; 0
    5b46:	91 50       	subi	r25, 0x01	; 1
    5b48:	cb 56       	subi	r28, 0x6B	; 107
    5b4a:	df 4f       	sbci	r29, 0xFF	; 255
    5b4c:	98 83       	st	Y, r25
    5b4e:	c5 59       	subi	r28, 0x95	; 149
    5b50:	d0 40       	sbci	r29, 0x00	; 0
    5b52:	cb 56       	subi	r28, 0x6B	; 107
    5b54:	df 4f       	sbci	r29, 0xFF	; 255
    5b56:	e8 81       	ld	r30, Y
    5b58:	c5 59       	subi	r28, 0x95	; 149
    5b5a:	d0 40       	sbci	r29, 0x00	; 0
    5b5c:	ee 23       	and	r30, r30
    5b5e:	31 f6       	brne	.-116    	; 0x5aec <LoginSystem_enuMainDashBoard+0x350>
						//enuOptionPage(Local_pau8LedStateOptions,3);

						if(Local_u8KeypadValue == '1'){
    5b60:	fe 01       	movw	r30, r28
    5b62:	e4 59       	subi	r30, 0x94	; 148
    5b64:	ff 4f       	sbci	r31, 0xFF	; 255
    5b66:	80 81       	ld	r24, Z
    5b68:	81 33       	cpi	r24, 0x31	; 49
    5b6a:	09 f0       	breq	.+2      	; 0x5b6e <LoginSystem_enuMainDashBoard+0x3d2>
    5b6c:	e7 c0       	rjmp	.+462    	; 0x5d3c <LoginSystem_enuMainDashBoard+0x5a0>

							enuOptionPage(Local_pau8LedStateOptions,3);
    5b6e:	ce 01       	movw	r24, r28
    5b70:	8b 58       	subi	r24, 0x8B	; 139
    5b72:	9f 4f       	sbci	r25, 0xFF	; 255
    5b74:	63 e0       	ldi	r22, 0x03	; 3
    5b76:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    5b7a:	fe 01       	movw	r30, r28
    5b7c:	ef 5a       	subi	r30, 0xAF	; 175
    5b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b80:	80 e0       	ldi	r24, 0x00	; 0
    5b82:	90 e0       	ldi	r25, 0x00	; 0
    5b84:	a8 e4       	ldi	r26, 0x48	; 72
    5b86:	b2 e4       	ldi	r27, 0x42	; 66
    5b88:	80 83       	st	Z, r24
    5b8a:	91 83       	std	Z+1, r25	; 0x01
    5b8c:	a2 83       	std	Z+2, r26	; 0x02
    5b8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b90:	8e 01       	movw	r16, r28
    5b92:	03 5b       	subi	r16, 0xB3	; 179
    5b94:	1f 4f       	sbci	r17, 0xFF	; 255
    5b96:	fe 01       	movw	r30, r28
    5b98:	ef 5a       	subi	r30, 0xAF	; 175
    5b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b9c:	60 81       	ld	r22, Z
    5b9e:	71 81       	ldd	r23, Z+1	; 0x01
    5ba0:	82 81       	ldd	r24, Z+2	; 0x02
    5ba2:	93 81       	ldd	r25, Z+3	; 0x03
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
    5ba8:	4a e7       	ldi	r20, 0x7A	; 122
    5baa:	55 e4       	ldi	r21, 0x45	; 69
    5bac:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	cb 01       	movw	r24, r22
    5bb4:	f8 01       	movw	r30, r16
    5bb6:	80 83       	st	Z, r24
    5bb8:	91 83       	std	Z+1, r25	; 0x01
    5bba:	a2 83       	std	Z+2, r26	; 0x02
    5bbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bbe:	fe 01       	movw	r30, r28
    5bc0:	e3 5b       	subi	r30, 0xB3	; 179
    5bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc4:	60 81       	ld	r22, Z
    5bc6:	71 81       	ldd	r23, Z+1	; 0x01
    5bc8:	82 81       	ldd	r24, Z+2	; 0x02
    5bca:	93 81       	ldd	r25, Z+3	; 0x03
    5bcc:	20 e0       	ldi	r18, 0x00	; 0
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	40 e8       	ldi	r20, 0x80	; 128
    5bd2:	5f e3       	ldi	r21, 0x3F	; 63
    5bd4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    5bd8:	88 23       	and	r24, r24
    5bda:	44 f4       	brge	.+16     	; 0x5bec <LoginSystem_enuMainDashBoard+0x450>
		__ticks = 1;
    5bdc:	fe 01       	movw	r30, r28
    5bde:	e5 5b       	subi	r30, 0xB5	; 181
    5be0:	ff 4f       	sbci	r31, 0xFF	; 255
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	91 83       	std	Z+1, r25	; 0x01
    5be8:	80 83       	st	Z, r24
    5bea:	64 c0       	rjmp	.+200    	; 0x5cb4 <LoginSystem_enuMainDashBoard+0x518>
	else if (__tmp > 65535)
    5bec:	fe 01       	movw	r30, r28
    5bee:	e3 5b       	subi	r30, 0xB3	; 179
    5bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf2:	60 81       	ld	r22, Z
    5bf4:	71 81       	ldd	r23, Z+1	; 0x01
    5bf6:	82 81       	ldd	r24, Z+2	; 0x02
    5bf8:	93 81       	ldd	r25, Z+3	; 0x03
    5bfa:	20 e0       	ldi	r18, 0x00	; 0
    5bfc:	3f ef       	ldi	r19, 0xFF	; 255
    5bfe:	4f e7       	ldi	r20, 0x7F	; 127
    5c00:	57 e4       	ldi	r21, 0x47	; 71
    5c02:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    5c06:	18 16       	cp	r1, r24
    5c08:	0c f0       	brlt	.+2      	; 0x5c0c <LoginSystem_enuMainDashBoard+0x470>
    5c0a:	43 c0       	rjmp	.+134    	; 0x5c92 <LoginSystem_enuMainDashBoard+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c0c:	fe 01       	movw	r30, r28
    5c0e:	ef 5a       	subi	r30, 0xAF	; 175
    5c10:	ff 4f       	sbci	r31, 0xFF	; 255
    5c12:	60 81       	ld	r22, Z
    5c14:	71 81       	ldd	r23, Z+1	; 0x01
    5c16:	82 81       	ldd	r24, Z+2	; 0x02
    5c18:	93 81       	ldd	r25, Z+3	; 0x03
    5c1a:	20 e0       	ldi	r18, 0x00	; 0
    5c1c:	30 e0       	ldi	r19, 0x00	; 0
    5c1e:	40 e2       	ldi	r20, 0x20	; 32
    5c20:	51 e4       	ldi	r21, 0x41	; 65
    5c22:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5c26:	dc 01       	movw	r26, r24
    5c28:	cb 01       	movw	r24, r22
    5c2a:	8e 01       	movw	r16, r28
    5c2c:	05 5b       	subi	r16, 0xB5	; 181
    5c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c30:	bc 01       	movw	r22, r24
    5c32:	cd 01       	movw	r24, r26
    5c34:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5c38:	dc 01       	movw	r26, r24
    5c3a:	cb 01       	movw	r24, r22
    5c3c:	f8 01       	movw	r30, r16
    5c3e:	91 83       	std	Z+1, r25	; 0x01
    5c40:	80 83       	st	Z, r24
    5c42:	1f c0       	rjmp	.+62     	; 0x5c82 <LoginSystem_enuMainDashBoard+0x4e6>
    5c44:	fe 01       	movw	r30, r28
    5c46:	e7 5b       	subi	r30, 0xB7	; 183
    5c48:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4a:	80 e9       	ldi	r24, 0x90	; 144
    5c4c:	91 e0       	ldi	r25, 0x01	; 1
    5c4e:	91 83       	std	Z+1, r25	; 0x01
    5c50:	80 83       	st	Z, r24
    5c52:	fe 01       	movw	r30, r28
    5c54:	e7 5b       	subi	r30, 0xB7	; 183
    5c56:	ff 4f       	sbci	r31, 0xFF	; 255
    5c58:	80 81       	ld	r24, Z
    5c5a:	91 81       	ldd	r25, Z+1	; 0x01
    5c5c:	01 97       	sbiw	r24, 0x01	; 1
    5c5e:	f1 f7       	brne	.-4      	; 0x5c5c <LoginSystem_enuMainDashBoard+0x4c0>
    5c60:	fe 01       	movw	r30, r28
    5c62:	e7 5b       	subi	r30, 0xB7	; 183
    5c64:	ff 4f       	sbci	r31, 0xFF	; 255
    5c66:	91 83       	std	Z+1, r25	; 0x01
    5c68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c6a:	de 01       	movw	r26, r28
    5c6c:	a5 5b       	subi	r26, 0xB5	; 181
    5c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    5c70:	fe 01       	movw	r30, r28
    5c72:	e5 5b       	subi	r30, 0xB5	; 181
    5c74:	ff 4f       	sbci	r31, 0xFF	; 255
    5c76:	80 81       	ld	r24, Z
    5c78:	91 81       	ldd	r25, Z+1	; 0x01
    5c7a:	01 97       	sbiw	r24, 0x01	; 1
    5c7c:	11 96       	adiw	r26, 0x01	; 1
    5c7e:	9c 93       	st	X, r25
    5c80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c82:	fe 01       	movw	r30, r28
    5c84:	e5 5b       	subi	r30, 0xB5	; 181
    5c86:	ff 4f       	sbci	r31, 0xFF	; 255
    5c88:	80 81       	ld	r24, Z
    5c8a:	91 81       	ldd	r25, Z+1	; 0x01
    5c8c:	00 97       	sbiw	r24, 0x00	; 0
    5c8e:	d1 f6       	brne	.-76     	; 0x5c44 <LoginSystem_enuMainDashBoard+0x4a8>
    5c90:	27 c0       	rjmp	.+78     	; 0x5ce0 <LoginSystem_enuMainDashBoard+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c92:	8e 01       	movw	r16, r28
    5c94:	05 5b       	subi	r16, 0xB5	; 181
    5c96:	1f 4f       	sbci	r17, 0xFF	; 255
    5c98:	fe 01       	movw	r30, r28
    5c9a:	e3 5b       	subi	r30, 0xB3	; 179
    5c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c9e:	60 81       	ld	r22, Z
    5ca0:	71 81       	ldd	r23, Z+1	; 0x01
    5ca2:	82 81       	ldd	r24, Z+2	; 0x02
    5ca4:	93 81       	ldd	r25, Z+3	; 0x03
    5ca6:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5caa:	dc 01       	movw	r26, r24
    5cac:	cb 01       	movw	r24, r22
    5cae:	f8 01       	movw	r30, r16
    5cb0:	91 83       	std	Z+1, r25	; 0x01
    5cb2:	80 83       	st	Z, r24
    5cb4:	de 01       	movw	r26, r28
    5cb6:	a9 5b       	subi	r26, 0xB9	; 185
    5cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    5cba:	fe 01       	movw	r30, r28
    5cbc:	e5 5b       	subi	r30, 0xB5	; 181
    5cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc0:	80 81       	ld	r24, Z
    5cc2:	91 81       	ldd	r25, Z+1	; 0x01
    5cc4:	8d 93       	st	X+, r24
    5cc6:	9c 93       	st	X, r25
    5cc8:	fe 01       	movw	r30, r28
    5cca:	e9 5b       	subi	r30, 0xB9	; 185
    5ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cce:	80 81       	ld	r24, Z
    5cd0:	91 81       	ldd	r25, Z+1	; 0x01
    5cd2:	01 97       	sbiw	r24, 0x01	; 1
    5cd4:	f1 f7       	brne	.-4      	; 0x5cd2 <LoginSystem_enuMainDashBoard+0x536>
    5cd6:	fe 01       	movw	r30, r28
    5cd8:	e9 5b       	subi	r30, 0xB9	; 185
    5cda:	ff 4f       	sbci	r31, 0xFF	; 255
    5cdc:	91 83       	std	Z+1, r25	; 0x01
    5cde:	80 83       	st	Z, r24
							while(1){
								_delay_ms(50);

								Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    5ce0:	ce 01       	movw	r24, r28
    5ce2:	84 59       	subi	r24, 0x94	; 148
    5ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce6:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>

								if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    5cea:	fe 01       	movw	r30, r28
    5cec:	e4 59       	subi	r30, 0x94	; 148
    5cee:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf0:	80 81       	ld	r24, Z
    5cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    5cf4:	09 f4       	brne	.+2      	; 0x5cf8 <LoginSystem_enuMainDashBoard+0x55c>
    5cf6:	41 cf       	rjmp	.-382    	; 0x5b7a <LoginSystem_enuMainDashBoard+0x3de>

									if(Local_u8KeypadValue == '1'){
    5cf8:	fe 01       	movw	r30, r28
    5cfa:	e4 59       	subi	r30, 0x94	; 148
    5cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfe:	80 81       	ld	r24, Z
    5d00:	81 33       	cpi	r24, 0x31	; 49
    5d02:	21 f4       	brne	.+8      	; 0x5d0c <LoginSystem_enuMainDashBoard+0x570>

										Led_enuLedTurnON(LED_GREEN_ID);
    5d04:	80 e0       	ldi	r24, 0x00	; 0
    5d06:	0e 94 40 1b 	call	0x3680	; 0x3680 <Led_enuLedTurnON>
    5d0a:	37 cf       	rjmp	.-402    	; 0x5b7a <LoginSystem_enuMainDashBoard+0x3de>
									}

									else if(Local_u8KeypadValue == '2'){
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	e4 59       	subi	r30, 0x94	; 148
    5d10:	ff 4f       	sbci	r31, 0xFF	; 255
    5d12:	80 81       	ld	r24, Z
    5d14:	82 33       	cpi	r24, 0x32	; 50
    5d16:	21 f4       	brne	.+8      	; 0x5d20 <LoginSystem_enuMainDashBoard+0x584>

										Led_enuLedTurnOFF(LED_GREEN_ID);
    5d18:	80 e0       	ldi	r24, 0x00	; 0
    5d1a:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>
    5d1e:	2d cf       	rjmp	.-422    	; 0x5b7a <LoginSystem_enuMainDashBoard+0x3de>
									}
									else if(Local_u8KeypadValue == '3'){
    5d20:	fe 01       	movw	r30, r28
    5d22:	e4 59       	subi	r30, 0x94	; 148
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	80 81       	ld	r24, Z
    5d28:	83 33       	cpi	r24, 0x33	; 51
    5d2a:	09 f0       	breq	.+2      	; 0x5d2e <LoginSystem_enuMainDashBoard+0x592>
    5d2c:	26 cf       	rjmp	.-436    	; 0x5b7a <LoginSystem_enuMainDashBoard+0x3de>

										enuOptionPage(Local_pau8LedsOptions,4);
    5d2e:	ce 01       	movw	r24, r28
    5d30:	83 59       	subi	r24, 0x93	; 147
    5d32:	9f 4f       	sbci	r25, 0xFF	; 255
    5d34:	64 e0       	ldi	r22, 0x04	; 4
    5d36:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    5d3a:	02 ce       	rjmp	.-1020   	; 0x5940 <LoginSystem_enuMainDashBoard+0x1a4>
								}
							}

						}

						else if(Local_u8KeypadValue == '2'){
    5d3c:	fe 01       	movw	r30, r28
    5d3e:	e4 59       	subi	r30, 0x94	; 148
    5d40:	ff 4f       	sbci	r31, 0xFF	; 255
    5d42:	80 81       	ld	r24, Z
    5d44:	82 33       	cpi	r24, 0x32	; 50
    5d46:	09 f0       	breq	.+2      	; 0x5d4a <LoginSystem_enuMainDashBoard+0x5ae>
    5d48:	b9 c0       	rjmp	.+370    	; 0x5ebc <LoginSystem_enuMainDashBoard+0x720>
							enuOptionPage(Local_pau8LedStateOptions,3);
    5d4a:	ce 01       	movw	r24, r28
    5d4c:	8b 58       	subi	r24, 0x8B	; 139
    5d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d50:	63 e0       	ldi	r22, 0x03	; 3
    5d52:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    5d56:	fe 01       	movw	r30, r28
    5d58:	ed 5b       	subi	r30, 0xBD	; 189
    5d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5c:	80 e0       	ldi	r24, 0x00	; 0
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	a8 e4       	ldi	r26, 0x48	; 72
    5d62:	b2 e4       	ldi	r27, 0x42	; 66
    5d64:	80 83       	st	Z, r24
    5d66:	91 83       	std	Z+1, r25	; 0x01
    5d68:	a2 83       	std	Z+2, r26	; 0x02
    5d6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d6c:	8e 01       	movw	r16, r28
    5d6e:	01 5c       	subi	r16, 0xC1	; 193
    5d70:	1f 4f       	sbci	r17, 0xFF	; 255
    5d72:	fe 01       	movw	r30, r28
    5d74:	ed 5b       	subi	r30, 0xBD	; 189
    5d76:	ff 4f       	sbci	r31, 0xFF	; 255
    5d78:	60 81       	ld	r22, Z
    5d7a:	71 81       	ldd	r23, Z+1	; 0x01
    5d7c:	82 81       	ldd	r24, Z+2	; 0x02
    5d7e:	93 81       	ldd	r25, Z+3	; 0x03
    5d80:	20 e0       	ldi	r18, 0x00	; 0
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	4a e7       	ldi	r20, 0x7A	; 122
    5d86:	55 e4       	ldi	r21, 0x45	; 69
    5d88:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	cb 01       	movw	r24, r22
    5d90:	f8 01       	movw	r30, r16
    5d92:	80 83       	st	Z, r24
    5d94:	91 83       	std	Z+1, r25	; 0x01
    5d96:	a2 83       	std	Z+2, r26	; 0x02
    5d98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d9a:	fe 01       	movw	r30, r28
    5d9c:	ff 96       	adiw	r30, 0x3f	; 63
    5d9e:	60 81       	ld	r22, Z
    5da0:	71 81       	ldd	r23, Z+1	; 0x01
    5da2:	82 81       	ldd	r24, Z+2	; 0x02
    5da4:	93 81       	ldd	r25, Z+3	; 0x03
    5da6:	20 e0       	ldi	r18, 0x00	; 0
    5da8:	30 e0       	ldi	r19, 0x00	; 0
    5daa:	40 e8       	ldi	r20, 0x80	; 128
    5dac:	5f e3       	ldi	r21, 0x3F	; 63
    5dae:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    5db2:	88 23       	and	r24, r24
    5db4:	2c f4       	brge	.+10     	; 0x5dc0 <LoginSystem_enuMainDashBoard+0x624>
		__ticks = 1;
    5db6:	81 e0       	ldi	r24, 0x01	; 1
    5db8:	90 e0       	ldi	r25, 0x00	; 0
    5dba:	9e af       	std	Y+62, r25	; 0x3e
    5dbc:	8d af       	std	Y+61, r24	; 0x3d
    5dbe:	46 c0       	rjmp	.+140    	; 0x5e4c <LoginSystem_enuMainDashBoard+0x6b0>
	else if (__tmp > 65535)
    5dc0:	fe 01       	movw	r30, r28
    5dc2:	ff 96       	adiw	r30, 0x3f	; 63
    5dc4:	60 81       	ld	r22, Z
    5dc6:	71 81       	ldd	r23, Z+1	; 0x01
    5dc8:	82 81       	ldd	r24, Z+2	; 0x02
    5dca:	93 81       	ldd	r25, Z+3	; 0x03
    5dcc:	20 e0       	ldi	r18, 0x00	; 0
    5dce:	3f ef       	ldi	r19, 0xFF	; 255
    5dd0:	4f e7       	ldi	r20, 0x7F	; 127
    5dd2:	57 e4       	ldi	r21, 0x47	; 71
    5dd4:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    5dd8:	18 16       	cp	r1, r24
    5dda:	64 f5       	brge	.+88     	; 0x5e34 <LoginSystem_enuMainDashBoard+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ddc:	fe 01       	movw	r30, r28
    5dde:	ed 5b       	subi	r30, 0xBD	; 189
    5de0:	ff 4f       	sbci	r31, 0xFF	; 255
    5de2:	60 81       	ld	r22, Z
    5de4:	71 81       	ldd	r23, Z+1	; 0x01
    5de6:	82 81       	ldd	r24, Z+2	; 0x02
    5de8:	93 81       	ldd	r25, Z+3	; 0x03
    5dea:	20 e0       	ldi	r18, 0x00	; 0
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	40 e2       	ldi	r20, 0x20	; 32
    5df0:	51 e4       	ldi	r21, 0x41	; 65
    5df2:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5df6:	dc 01       	movw	r26, r24
    5df8:	cb 01       	movw	r24, r22
    5dfa:	bc 01       	movw	r22, r24
    5dfc:	cd 01       	movw	r24, r26
    5dfe:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5e02:	dc 01       	movw	r26, r24
    5e04:	cb 01       	movw	r24, r22
    5e06:	9e af       	std	Y+62, r25	; 0x3e
    5e08:	8d af       	std	Y+61, r24	; 0x3d
    5e0a:	0f c0       	rjmp	.+30     	; 0x5e2a <LoginSystem_enuMainDashBoard+0x68e>
    5e0c:	80 e9       	ldi	r24, 0x90	; 144
    5e0e:	91 e0       	ldi	r25, 0x01	; 1
    5e10:	9c af       	std	Y+60, r25	; 0x3c
    5e12:	8b af       	std	Y+59, r24	; 0x3b
    5e14:	8b ad       	ldd	r24, Y+59	; 0x3b
    5e16:	9c ad       	ldd	r25, Y+60	; 0x3c
    5e18:	01 97       	sbiw	r24, 0x01	; 1
    5e1a:	f1 f7       	brne	.-4      	; 0x5e18 <LoginSystem_enuMainDashBoard+0x67c>
    5e1c:	9c af       	std	Y+60, r25	; 0x3c
    5e1e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e20:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e22:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e24:	01 97       	sbiw	r24, 0x01	; 1
    5e26:	9e af       	std	Y+62, r25	; 0x3e
    5e28:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e2e:	00 97       	sbiw	r24, 0x00	; 0
    5e30:	69 f7       	brne	.-38     	; 0x5e0c <LoginSystem_enuMainDashBoard+0x670>
    5e32:	16 c0       	rjmp	.+44     	; 0x5e60 <LoginSystem_enuMainDashBoard+0x6c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e34:	fe 01       	movw	r30, r28
    5e36:	ff 96       	adiw	r30, 0x3f	; 63
    5e38:	60 81       	ld	r22, Z
    5e3a:	71 81       	ldd	r23, Z+1	; 0x01
    5e3c:	82 81       	ldd	r24, Z+2	; 0x02
    5e3e:	93 81       	ldd	r25, Z+3	; 0x03
    5e40:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	9e af       	std	Y+62, r25	; 0x3e
    5e4a:	8d af       	std	Y+61, r24	; 0x3d
    5e4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e50:	9a af       	std	Y+58, r25	; 0x3a
    5e52:	89 af       	std	Y+57, r24	; 0x39
    5e54:	89 ad       	ldd	r24, Y+57	; 0x39
    5e56:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e58:	01 97       	sbiw	r24, 0x01	; 1
    5e5a:	f1 f7       	brne	.-4      	; 0x5e58 <LoginSystem_enuMainDashBoard+0x6bc>
    5e5c:	9a af       	std	Y+58, r25	; 0x3a
    5e5e:	89 af       	std	Y+57, r24	; 0x39

							while(1){
								_delay_ms(50);

								Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    5e60:	ce 01       	movw	r24, r28
    5e62:	84 59       	subi	r24, 0x94	; 148
    5e64:	9f 4f       	sbci	r25, 0xFF	; 255
    5e66:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>

								if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    5e6a:	fe 01       	movw	r30, r28
    5e6c:	e4 59       	subi	r30, 0x94	; 148
    5e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e70:	80 81       	ld	r24, Z
    5e72:	8f 3f       	cpi	r24, 0xFF	; 255
    5e74:	09 f4       	brne	.+2      	; 0x5e78 <LoginSystem_enuMainDashBoard+0x6dc>
    5e76:	6f cf       	rjmp	.-290    	; 0x5d56 <LoginSystem_enuMainDashBoard+0x5ba>

									if(Local_u8KeypadValue == '1'){
    5e78:	fe 01       	movw	r30, r28
    5e7a:	e4 59       	subi	r30, 0x94	; 148
    5e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e7e:	80 81       	ld	r24, Z
    5e80:	81 33       	cpi	r24, 0x31	; 49
    5e82:	21 f4       	brne	.+8      	; 0x5e8c <LoginSystem_enuMainDashBoard+0x6f0>

										Led_enuLedTurnON(LED_RED_ID);
    5e84:	81 e0       	ldi	r24, 0x01	; 1
    5e86:	0e 94 40 1b 	call	0x3680	; 0x3680 <Led_enuLedTurnON>
    5e8a:	65 cf       	rjmp	.-310    	; 0x5d56 <LoginSystem_enuMainDashBoard+0x5ba>
									}
									else if(Local_u8KeypadValue == '2'){
    5e8c:	fe 01       	movw	r30, r28
    5e8e:	e4 59       	subi	r30, 0x94	; 148
    5e90:	ff 4f       	sbci	r31, 0xFF	; 255
    5e92:	80 81       	ld	r24, Z
    5e94:	82 33       	cpi	r24, 0x32	; 50
    5e96:	21 f4       	brne	.+8      	; 0x5ea0 <LoginSystem_enuMainDashBoard+0x704>

										Led_enuLedTurnOFF(LED_RED_ID);
    5e98:	81 e0       	ldi	r24, 0x01	; 1
    5e9a:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>
    5e9e:	5b cf       	rjmp	.-330    	; 0x5d56 <LoginSystem_enuMainDashBoard+0x5ba>

									}
									else if(Local_u8KeypadValue == '3'){
    5ea0:	fe 01       	movw	r30, r28
    5ea2:	e4 59       	subi	r30, 0x94	; 148
    5ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ea6:	80 81       	ld	r24, Z
    5ea8:	83 33       	cpi	r24, 0x33	; 51
    5eaa:	09 f0       	breq	.+2      	; 0x5eae <LoginSystem_enuMainDashBoard+0x712>
    5eac:	54 cf       	rjmp	.-344    	; 0x5d56 <LoginSystem_enuMainDashBoard+0x5ba>
										enuOptionPage(Local_pau8LedsOptions,4);
    5eae:	ce 01       	movw	r24, r28
    5eb0:	83 59       	subi	r24, 0x93	; 147
    5eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5eb4:	64 e0       	ldi	r22, 0x04	; 4
    5eb6:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    5eba:	42 cd       	rjmp	.-1404   	; 0x5940 <LoginSystem_enuMainDashBoard+0x1a4>
								}

							}

						}
						else if(Local_u8KeypadValue == '3'){
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	e4 59       	subi	r30, 0x94	; 148
    5ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec2:	80 81       	ld	r24, Z
    5ec4:	83 33       	cpi	r24, 0x33	; 51
    5ec6:	09 f0       	breq	.+2      	; 0x5eca <LoginSystem_enuMainDashBoard+0x72e>
    5ec8:	a6 c0       	rjmp	.+332    	; 0x6016 <LoginSystem_enuMainDashBoard+0x87a>
							enuOptionPage(Local_pau8LedStateOptions,3);
    5eca:	ce 01       	movw	r24, r28
    5ecc:	8b 58       	subi	r24, 0x8B	; 139
    5ece:	9f 4f       	sbci	r25, 0xFF	; 255
    5ed0:	63 e0       	ldi	r22, 0x03	; 3
    5ed2:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	a8 e4       	ldi	r26, 0x48	; 72
    5edc:	b2 e4       	ldi	r27, 0x42	; 66
    5ede:	8d ab       	std	Y+53, r24	; 0x35
    5ee0:	9e ab       	std	Y+54, r25	; 0x36
    5ee2:	af ab       	std	Y+55, r26	; 0x37
    5ee4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ee6:	6d a9       	ldd	r22, Y+53	; 0x35
    5ee8:	7e a9       	ldd	r23, Y+54	; 0x36
    5eea:	8f a9       	ldd	r24, Y+55	; 0x37
    5eec:	98 ad       	ldd	r25, Y+56	; 0x38
    5eee:	20 e0       	ldi	r18, 0x00	; 0
    5ef0:	30 e0       	ldi	r19, 0x00	; 0
    5ef2:	4a e7       	ldi	r20, 0x7A	; 122
    5ef4:	55 e4       	ldi	r21, 0x45	; 69
    5ef6:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5efa:	dc 01       	movw	r26, r24
    5efc:	cb 01       	movw	r24, r22
    5efe:	89 ab       	std	Y+49, r24	; 0x31
    5f00:	9a ab       	std	Y+50, r25	; 0x32
    5f02:	ab ab       	std	Y+51, r26	; 0x33
    5f04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5f06:	69 a9       	ldd	r22, Y+49	; 0x31
    5f08:	7a a9       	ldd	r23, Y+50	; 0x32
    5f0a:	8b a9       	ldd	r24, Y+51	; 0x33
    5f0c:	9c a9       	ldd	r25, Y+52	; 0x34
    5f0e:	20 e0       	ldi	r18, 0x00	; 0
    5f10:	30 e0       	ldi	r19, 0x00	; 0
    5f12:	40 e8       	ldi	r20, 0x80	; 128
    5f14:	5f e3       	ldi	r21, 0x3F	; 63
    5f16:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    5f1a:	88 23       	and	r24, r24
    5f1c:	2c f4       	brge	.+10     	; 0x5f28 <LoginSystem_enuMainDashBoard+0x78c>
		__ticks = 1;
    5f1e:	81 e0       	ldi	r24, 0x01	; 1
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	98 ab       	std	Y+48, r25	; 0x30
    5f24:	8f a7       	std	Y+47, r24	; 0x2f
    5f26:	3f c0       	rjmp	.+126    	; 0x5fa6 <LoginSystem_enuMainDashBoard+0x80a>
	else if (__tmp > 65535)
    5f28:	69 a9       	ldd	r22, Y+49	; 0x31
    5f2a:	7a a9       	ldd	r23, Y+50	; 0x32
    5f2c:	8b a9       	ldd	r24, Y+51	; 0x33
    5f2e:	9c a9       	ldd	r25, Y+52	; 0x34
    5f30:	20 e0       	ldi	r18, 0x00	; 0
    5f32:	3f ef       	ldi	r19, 0xFF	; 255
    5f34:	4f e7       	ldi	r20, 0x7F	; 127
    5f36:	57 e4       	ldi	r21, 0x47	; 71
    5f38:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    5f3c:	18 16       	cp	r1, r24
    5f3e:	4c f5       	brge	.+82     	; 0x5f92 <LoginSystem_enuMainDashBoard+0x7f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f40:	6d a9       	ldd	r22, Y+53	; 0x35
    5f42:	7e a9       	ldd	r23, Y+54	; 0x36
    5f44:	8f a9       	ldd	r24, Y+55	; 0x37
    5f46:	98 ad       	ldd	r25, Y+56	; 0x38
    5f48:	20 e0       	ldi	r18, 0x00	; 0
    5f4a:	30 e0       	ldi	r19, 0x00	; 0
    5f4c:	40 e2       	ldi	r20, 0x20	; 32
    5f4e:	51 e4       	ldi	r21, 0x41	; 65
    5f50:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    5f54:	dc 01       	movw	r26, r24
    5f56:	cb 01       	movw	r24, r22
    5f58:	bc 01       	movw	r22, r24
    5f5a:	cd 01       	movw	r24, r26
    5f5c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5f60:	dc 01       	movw	r26, r24
    5f62:	cb 01       	movw	r24, r22
    5f64:	98 ab       	std	Y+48, r25	; 0x30
    5f66:	8f a7       	std	Y+47, r24	; 0x2f
    5f68:	0f c0       	rjmp	.+30     	; 0x5f88 <LoginSystem_enuMainDashBoard+0x7ec>
    5f6a:	80 e9       	ldi	r24, 0x90	; 144
    5f6c:	91 e0       	ldi	r25, 0x01	; 1
    5f6e:	9e a7       	std	Y+46, r25	; 0x2e
    5f70:	8d a7       	std	Y+45, r24	; 0x2d
    5f72:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f74:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f76:	01 97       	sbiw	r24, 0x01	; 1
    5f78:	f1 f7       	brne	.-4      	; 0x5f76 <LoginSystem_enuMainDashBoard+0x7da>
    5f7a:	9e a7       	std	Y+46, r25	; 0x2e
    5f7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f80:	98 a9       	ldd	r25, Y+48	; 0x30
    5f82:	01 97       	sbiw	r24, 0x01	; 1
    5f84:	98 ab       	std	Y+48, r25	; 0x30
    5f86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    5f8c:	00 97       	sbiw	r24, 0x00	; 0
    5f8e:	69 f7       	brne	.-38     	; 0x5f6a <LoginSystem_enuMainDashBoard+0x7ce>
    5f90:	14 c0       	rjmp	.+40     	; 0x5fba <LoginSystem_enuMainDashBoard+0x81e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f92:	69 a9       	ldd	r22, Y+49	; 0x31
    5f94:	7a a9       	ldd	r23, Y+50	; 0x32
    5f96:	8b a9       	ldd	r24, Y+51	; 0x33
    5f98:	9c a9       	ldd	r25, Y+52	; 0x34
    5f9a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    5f9e:	dc 01       	movw	r26, r24
    5fa0:	cb 01       	movw	r24, r22
    5fa2:	98 ab       	std	Y+48, r25	; 0x30
    5fa4:	8f a7       	std	Y+47, r24	; 0x2f
    5fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    5faa:	9c a7       	std	Y+44, r25	; 0x2c
    5fac:	8b a7       	std	Y+43, r24	; 0x2b
    5fae:	8b a5       	ldd	r24, Y+43	; 0x2b
    5fb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    5fb2:	01 97       	sbiw	r24, 0x01	; 1
    5fb4:	f1 f7       	brne	.-4      	; 0x5fb2 <LoginSystem_enuMainDashBoard+0x816>
    5fb6:	9c a7       	std	Y+44, r25	; 0x2c
    5fb8:	8b a7       	std	Y+43, r24	; 0x2b


							while(1){
								_delay_ms(50);

								Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    5fba:	ce 01       	movw	r24, r28
    5fbc:	84 59       	subi	r24, 0x94	; 148
    5fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc0:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>

							    if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    5fc4:	fe 01       	movw	r30, r28
    5fc6:	e4 59       	subi	r30, 0x94	; 148
    5fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fca:	80 81       	ld	r24, Z
    5fcc:	8f 3f       	cpi	r24, 0xFF	; 255
    5fce:	09 f4       	brne	.+2      	; 0x5fd2 <LoginSystem_enuMainDashBoard+0x836>
    5fd0:	82 cf       	rjmp	.-252    	; 0x5ed6 <LoginSystem_enuMainDashBoard+0x73a>

							    	if(Local_u8KeypadValue == '1'){
    5fd2:	fe 01       	movw	r30, r28
    5fd4:	e4 59       	subi	r30, 0x94	; 148
    5fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fd8:	80 81       	ld	r24, Z
    5fda:	81 33       	cpi	r24, 0x31	; 49
    5fdc:	21 f4       	brne	.+8      	; 0x5fe6 <LoginSystem_enuMainDashBoard+0x84a>

							    		Led_enuLedTurnON(LED_YELLOW_ID);
    5fde:	82 e0       	ldi	r24, 0x02	; 2
    5fe0:	0e 94 40 1b 	call	0x3680	; 0x3680 <Led_enuLedTurnON>
    5fe4:	78 cf       	rjmp	.-272    	; 0x5ed6 <LoginSystem_enuMainDashBoard+0x73a>
							    	}
							    	else if(Local_u8KeypadValue == '2'){
    5fe6:	fe 01       	movw	r30, r28
    5fe8:	e4 59       	subi	r30, 0x94	; 148
    5fea:	ff 4f       	sbci	r31, 0xFF	; 255
    5fec:	80 81       	ld	r24, Z
    5fee:	82 33       	cpi	r24, 0x32	; 50
    5ff0:	21 f4       	brne	.+8      	; 0x5ffa <LoginSystem_enuMainDashBoard+0x85e>

							    		Led_enuLedTurnOFF(LED_YELLOW_ID);
    5ff2:	82 e0       	ldi	r24, 0x02	; 2
    5ff4:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>
    5ff8:	6e cf       	rjmp	.-292    	; 0x5ed6 <LoginSystem_enuMainDashBoard+0x73a>

							        }
							    	else if(Local_u8KeypadValue == '3'){
    5ffa:	fe 01       	movw	r30, r28
    5ffc:	e4 59       	subi	r30, 0x94	; 148
    5ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    6000:	80 81       	ld	r24, Z
    6002:	83 33       	cpi	r24, 0x33	; 51
    6004:	09 f0       	breq	.+2      	; 0x6008 <LoginSystem_enuMainDashBoard+0x86c>
    6006:	67 cf       	rjmp	.-306    	; 0x5ed6 <LoginSystem_enuMainDashBoard+0x73a>

							    		enuOptionPage(Local_pau8LedsOptions,4);
    6008:	ce 01       	movw	r24, r28
    600a:	83 59       	subi	r24, 0x93	; 147
    600c:	9f 4f       	sbci	r25, 0xFF	; 255
    600e:	64 e0       	ldi	r22, 0x04	; 4
    6010:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    6014:	95 cc       	rjmp	.-1750   	; 0x5940 <LoginSystem_enuMainDashBoard+0x1a4>
							    }

							}

						}
						else if(Local_u8KeypadValue == '4'){
    6016:	fe 01       	movw	r30, r28
    6018:	e4 59       	subi	r30, 0x94	; 148
    601a:	ff 4f       	sbci	r31, 0xFF	; 255
    601c:	80 81       	ld	r24, Z
    601e:	84 33       	cpi	r24, 0x34	; 52
    6020:	09 f0       	breq	.+2      	; 0x6024 <LoginSystem_enuMainDashBoard+0x888>
    6022:	8e cc       	rjmp	.-1764   	; 0x5940 <LoginSystem_enuMainDashBoard+0x1a4>

							enuOptionPage(Local_pau8PageOneOptions,4);
    6024:	ce 01       	movw	r24, r28
    6026:	8c 59       	subi	r24, 0x9C	; 156
    6028:	9f 4f       	sbci	r25, 0xFF	; 255
    602a:	64 e0       	ldi	r22, 0x04	; 4
    602c:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    6030:	1e cc       	rjmp	.-1988   	; 0x586e <LoginSystem_enuMainDashBoard+0xd2>
					else{}
				}


			}
			else if(Local_u8KeypadValue == '2'){
    6032:	fe 01       	movw	r30, r28
    6034:	e4 59       	subi	r30, 0x94	; 148
    6036:	ff 4f       	sbci	r31, 0xFF	; 255
    6038:	80 81       	ld	r24, Z
    603a:	82 33       	cpi	r24, 0x32	; 50
    603c:	09 f0       	breq	.+2      	; 0x6040 <LoginSystem_enuMainDashBoard+0x8a4>
    603e:	f5 c0       	rjmp	.+490    	; 0x622a <LoginSystem_enuMainDashBoard+0xa8e>

				u8 * Local_pau8ACOptions[] = {"1-AC ON","2-AC OFF","3-BACK"};
    6040:	ce 01       	movw	r24, r28
    6042:	85 58       	subi	r24, 0x85	; 133
    6044:	9f 4f       	sbci	r25, 0xFF	; 255
    6046:	ca 56       	subi	r28, 0x6A	; 106
    6048:	df 4f       	sbci	r29, 0xFF	; 255
    604a:	99 83       	std	Y+1, r25	; 0x01
    604c:	88 83       	st	Y, r24
    604e:	c6 59       	subi	r28, 0x96	; 150
    6050:	d0 40       	sbci	r29, 0x00	; 0
    6052:	89 ee       	ldi	r24, 0xE9	; 233
    6054:	92 e0       	ldi	r25, 0x02	; 2
    6056:	c8 56       	subi	r28, 0x68	; 104
    6058:	df 4f       	sbci	r29, 0xFF	; 255
    605a:	99 83       	std	Y+1, r25	; 0x01
    605c:	88 83       	st	Y, r24
    605e:	c8 59       	subi	r28, 0x98	; 152
    6060:	d0 40       	sbci	r29, 0x00	; 0
    6062:	96 e0       	ldi	r25, 0x06	; 6
    6064:	c6 56       	subi	r28, 0x66	; 102
    6066:	df 4f       	sbci	r29, 0xFF	; 255
    6068:	98 83       	st	Y, r25
    606a:	ca 59       	subi	r28, 0x9A	; 154
    606c:	d0 40       	sbci	r29, 0x00	; 0
    606e:	c8 56       	subi	r28, 0x68	; 104
    6070:	df 4f       	sbci	r29, 0xFF	; 255
    6072:	e8 81       	ld	r30, Y
    6074:	f9 81       	ldd	r31, Y+1	; 0x01
    6076:	c8 59       	subi	r28, 0x98	; 152
    6078:	d0 40       	sbci	r29, 0x00	; 0
    607a:	00 80       	ld	r0, Z
    607c:	c8 56       	subi	r28, 0x68	; 104
    607e:	df 4f       	sbci	r29, 0xFF	; 255
    6080:	88 81       	ld	r24, Y
    6082:	99 81       	ldd	r25, Y+1	; 0x01
    6084:	c8 59       	subi	r28, 0x98	; 152
    6086:	d0 40       	sbci	r29, 0x00	; 0
    6088:	01 96       	adiw	r24, 0x01	; 1
    608a:	c8 56       	subi	r28, 0x68	; 104
    608c:	df 4f       	sbci	r29, 0xFF	; 255
    608e:	99 83       	std	Y+1, r25	; 0x01
    6090:	88 83       	st	Y, r24
    6092:	c8 59       	subi	r28, 0x98	; 152
    6094:	d0 40       	sbci	r29, 0x00	; 0
    6096:	ca 56       	subi	r28, 0x6A	; 106
    6098:	df 4f       	sbci	r29, 0xFF	; 255
    609a:	e8 81       	ld	r30, Y
    609c:	f9 81       	ldd	r31, Y+1	; 0x01
    609e:	c6 59       	subi	r28, 0x96	; 150
    60a0:	d0 40       	sbci	r29, 0x00	; 0
    60a2:	00 82       	st	Z, r0
    60a4:	ca 56       	subi	r28, 0x6A	; 106
    60a6:	df 4f       	sbci	r29, 0xFF	; 255
    60a8:	88 81       	ld	r24, Y
    60aa:	99 81       	ldd	r25, Y+1	; 0x01
    60ac:	c6 59       	subi	r28, 0x96	; 150
    60ae:	d0 40       	sbci	r29, 0x00	; 0
    60b0:	01 96       	adiw	r24, 0x01	; 1
    60b2:	ca 56       	subi	r28, 0x6A	; 106
    60b4:	df 4f       	sbci	r29, 0xFF	; 255
    60b6:	99 83       	std	Y+1, r25	; 0x01
    60b8:	88 83       	st	Y, r24
    60ba:	c6 59       	subi	r28, 0x96	; 150
    60bc:	d0 40       	sbci	r29, 0x00	; 0
    60be:	c6 56       	subi	r28, 0x66	; 102
    60c0:	df 4f       	sbci	r29, 0xFF	; 255
    60c2:	98 81       	ld	r25, Y
    60c4:	ca 59       	subi	r28, 0x9A	; 154
    60c6:	d0 40       	sbci	r29, 0x00	; 0
    60c8:	91 50       	subi	r25, 0x01	; 1
    60ca:	c6 56       	subi	r28, 0x66	; 102
    60cc:	df 4f       	sbci	r29, 0xFF	; 255
    60ce:	98 83       	st	Y, r25
    60d0:	ca 59       	subi	r28, 0x9A	; 154
    60d2:	d0 40       	sbci	r29, 0x00	; 0
    60d4:	c6 56       	subi	r28, 0x66	; 102
    60d6:	df 4f       	sbci	r29, 0xFF	; 255
    60d8:	e8 81       	ld	r30, Y
    60da:	ca 59       	subi	r28, 0x9A	; 154
    60dc:	d0 40       	sbci	r29, 0x00	; 0
    60de:	ee 23       	and	r30, r30
    60e0:	31 f6       	brne	.-116    	; 0x606e <LoginSystem_enuMainDashBoard+0x8d2>
				enuOptionPage(Local_pau8ACOptions,3);
    60e2:	ce 01       	movw	r24, r28
    60e4:	85 58       	subi	r24, 0x85	; 133
    60e6:	9f 4f       	sbci	r25, 0xFF	; 255
    60e8:	63 e0       	ldi	r22, 0x03	; 3
    60ea:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    60ee:	80 e0       	ldi	r24, 0x00	; 0
    60f0:	90 e0       	ldi	r25, 0x00	; 0
    60f2:	a8 e4       	ldi	r26, 0x48	; 72
    60f4:	b2 e4       	ldi	r27, 0x42	; 66
    60f6:	8f a3       	std	Y+39, r24	; 0x27
    60f8:	98 a7       	std	Y+40, r25	; 0x28
    60fa:	a9 a7       	std	Y+41, r26	; 0x29
    60fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60fe:	6f a1       	ldd	r22, Y+39	; 0x27
    6100:	78 a5       	ldd	r23, Y+40	; 0x28
    6102:	89 a5       	ldd	r24, Y+41	; 0x29
    6104:	9a a5       	ldd	r25, Y+42	; 0x2a
    6106:	20 e0       	ldi	r18, 0x00	; 0
    6108:	30 e0       	ldi	r19, 0x00	; 0
    610a:	4a e7       	ldi	r20, 0x7A	; 122
    610c:	55 e4       	ldi	r21, 0x45	; 69
    610e:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    6112:	dc 01       	movw	r26, r24
    6114:	cb 01       	movw	r24, r22
    6116:	8b a3       	std	Y+35, r24	; 0x23
    6118:	9c a3       	std	Y+36, r25	; 0x24
    611a:	ad a3       	std	Y+37, r26	; 0x25
    611c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    611e:	6b a1       	ldd	r22, Y+35	; 0x23
    6120:	7c a1       	ldd	r23, Y+36	; 0x24
    6122:	8d a1       	ldd	r24, Y+37	; 0x25
    6124:	9e a1       	ldd	r25, Y+38	; 0x26
    6126:	20 e0       	ldi	r18, 0x00	; 0
    6128:	30 e0       	ldi	r19, 0x00	; 0
    612a:	40 e8       	ldi	r20, 0x80	; 128
    612c:	5f e3       	ldi	r21, 0x3F	; 63
    612e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    6132:	88 23       	and	r24, r24
    6134:	2c f4       	brge	.+10     	; 0x6140 <LoginSystem_enuMainDashBoard+0x9a4>
		__ticks = 1;
    6136:	81 e0       	ldi	r24, 0x01	; 1
    6138:	90 e0       	ldi	r25, 0x00	; 0
    613a:	9a a3       	std	Y+34, r25	; 0x22
    613c:	89 a3       	std	Y+33, r24	; 0x21
    613e:	3f c0       	rjmp	.+126    	; 0x61be <LoginSystem_enuMainDashBoard+0xa22>
	else if (__tmp > 65535)
    6140:	6b a1       	ldd	r22, Y+35	; 0x23
    6142:	7c a1       	ldd	r23, Y+36	; 0x24
    6144:	8d a1       	ldd	r24, Y+37	; 0x25
    6146:	9e a1       	ldd	r25, Y+38	; 0x26
    6148:	20 e0       	ldi	r18, 0x00	; 0
    614a:	3f ef       	ldi	r19, 0xFF	; 255
    614c:	4f e7       	ldi	r20, 0x7F	; 127
    614e:	57 e4       	ldi	r21, 0x47	; 71
    6150:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    6154:	18 16       	cp	r1, r24
    6156:	4c f5       	brge	.+82     	; 0x61aa <LoginSystem_enuMainDashBoard+0xa0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6158:	6f a1       	ldd	r22, Y+39	; 0x27
    615a:	78 a5       	ldd	r23, Y+40	; 0x28
    615c:	89 a5       	ldd	r24, Y+41	; 0x29
    615e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6160:	20 e0       	ldi	r18, 0x00	; 0
    6162:	30 e0       	ldi	r19, 0x00	; 0
    6164:	40 e2       	ldi	r20, 0x20	; 32
    6166:	51 e4       	ldi	r21, 0x41	; 65
    6168:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    616c:	dc 01       	movw	r26, r24
    616e:	cb 01       	movw	r24, r22
    6170:	bc 01       	movw	r22, r24
    6172:	cd 01       	movw	r24, r26
    6174:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6178:	dc 01       	movw	r26, r24
    617a:	cb 01       	movw	r24, r22
    617c:	9a a3       	std	Y+34, r25	; 0x22
    617e:	89 a3       	std	Y+33, r24	; 0x21
    6180:	0f c0       	rjmp	.+30     	; 0x61a0 <LoginSystem_enuMainDashBoard+0xa04>
    6182:	80 e9       	ldi	r24, 0x90	; 144
    6184:	91 e0       	ldi	r25, 0x01	; 1
    6186:	98 a3       	std	Y+32, r25	; 0x20
    6188:	8f 8f       	std	Y+31, r24	; 0x1f
    618a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    618c:	98 a1       	ldd	r25, Y+32	; 0x20
    618e:	01 97       	sbiw	r24, 0x01	; 1
    6190:	f1 f7       	brne	.-4      	; 0x618e <LoginSystem_enuMainDashBoard+0x9f2>
    6192:	98 a3       	std	Y+32, r25	; 0x20
    6194:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6196:	89 a1       	ldd	r24, Y+33	; 0x21
    6198:	9a a1       	ldd	r25, Y+34	; 0x22
    619a:	01 97       	sbiw	r24, 0x01	; 1
    619c:	9a a3       	std	Y+34, r25	; 0x22
    619e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61a0:	89 a1       	ldd	r24, Y+33	; 0x21
    61a2:	9a a1       	ldd	r25, Y+34	; 0x22
    61a4:	00 97       	sbiw	r24, 0x00	; 0
    61a6:	69 f7       	brne	.-38     	; 0x6182 <LoginSystem_enuMainDashBoard+0x9e6>
    61a8:	14 c0       	rjmp	.+40     	; 0x61d2 <LoginSystem_enuMainDashBoard+0xa36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61aa:	6b a1       	ldd	r22, Y+35	; 0x23
    61ac:	7c a1       	ldd	r23, Y+36	; 0x24
    61ae:	8d a1       	ldd	r24, Y+37	; 0x25
    61b0:	9e a1       	ldd	r25, Y+38	; 0x26
    61b2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    61b6:	dc 01       	movw	r26, r24
    61b8:	cb 01       	movw	r24, r22
    61ba:	9a a3       	std	Y+34, r25	; 0x22
    61bc:	89 a3       	std	Y+33, r24	; 0x21
    61be:	89 a1       	ldd	r24, Y+33	; 0x21
    61c0:	9a a1       	ldd	r25, Y+34	; 0x22
    61c2:	9e 8f       	std	Y+30, r25	; 0x1e
    61c4:	8d 8f       	std	Y+29, r24	; 0x1d
    61c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    61c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    61ca:	01 97       	sbiw	r24, 0x01	; 1
    61cc:	f1 f7       	brne	.-4      	; 0x61ca <LoginSystem_enuMainDashBoard+0xa2e>
    61ce:	9e 8f       	std	Y+30, r25	; 0x1e
    61d0:	8d 8f       	std	Y+29, r24	; 0x1d

				while(1){
					_delay_ms(50);

					Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    61d2:	ce 01       	movw	r24, r28
    61d4:	84 59       	subi	r24, 0x94	; 148
    61d6:	9f 4f       	sbci	r25, 0xFF	; 255
    61d8:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>

					if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    61dc:	fe 01       	movw	r30, r28
    61de:	e4 59       	subi	r30, 0x94	; 148
    61e0:	ff 4f       	sbci	r31, 0xFF	; 255
    61e2:	80 81       	ld	r24, Z
    61e4:	8f 3f       	cpi	r24, 0xFF	; 255
    61e6:	09 f4       	brne	.+2      	; 0x61ea <LoginSystem_enuMainDashBoard+0xa4e>
    61e8:	82 cf       	rjmp	.-252    	; 0x60ee <LoginSystem_enuMainDashBoard+0x952>

						if(Local_u8KeypadValue == '1'){
    61ea:	fe 01       	movw	r30, r28
    61ec:	e4 59       	subi	r30, 0x94	; 148
    61ee:	ff 4f       	sbci	r31, 0xFF	; 255
    61f0:	80 81       	ld	r24, Z
    61f2:	81 33       	cpi	r24, 0x31	; 49
    61f4:	19 f4       	brne	.+6      	; 0x61fc <LoginSystem_enuMainDashBoard+0xa60>

							Buzzer_enuAlertActivator();
    61f6:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <Buzzer_enuAlertActivator>
    61fa:	79 cf       	rjmp	.-270    	; 0x60ee <LoginSystem_enuMainDashBoard+0x952>
							//on
						}
						else if(Local_u8KeypadValue == '2'){
    61fc:	fe 01       	movw	r30, r28
    61fe:	e4 59       	subi	r30, 0x94	; 148
    6200:	ff 4f       	sbci	r31, 0xFF	; 255
    6202:	80 81       	ld	r24, Z
    6204:	82 33       	cpi	r24, 0x32	; 50
    6206:	19 f4       	brne	.+6      	; 0x620e <LoginSystem_enuMainDashBoard+0xa72>

							Buzzer_enuSilenceDeactivation();
    6208:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <Buzzer_enuSilenceDeactivation>
    620c:	70 cf       	rjmp	.-288    	; 0x60ee <LoginSystem_enuMainDashBoard+0x952>
							//off
						}
						else if(Local_u8KeypadValue == '3'){
    620e:	fe 01       	movw	r30, r28
    6210:	e4 59       	subi	r30, 0x94	; 148
    6212:	ff 4f       	sbci	r31, 0xFF	; 255
    6214:	80 81       	ld	r24, Z
    6216:	83 33       	cpi	r24, 0x33	; 51
    6218:	09 f0       	breq	.+2      	; 0x621c <LoginSystem_enuMainDashBoard+0xa80>
    621a:	69 cf       	rjmp	.-302    	; 0x60ee <LoginSystem_enuMainDashBoard+0x952>

							//back
							enuOptionPage(Local_pau8PageOneOptions,4);
    621c:	ce 01       	movw	r24, r28
    621e:	8c 59       	subi	r24, 0x9C	; 156
    6220:	9f 4f       	sbci	r25, 0xFF	; 255
    6222:	64 e0       	ldi	r22, 0x04	; 4
    6224:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    6228:	22 cb       	rjmp	.-2492   	; 0x586e <LoginSystem_enuMainDashBoard+0xd2>

					}
					else{}
				}
			}
			else if(Local_u8KeypadValue == '3'){
    622a:	fe 01       	movw	r30, r28
    622c:	e4 59       	subi	r30, 0x94	; 148
    622e:	ff 4f       	sbci	r31, 0xFF	; 255
    6230:	80 81       	ld	r24, Z
    6232:	83 33       	cpi	r24, 0x33	; 51
    6234:	09 f0       	breq	.+2      	; 0x6238 <LoginSystem_enuMainDashBoard+0xa9c>
    6236:	e4 c0       	rjmp	.+456    	; 0x6400 <LoginSystem_enuMainDashBoard+0xc64>

				u8 * Local_pau8TempOptions[] = {NULL,NULL,"1-BACK"};
    6238:	ce 01       	movw	r24, r28
    623a:	8f 57       	subi	r24, 0x7F	; 127
    623c:	9f 4f       	sbci	r25, 0xFF	; 255
    623e:	c5 56       	subi	r28, 0x65	; 101
    6240:	df 4f       	sbci	r29, 0xFF	; 255
    6242:	99 83       	std	Y+1, r25	; 0x01
    6244:	88 83       	st	Y, r24
    6246:	cb 59       	subi	r28, 0x9B	; 155
    6248:	d0 40       	sbci	r29, 0x00	; 0
    624a:	83 ee       	ldi	r24, 0xE3	; 227
    624c:	92 e0       	ldi	r25, 0x02	; 2
    624e:	c3 56       	subi	r28, 0x63	; 99
    6250:	df 4f       	sbci	r29, 0xFF	; 255
    6252:	99 83       	std	Y+1, r25	; 0x01
    6254:	88 83       	st	Y, r24
    6256:	cd 59       	subi	r28, 0x9D	; 157
    6258:	d0 40       	sbci	r29, 0x00	; 0
    625a:	96 e0       	ldi	r25, 0x06	; 6
    625c:	c1 56       	subi	r28, 0x61	; 97
    625e:	df 4f       	sbci	r29, 0xFF	; 255
    6260:	98 83       	st	Y, r25
    6262:	cf 59       	subi	r28, 0x9F	; 159
    6264:	d0 40       	sbci	r29, 0x00	; 0
    6266:	c3 56       	subi	r28, 0x63	; 99
    6268:	df 4f       	sbci	r29, 0xFF	; 255
    626a:	e8 81       	ld	r30, Y
    626c:	f9 81       	ldd	r31, Y+1	; 0x01
    626e:	cd 59       	subi	r28, 0x9D	; 157
    6270:	d0 40       	sbci	r29, 0x00	; 0
    6272:	00 80       	ld	r0, Z
    6274:	c3 56       	subi	r28, 0x63	; 99
    6276:	df 4f       	sbci	r29, 0xFF	; 255
    6278:	88 81       	ld	r24, Y
    627a:	99 81       	ldd	r25, Y+1	; 0x01
    627c:	cd 59       	subi	r28, 0x9D	; 157
    627e:	d0 40       	sbci	r29, 0x00	; 0
    6280:	01 96       	adiw	r24, 0x01	; 1
    6282:	c3 56       	subi	r28, 0x63	; 99
    6284:	df 4f       	sbci	r29, 0xFF	; 255
    6286:	99 83       	std	Y+1, r25	; 0x01
    6288:	88 83       	st	Y, r24
    628a:	cd 59       	subi	r28, 0x9D	; 157
    628c:	d0 40       	sbci	r29, 0x00	; 0
    628e:	c5 56       	subi	r28, 0x65	; 101
    6290:	df 4f       	sbci	r29, 0xFF	; 255
    6292:	e8 81       	ld	r30, Y
    6294:	f9 81       	ldd	r31, Y+1	; 0x01
    6296:	cb 59       	subi	r28, 0x9B	; 155
    6298:	d0 40       	sbci	r29, 0x00	; 0
    629a:	00 82       	st	Z, r0
    629c:	c5 56       	subi	r28, 0x65	; 101
    629e:	df 4f       	sbci	r29, 0xFF	; 255
    62a0:	88 81       	ld	r24, Y
    62a2:	99 81       	ldd	r25, Y+1	; 0x01
    62a4:	cb 59       	subi	r28, 0x9B	; 155
    62a6:	d0 40       	sbci	r29, 0x00	; 0
    62a8:	01 96       	adiw	r24, 0x01	; 1
    62aa:	c5 56       	subi	r28, 0x65	; 101
    62ac:	df 4f       	sbci	r29, 0xFF	; 255
    62ae:	99 83       	std	Y+1, r25	; 0x01
    62b0:	88 83       	st	Y, r24
    62b2:	cb 59       	subi	r28, 0x9B	; 155
    62b4:	d0 40       	sbci	r29, 0x00	; 0
    62b6:	c1 56       	subi	r28, 0x61	; 97
    62b8:	df 4f       	sbci	r29, 0xFF	; 255
    62ba:	98 81       	ld	r25, Y
    62bc:	cf 59       	subi	r28, 0x9F	; 159
    62be:	d0 40       	sbci	r29, 0x00	; 0
    62c0:	91 50       	subi	r25, 0x01	; 1
    62c2:	c1 56       	subi	r28, 0x61	; 97
    62c4:	df 4f       	sbci	r29, 0xFF	; 255
    62c6:	98 83       	st	Y, r25
    62c8:	cf 59       	subi	r28, 0x9F	; 159
    62ca:	d0 40       	sbci	r29, 0x00	; 0
    62cc:	c1 56       	subi	r28, 0x61	; 97
    62ce:	df 4f       	sbci	r29, 0xFF	; 255
    62d0:	e8 81       	ld	r30, Y
    62d2:	cf 59       	subi	r28, 0x9F	; 159
    62d4:	d0 40       	sbci	r29, 0x00	; 0
    62d6:	ee 23       	and	r30, r30
    62d8:	31 f6       	brne	.-116    	; 0x6266 <LoginSystem_enuMainDashBoard+0xaca>
				enuOptionPage(Local_pau8TempOptions,3);
    62da:	ce 01       	movw	r24, r28
    62dc:	8f 57       	subi	r24, 0x7F	; 127
    62de:	9f 4f       	sbci	r25, 0xFF	; 255
    62e0:	63 e0       	ldi	r22, 0x03	; 3
    62e2:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>


				while(1){

					enuDisplayTemprature();
    62e6:	0e 94 8b 33 	call	0x6716	; 0x6716 <enuDisplayTemprature>

					Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    62ea:	ce 01       	movw	r24, r28
    62ec:	84 59       	subi	r24, 0x94	; 148
    62ee:	9f 4f       	sbci	r25, 0xFF	; 255
    62f0:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>

					if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    62f4:	fe 01       	movw	r30, r28
    62f6:	e4 59       	subi	r30, 0x94	; 148
    62f8:	ff 4f       	sbci	r31, 0xFF	; 255
    62fa:	80 81       	ld	r24, Z
    62fc:	8f 3f       	cpi	r24, 0xFF	; 255
    62fe:	69 f0       	breq	.+26     	; 0x631a <LoginSystem_enuMainDashBoard+0xb7e>

						if(Local_u8KeypadValue == '1'){
    6300:	fe 01       	movw	r30, r28
    6302:	e4 59       	subi	r30, 0x94	; 148
    6304:	ff 4f       	sbci	r31, 0xFF	; 255
    6306:	80 81       	ld	r24, Z
    6308:	81 33       	cpi	r24, 0x31	; 49
    630a:	39 f4       	brne	.+14     	; 0x631a <LoginSystem_enuMainDashBoard+0xb7e>

							enuOptionPage(Local_pau8PageOneOptions,4);
    630c:	ce 01       	movw	r24, r28
    630e:	8c 59       	subi	r24, 0x9C	; 156
    6310:	9f 4f       	sbci	r25, 0xFF	; 255
    6312:	64 e0       	ldi	r22, 0x04	; 4
    6314:	0e 94 a0 32 	call	0x6540	; 0x6540 <enuOptionPage>
    6318:	aa ca       	rjmp	.-2732   	; 0x586e <LoginSystem_enuMainDashBoard+0xd2>
    631a:	80 e0       	ldi	r24, 0x00	; 0
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	aa ef       	ldi	r26, 0xFA	; 250
    6320:	b3 e4       	ldi	r27, 0x43	; 67
    6322:	89 8f       	std	Y+25, r24	; 0x19
    6324:	9a 8f       	std	Y+26, r25	; 0x1a
    6326:	ab 8f       	std	Y+27, r26	; 0x1b
    6328:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    632a:	69 8d       	ldd	r22, Y+25	; 0x19
    632c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    632e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6330:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6332:	20 e0       	ldi	r18, 0x00	; 0
    6334:	30 e0       	ldi	r19, 0x00	; 0
    6336:	4a e7       	ldi	r20, 0x7A	; 122
    6338:	55 e4       	ldi	r21, 0x45	; 69
    633a:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    633e:	dc 01       	movw	r26, r24
    6340:	cb 01       	movw	r24, r22
    6342:	8d 8b       	std	Y+21, r24	; 0x15
    6344:	9e 8b       	std	Y+22, r25	; 0x16
    6346:	af 8b       	std	Y+23, r26	; 0x17
    6348:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    634a:	6d 89       	ldd	r22, Y+21	; 0x15
    634c:	7e 89       	ldd	r23, Y+22	; 0x16
    634e:	8f 89       	ldd	r24, Y+23	; 0x17
    6350:	98 8d       	ldd	r25, Y+24	; 0x18
    6352:	20 e0       	ldi	r18, 0x00	; 0
    6354:	30 e0       	ldi	r19, 0x00	; 0
    6356:	40 e8       	ldi	r20, 0x80	; 128
    6358:	5f e3       	ldi	r21, 0x3F	; 63
    635a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    635e:	88 23       	and	r24, r24
    6360:	2c f4       	brge	.+10     	; 0x636c <LoginSystem_enuMainDashBoard+0xbd0>
		__ticks = 1;
    6362:	81 e0       	ldi	r24, 0x01	; 1
    6364:	90 e0       	ldi	r25, 0x00	; 0
    6366:	9c 8b       	std	Y+20, r25	; 0x14
    6368:	8b 8b       	std	Y+19, r24	; 0x13
    636a:	3f c0       	rjmp	.+126    	; 0x63ea <LoginSystem_enuMainDashBoard+0xc4e>
	else if (__tmp > 65535)
    636c:	6d 89       	ldd	r22, Y+21	; 0x15
    636e:	7e 89       	ldd	r23, Y+22	; 0x16
    6370:	8f 89       	ldd	r24, Y+23	; 0x17
    6372:	98 8d       	ldd	r25, Y+24	; 0x18
    6374:	20 e0       	ldi	r18, 0x00	; 0
    6376:	3f ef       	ldi	r19, 0xFF	; 255
    6378:	4f e7       	ldi	r20, 0x7F	; 127
    637a:	57 e4       	ldi	r21, 0x47	; 71
    637c:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    6380:	18 16       	cp	r1, r24
    6382:	4c f5       	brge	.+82     	; 0x63d6 <LoginSystem_enuMainDashBoard+0xc3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6384:	69 8d       	ldd	r22, Y+25	; 0x19
    6386:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6388:	8b 8d       	ldd	r24, Y+27	; 0x1b
    638a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	40 e2       	ldi	r20, 0x20	; 32
    6392:	51 e4       	ldi	r21, 0x41	; 65
    6394:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    6398:	dc 01       	movw	r26, r24
    639a:	cb 01       	movw	r24, r22
    639c:	bc 01       	movw	r22, r24
    639e:	cd 01       	movw	r24, r26
    63a0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    63a4:	dc 01       	movw	r26, r24
    63a6:	cb 01       	movw	r24, r22
    63a8:	9c 8b       	std	Y+20, r25	; 0x14
    63aa:	8b 8b       	std	Y+19, r24	; 0x13
    63ac:	0f c0       	rjmp	.+30     	; 0x63cc <LoginSystem_enuMainDashBoard+0xc30>
    63ae:	80 e9       	ldi	r24, 0x90	; 144
    63b0:	91 e0       	ldi	r25, 0x01	; 1
    63b2:	9a 8b       	std	Y+18, r25	; 0x12
    63b4:	89 8b       	std	Y+17, r24	; 0x11
    63b6:	89 89       	ldd	r24, Y+17	; 0x11
    63b8:	9a 89       	ldd	r25, Y+18	; 0x12
    63ba:	01 97       	sbiw	r24, 0x01	; 1
    63bc:	f1 f7       	brne	.-4      	; 0x63ba <LoginSystem_enuMainDashBoard+0xc1e>
    63be:	9a 8b       	std	Y+18, r25	; 0x12
    63c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63c2:	8b 89       	ldd	r24, Y+19	; 0x13
    63c4:	9c 89       	ldd	r25, Y+20	; 0x14
    63c6:	01 97       	sbiw	r24, 0x01	; 1
    63c8:	9c 8b       	std	Y+20, r25	; 0x14
    63ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63cc:	8b 89       	ldd	r24, Y+19	; 0x13
    63ce:	9c 89       	ldd	r25, Y+20	; 0x14
    63d0:	00 97       	sbiw	r24, 0x00	; 0
    63d2:	69 f7       	brne	.-38     	; 0x63ae <LoginSystem_enuMainDashBoard+0xc12>
    63d4:	88 cf       	rjmp	.-240    	; 0x62e6 <LoginSystem_enuMainDashBoard+0xb4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63d6:	6d 89       	ldd	r22, Y+21	; 0x15
    63d8:	7e 89       	ldd	r23, Y+22	; 0x16
    63da:	8f 89       	ldd	r24, Y+23	; 0x17
    63dc:	98 8d       	ldd	r25, Y+24	; 0x18
    63de:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    63e2:	dc 01       	movw	r26, r24
    63e4:	cb 01       	movw	r24, r22
    63e6:	9c 8b       	std	Y+20, r25	; 0x14
    63e8:	8b 8b       	std	Y+19, r24	; 0x13
    63ea:	8b 89       	ldd	r24, Y+19	; 0x13
    63ec:	9c 89       	ldd	r25, Y+20	; 0x14
    63ee:	98 8b       	std	Y+16, r25	; 0x10
    63f0:	8f 87       	std	Y+15, r24	; 0x0f
    63f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    63f4:	98 89       	ldd	r25, Y+16	; 0x10
    63f6:	01 97       	sbiw	r24, 0x01	; 1
    63f8:	f1 f7       	brne	.-4      	; 0x63f6 <LoginSystem_enuMainDashBoard+0xc5a>
    63fa:	98 8b       	std	Y+16, r25	; 0x10
    63fc:	8f 87       	std	Y+15, r24	; 0x0f
    63fe:	73 cf       	rjmp	.-282    	; 0x62e6 <LoginSystem_enuMainDashBoard+0xb4a>
					_delay_ms(500);

				}

			}
			else if(Local_u8KeypadValue == '4'){
    6400:	fe 01       	movw	r30, r28
    6402:	e4 59       	subi	r30, 0x94	; 148
    6404:	ff 4f       	sbci	r31, 0xFF	; 255
    6406:	80 81       	ld	r24, Z
    6408:	84 33       	cpi	r24, 0x34	; 52
    640a:	09 f0       	breq	.+2      	; 0x640e <LoginSystem_enuMainDashBoard+0xc72>
    640c:	30 ca       	rjmp	.-2976   	; 0x586e <LoginSystem_enuMainDashBoard+0xd2>
		}
		else{}

	}

	Led_enuLedTurnOFF(LED_GREEN_ID);
    640e:	80 e0       	ldi	r24, 0x00	; 0
    6410:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>
	Led_enuLedTurnOFF(LED_RED_ID);
    6414:	81 e0       	ldi	r24, 0x01	; 1
    6416:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>
	Led_enuLedTurnOFF(LED_YELLOW_ID);
    641a:	82 e0       	ldi	r24, 0x02	; 2
    641c:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Led_enuLedTurnOFF>

	Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    6420:	81 e0       	ldi	r24, 0x01	; 1
    6422:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>
	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_6);
    6426:	81 e0       	ldi	r24, 0x01	; 1
    6428:	66 e0       	ldi	r22, 0x06	; 6
    642a:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendString("Good Bye");
    642e:	8d e4       	ldi	r24, 0x4D	; 77
    6430:	91 e0       	ldi	r25, 0x01	; 1
    6432:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>
    6436:	80 e0       	ldi	r24, 0x00	; 0
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	a8 ec       	ldi	r26, 0xC8	; 200
    643c:	b3 e4       	ldi	r27, 0x43	; 67
    643e:	8b 87       	std	Y+11, r24	; 0x0b
    6440:	9c 87       	std	Y+12, r25	; 0x0c
    6442:	ad 87       	std	Y+13, r26	; 0x0d
    6444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6446:	6b 85       	ldd	r22, Y+11	; 0x0b
    6448:	7c 85       	ldd	r23, Y+12	; 0x0c
    644a:	8d 85       	ldd	r24, Y+13	; 0x0d
    644c:	9e 85       	ldd	r25, Y+14	; 0x0e
    644e:	20 e0       	ldi	r18, 0x00	; 0
    6450:	30 e0       	ldi	r19, 0x00	; 0
    6452:	4a e7       	ldi	r20, 0x7A	; 122
    6454:	55 e4       	ldi	r21, 0x45	; 69
    6456:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    645a:	dc 01       	movw	r26, r24
    645c:	cb 01       	movw	r24, r22
    645e:	8f 83       	std	Y+7, r24	; 0x07
    6460:	98 87       	std	Y+8, r25	; 0x08
    6462:	a9 87       	std	Y+9, r26	; 0x09
    6464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6466:	6f 81       	ldd	r22, Y+7	; 0x07
    6468:	78 85       	ldd	r23, Y+8	; 0x08
    646a:	89 85       	ldd	r24, Y+9	; 0x09
    646c:	9a 85       	ldd	r25, Y+10	; 0x0a
    646e:	20 e0       	ldi	r18, 0x00	; 0
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	40 e8       	ldi	r20, 0x80	; 128
    6474:	5f e3       	ldi	r21, 0x3F	; 63
    6476:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    647a:	88 23       	and	r24, r24
    647c:	2c f4       	brge	.+10     	; 0x6488 <LoginSystem_enuMainDashBoard+0xcec>
		__ticks = 1;
    647e:	81 e0       	ldi	r24, 0x01	; 1
    6480:	90 e0       	ldi	r25, 0x00	; 0
    6482:	9e 83       	std	Y+6, r25	; 0x06
    6484:	8d 83       	std	Y+5, r24	; 0x05
    6486:	3f c0       	rjmp	.+126    	; 0x6506 <LoginSystem_enuMainDashBoard+0xd6a>
	else if (__tmp > 65535)
    6488:	6f 81       	ldd	r22, Y+7	; 0x07
    648a:	78 85       	ldd	r23, Y+8	; 0x08
    648c:	89 85       	ldd	r24, Y+9	; 0x09
    648e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6490:	20 e0       	ldi	r18, 0x00	; 0
    6492:	3f ef       	ldi	r19, 0xFF	; 255
    6494:	4f e7       	ldi	r20, 0x7F	; 127
    6496:	57 e4       	ldi	r21, 0x47	; 71
    6498:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    649c:	18 16       	cp	r1, r24
    649e:	4c f5       	brge	.+82     	; 0x64f2 <LoginSystem_enuMainDashBoard+0xd56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    64a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    64a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    64a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    64a8:	20 e0       	ldi	r18, 0x00	; 0
    64aa:	30 e0       	ldi	r19, 0x00	; 0
    64ac:	40 e2       	ldi	r20, 0x20	; 32
    64ae:	51 e4       	ldi	r21, 0x41	; 65
    64b0:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    64b4:	dc 01       	movw	r26, r24
    64b6:	cb 01       	movw	r24, r22
    64b8:	bc 01       	movw	r22, r24
    64ba:	cd 01       	movw	r24, r26
    64bc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    64c0:	dc 01       	movw	r26, r24
    64c2:	cb 01       	movw	r24, r22
    64c4:	9e 83       	std	Y+6, r25	; 0x06
    64c6:	8d 83       	std	Y+5, r24	; 0x05
    64c8:	0f c0       	rjmp	.+30     	; 0x64e8 <LoginSystem_enuMainDashBoard+0xd4c>
    64ca:	80 e9       	ldi	r24, 0x90	; 144
    64cc:	91 e0       	ldi	r25, 0x01	; 1
    64ce:	9c 83       	std	Y+4, r25	; 0x04
    64d0:	8b 83       	std	Y+3, r24	; 0x03
    64d2:	8b 81       	ldd	r24, Y+3	; 0x03
    64d4:	9c 81       	ldd	r25, Y+4	; 0x04
    64d6:	01 97       	sbiw	r24, 0x01	; 1
    64d8:	f1 f7       	brne	.-4      	; 0x64d6 <LoginSystem_enuMainDashBoard+0xd3a>
    64da:	9c 83       	std	Y+4, r25	; 0x04
    64dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64de:	8d 81       	ldd	r24, Y+5	; 0x05
    64e0:	9e 81       	ldd	r25, Y+6	; 0x06
    64e2:	01 97       	sbiw	r24, 0x01	; 1
    64e4:	9e 83       	std	Y+6, r25	; 0x06
    64e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64e8:	8d 81       	ldd	r24, Y+5	; 0x05
    64ea:	9e 81       	ldd	r25, Y+6	; 0x06
    64ec:	00 97       	sbiw	r24, 0x00	; 0
    64ee:	69 f7       	brne	.-38     	; 0x64ca <LoginSystem_enuMainDashBoard+0xd2e>
    64f0:	14 c0       	rjmp	.+40     	; 0x651a <LoginSystem_enuMainDashBoard+0xd7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64f2:	6f 81       	ldd	r22, Y+7	; 0x07
    64f4:	78 85       	ldd	r23, Y+8	; 0x08
    64f6:	89 85       	ldd	r24, Y+9	; 0x09
    64f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    64fa:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    64fe:	dc 01       	movw	r26, r24
    6500:	cb 01       	movw	r24, r22
    6502:	9e 83       	std	Y+6, r25	; 0x06
    6504:	8d 83       	std	Y+5, r24	; 0x05
    6506:	8d 81       	ldd	r24, Y+5	; 0x05
    6508:	9e 81       	ldd	r25, Y+6	; 0x06
    650a:	9a 83       	std	Y+2, r25	; 0x02
    650c:	89 83       	std	Y+1, r24	; 0x01
    650e:	89 81       	ldd	r24, Y+1	; 0x01
    6510:	9a 81       	ldd	r25, Y+2	; 0x02
    6512:	01 97       	sbiw	r24, 0x01	; 1
    6514:	f1 f7       	brne	.-4      	; 0x6512 <LoginSystem_enuMainDashBoard+0xd76>
    6516:	9a 83       	std	Y+2, r25	; 0x02
    6518:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    651a:	81 e0       	ldi	r24, 0x01	; 1
    651c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

	return Local_enuErrorState;
    6520:	fe 01       	movw	r30, r28
    6522:	ed 59       	subi	r30, 0x9D	; 157
    6524:	ff 4f       	sbci	r31, 0xFF	; 255
    6526:	80 81       	ld	r24, Z
}
    6528:	c1 56       	subi	r28, 0x61	; 97
    652a:	df 4f       	sbci	r29, 0xFF	; 255
    652c:	0f b6       	in	r0, 0x3f	; 63
    652e:	f8 94       	cli
    6530:	de bf       	out	0x3e, r29	; 62
    6532:	0f be       	out	0x3f, r0	; 63
    6534:	cd bf       	out	0x3d, r28	; 61
    6536:	cf 91       	pop	r28
    6538:	df 91       	pop	r29
    653a:	1f 91       	pop	r17
    653c:	0f 91       	pop	r16
    653e:	08 95       	ret

00006540 <enuOptionPage>:

ES_t enuOptionPage(const u8 * Copy_au8Options[],u8 Copy_u8NumOfOptions){
    6540:	df 93       	push	r29
    6542:	cf 93       	push	r28
    6544:	cd b7       	in	r28, 0x3d	; 61
    6546:	de b7       	in	r29, 0x3e	; 62
    6548:	6b 97       	sbiw	r28, 0x1b	; 27
    654a:	0f b6       	in	r0, 0x3f	; 63
    654c:	f8 94       	cli
    654e:	de bf       	out	0x3e, r29	; 62
    6550:	0f be       	out	0x3f, r0	; 63
    6552:	cd bf       	out	0x3d, r28	; 61
    6554:	9a 8f       	std	Y+26, r25	; 0x1a
    6556:	89 8f       	std	Y+25, r24	; 0x19
    6558:	6b 8f       	std	Y+27, r22	; 0x1b

	ES_t Local_enuErrorState = ES_NOK;
    655a:	81 e0       	ldi	r24, 0x01	; 1
    655c:	88 8b       	std	Y+16, r24	; 0x10
	Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    655e:	81 e0       	ldi	r24, 0x01	; 1
    6560:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

	u8 Local_u8OptionRow[] = {LCD_ROW_1,LCD_ROW_1,LCD_ROW_2,LCD_ROW_2};
    6564:	81 e0       	ldi	r24, 0x01	; 1
    6566:	89 8b       	std	Y+17, r24	; 0x11
    6568:	81 e0       	ldi	r24, 0x01	; 1
    656a:	8a 8b       	std	Y+18, r24	; 0x12
    656c:	82 e0       	ldi	r24, 0x02	; 2
    656e:	8b 8b       	std	Y+19, r24	; 0x13
    6570:	82 e0       	ldi	r24, 0x02	; 2
    6572:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8OptionCol[] = {LCD_COLUMN_1,LCD_COLUMN_9,LCD_COLUMN_1,LCD_COLUMN_9};
    6574:	81 e0       	ldi	r24, 0x01	; 1
    6576:	8d 8b       	std	Y+21, r24	; 0x15
    6578:	89 e0       	ldi	r24, 0x09	; 9
    657a:	8e 8b       	std	Y+22, r24	; 0x16
    657c:	81 e0       	ldi	r24, 0x01	; 1
    657e:	8f 8b       	std	Y+23, r24	; 0x17
    6580:	89 e0       	ldi	r24, 0x09	; 9
    6582:	88 8f       	std	Y+24, r24	; 0x18

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Copy_u8NumOfOptions ; Local_u8Iter++){
    6584:	1f 86       	std	Y+15, r1	; 0x0f
    6586:	9a c0       	rjmp	.+308    	; 0x66bc <enuOptionPage+0x17c>

		Lcd_enuSetCursor(Local_u8OptionRow[Local_u8Iter],Local_u8OptionCol[Local_u8Iter]);
    6588:	8f 85       	ldd	r24, Y+15	; 0x0f
    658a:	28 2f       	mov	r18, r24
    658c:	30 e0       	ldi	r19, 0x00	; 0
    658e:	ce 01       	movw	r24, r28
    6590:	41 96       	adiw	r24, 0x11	; 17
    6592:	fc 01       	movw	r30, r24
    6594:	e2 0f       	add	r30, r18
    6596:	f3 1f       	adc	r31, r19
    6598:	40 81       	ld	r20, Z
    659a:	8f 85       	ldd	r24, Y+15	; 0x0f
    659c:	28 2f       	mov	r18, r24
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	ce 01       	movw	r24, r28
    65a2:	45 96       	adiw	r24, 0x15	; 21
    65a4:	fc 01       	movw	r30, r24
    65a6:	e2 0f       	add	r30, r18
    65a8:	f3 1f       	adc	r31, r19
    65aa:	90 81       	ld	r25, Z
    65ac:	84 2f       	mov	r24, r20
    65ae:	69 2f       	mov	r22, r25
    65b0:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
		Lcd_enuSendString(Copy_au8Options[Local_u8Iter]);
    65b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    65b6:	88 2f       	mov	r24, r24
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	9c 01       	movw	r18, r24
    65bc:	22 0f       	add	r18, r18
    65be:	33 1f       	adc	r19, r19
    65c0:	89 8d       	ldd	r24, Y+25	; 0x19
    65c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    65c4:	fc 01       	movw	r30, r24
    65c6:	e2 0f       	add	r30, r18
    65c8:	f3 1f       	adc	r31, r19
    65ca:	80 81       	ld	r24, Z
    65cc:	91 81       	ldd	r25, Z+1	; 0x01
    65ce:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>
    65d2:	80 e0       	ldi	r24, 0x00	; 0
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	a8 e4       	ldi	r26, 0x48	; 72
    65d8:	b3 e4       	ldi	r27, 0x43	; 67
    65da:	8b 87       	std	Y+11, r24	; 0x0b
    65dc:	9c 87       	std	Y+12, r25	; 0x0c
    65de:	ad 87       	std	Y+13, r26	; 0x0d
    65e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    65e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    65e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    65e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    65ea:	20 e0       	ldi	r18, 0x00	; 0
    65ec:	30 e0       	ldi	r19, 0x00	; 0
    65ee:	4a e7       	ldi	r20, 0x7A	; 122
    65f0:	55 e4       	ldi	r21, 0x45	; 69
    65f2:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    65f6:	dc 01       	movw	r26, r24
    65f8:	cb 01       	movw	r24, r22
    65fa:	8f 83       	std	Y+7, r24	; 0x07
    65fc:	98 87       	std	Y+8, r25	; 0x08
    65fe:	a9 87       	std	Y+9, r26	; 0x09
    6600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6602:	6f 81       	ldd	r22, Y+7	; 0x07
    6604:	78 85       	ldd	r23, Y+8	; 0x08
    6606:	89 85       	ldd	r24, Y+9	; 0x09
    6608:	9a 85       	ldd	r25, Y+10	; 0x0a
    660a:	20 e0       	ldi	r18, 0x00	; 0
    660c:	30 e0       	ldi	r19, 0x00	; 0
    660e:	40 e8       	ldi	r20, 0x80	; 128
    6610:	5f e3       	ldi	r21, 0x3F	; 63
    6612:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    6616:	88 23       	and	r24, r24
    6618:	2c f4       	brge	.+10     	; 0x6624 <enuOptionPage+0xe4>
		__ticks = 1;
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	90 e0       	ldi	r25, 0x00	; 0
    661e:	9e 83       	std	Y+6, r25	; 0x06
    6620:	8d 83       	std	Y+5, r24	; 0x05
    6622:	3f c0       	rjmp	.+126    	; 0x66a2 <enuOptionPage+0x162>
	else if (__tmp > 65535)
    6624:	6f 81       	ldd	r22, Y+7	; 0x07
    6626:	78 85       	ldd	r23, Y+8	; 0x08
    6628:	89 85       	ldd	r24, Y+9	; 0x09
    662a:	9a 85       	ldd	r25, Y+10	; 0x0a
    662c:	20 e0       	ldi	r18, 0x00	; 0
    662e:	3f ef       	ldi	r19, 0xFF	; 255
    6630:	4f e7       	ldi	r20, 0x7F	; 127
    6632:	57 e4       	ldi	r21, 0x47	; 71
    6634:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    6638:	18 16       	cp	r1, r24
    663a:	4c f5       	brge	.+82     	; 0x668e <enuOptionPage+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    663c:	6b 85       	ldd	r22, Y+11	; 0x0b
    663e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6640:	8d 85       	ldd	r24, Y+13	; 0x0d
    6642:	9e 85       	ldd	r25, Y+14	; 0x0e
    6644:	20 e0       	ldi	r18, 0x00	; 0
    6646:	30 e0       	ldi	r19, 0x00	; 0
    6648:	40 e2       	ldi	r20, 0x20	; 32
    664a:	51 e4       	ldi	r21, 0x41	; 65
    664c:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    6650:	dc 01       	movw	r26, r24
    6652:	cb 01       	movw	r24, r22
    6654:	bc 01       	movw	r22, r24
    6656:	cd 01       	movw	r24, r26
    6658:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    665c:	dc 01       	movw	r26, r24
    665e:	cb 01       	movw	r24, r22
    6660:	9e 83       	std	Y+6, r25	; 0x06
    6662:	8d 83       	std	Y+5, r24	; 0x05
    6664:	0f c0       	rjmp	.+30     	; 0x6684 <enuOptionPage+0x144>
    6666:	80 e9       	ldi	r24, 0x90	; 144
    6668:	91 e0       	ldi	r25, 0x01	; 1
    666a:	9c 83       	std	Y+4, r25	; 0x04
    666c:	8b 83       	std	Y+3, r24	; 0x03
    666e:	8b 81       	ldd	r24, Y+3	; 0x03
    6670:	9c 81       	ldd	r25, Y+4	; 0x04
    6672:	01 97       	sbiw	r24, 0x01	; 1
    6674:	f1 f7       	brne	.-4      	; 0x6672 <enuOptionPage+0x132>
    6676:	9c 83       	std	Y+4, r25	; 0x04
    6678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    667a:	8d 81       	ldd	r24, Y+5	; 0x05
    667c:	9e 81       	ldd	r25, Y+6	; 0x06
    667e:	01 97       	sbiw	r24, 0x01	; 1
    6680:	9e 83       	std	Y+6, r25	; 0x06
    6682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6684:	8d 81       	ldd	r24, Y+5	; 0x05
    6686:	9e 81       	ldd	r25, Y+6	; 0x06
    6688:	00 97       	sbiw	r24, 0x00	; 0
    668a:	69 f7       	brne	.-38     	; 0x6666 <enuOptionPage+0x126>
    668c:	14 c0       	rjmp	.+40     	; 0x66b6 <enuOptionPage+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    668e:	6f 81       	ldd	r22, Y+7	; 0x07
    6690:	78 85       	ldd	r23, Y+8	; 0x08
    6692:	89 85       	ldd	r24, Y+9	; 0x09
    6694:	9a 85       	ldd	r25, Y+10	; 0x0a
    6696:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    669a:	dc 01       	movw	r26, r24
    669c:	cb 01       	movw	r24, r22
    669e:	9e 83       	std	Y+6, r25	; 0x06
    66a0:	8d 83       	std	Y+5, r24	; 0x05
    66a2:	8d 81       	ldd	r24, Y+5	; 0x05
    66a4:	9e 81       	ldd	r25, Y+6	; 0x06
    66a6:	9a 83       	std	Y+2, r25	; 0x02
    66a8:	89 83       	std	Y+1, r24	; 0x01
    66aa:	89 81       	ldd	r24, Y+1	; 0x01
    66ac:	9a 81       	ldd	r25, Y+2	; 0x02
    66ae:	01 97       	sbiw	r24, 0x01	; 1
    66b0:	f1 f7       	brne	.-4      	; 0x66ae <enuOptionPage+0x16e>
    66b2:	9a 83       	std	Y+2, r25	; 0x02
    66b4:	89 83       	std	Y+1, r24	; 0x01
	Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);

	u8 Local_u8OptionRow[] = {LCD_ROW_1,LCD_ROW_1,LCD_ROW_2,LCD_ROW_2};
	u8 Local_u8OptionCol[] = {LCD_COLUMN_1,LCD_COLUMN_9,LCD_COLUMN_1,LCD_COLUMN_9};

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Copy_u8NumOfOptions ; Local_u8Iter++){
    66b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    66b8:	8f 5f       	subi	r24, 0xFF	; 255
    66ba:	8f 87       	std	Y+15, r24	; 0x0f
    66bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    66be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66c0:	98 17       	cp	r25, r24
    66c2:	08 f4       	brcc	.+2      	; 0x66c6 <enuOptionPage+0x186>
    66c4:	61 cf       	rjmp	.-318    	; 0x6588 <enuOptionPage+0x48>

		_delay_ms(200);

	}

	return Local_enuErrorState;
    66c6:	88 89       	ldd	r24, Y+16	; 0x10
}
    66c8:	6b 96       	adiw	r28, 0x1b	; 27
    66ca:	0f b6       	in	r0, 0x3f	; 63
    66cc:	f8 94       	cli
    66ce:	de bf       	out	0x3e, r29	; 62
    66d0:	0f be       	out	0x3f, r0	; 63
    66d2:	cd bf       	out	0x3d, r28	; 61
    66d4:	cf 91       	pop	r28
    66d6:	df 91       	pop	r29
    66d8:	08 95       	ret

000066da <enuSendDataAtCursorLocation>:

ES_t enuSendDataAtCursorLocation(const char * Copy_pcString,u8 Copy_u8RowNum , u8 Copy_u8ColNum){
    66da:	df 93       	push	r29
    66dc:	cf 93       	push	r28
    66de:	00 d0       	rcall	.+0      	; 0x66e0 <enuSendDataAtCursorLocation+0x6>
    66e0:	00 d0       	rcall	.+0      	; 0x66e2 <enuSendDataAtCursorLocation+0x8>
    66e2:	0f 92       	push	r0
    66e4:	cd b7       	in	r28, 0x3d	; 61
    66e6:	de b7       	in	r29, 0x3e	; 62
    66e8:	9b 83       	std	Y+3, r25	; 0x03
    66ea:	8a 83       	std	Y+2, r24	; 0x02
    66ec:	6c 83       	std	Y+4, r22	; 0x04
    66ee:	4d 83       	std	Y+5, r20	; 0x05

	ES_t Local_enuErrorState = ES_NOK;
    66f0:	81 e0       	ldi	r24, 0x01	; 1
    66f2:	89 83       	std	Y+1, r24	; 0x01

	Lcd_enuSetCursor(Copy_u8RowNum,Copy_u8ColNum);
    66f4:	8c 81       	ldd	r24, Y+4	; 0x04
    66f6:	6d 81       	ldd	r22, Y+5	; 0x05
    66f8:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendString(Copy_pcString);
    66fc:	8a 81       	ldd	r24, Y+2	; 0x02
    66fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6700:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>
	return Local_enuErrorState;
    6704:	89 81       	ldd	r24, Y+1	; 0x01

}
    6706:	0f 90       	pop	r0
    6708:	0f 90       	pop	r0
    670a:	0f 90       	pop	r0
    670c:	0f 90       	pop	r0
    670e:	0f 90       	pop	r0
    6710:	cf 91       	pop	r28
    6712:	df 91       	pop	r29
    6714:	08 95       	ret

00006716 <enuDisplayTemprature>:

ES_t enuDisplayTemprature(void){
    6716:	2f 92       	push	r2
    6718:	3f 92       	push	r3
    671a:	4f 92       	push	r4
    671c:	5f 92       	push	r5
    671e:	6f 92       	push	r6
    6720:	7f 92       	push	r7
    6722:	8f 92       	push	r8
    6724:	9f 92       	push	r9
    6726:	af 92       	push	r10
    6728:	bf 92       	push	r11
    672a:	cf 92       	push	r12
    672c:	df 92       	push	r13
    672e:	ef 92       	push	r14
    6730:	ff 92       	push	r15
    6732:	0f 93       	push	r16
    6734:	1f 93       	push	r17
    6736:	df 93       	push	r29
    6738:	cf 93       	push	r28
    673a:	00 d0       	rcall	.+0      	; 0x673c <enuDisplayTemprature+0x26>
    673c:	00 d0       	rcall	.+0      	; 0x673e <enuDisplayTemprature+0x28>
    673e:	00 d0       	rcall	.+0      	; 0x6740 <enuDisplayTemprature+0x2a>
    6740:	cd b7       	in	r28, 0x3d	; 61
    6742:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    6744:	81 e0       	ldi	r24, 0x01	; 1
    6746:	8c 83       	std	Y+4, r24	; 0x04


	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_1);
    6748:	81 e0       	ldi	r24, 0x01	; 1
    674a:	61 e0       	ldi	r22, 0x01	; 1
    674c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendString("Temp = ");
    6750:	86 e5       	ldi	r24, 0x56	; 86
    6752:	91 e0       	ldi	r25, 0x01	; 1
    6754:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>
	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_10);
    6758:	81 e0       	ldi	r24, 0x01	; 1
    675a:	6a e0       	ldi	r22, 0x0A	; 10
    675c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendString(" C");
    6760:	8e e5       	ldi	r24, 0x5E	; 94
    6762:	91 e0       	ldi	r25, 0x01	; 1
    6764:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>

	ADCChannels_t Local_u8ADCChannels = ADC1;
    6768:	81 e0       	ldi	r24, 0x01	; 1
    676a:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16ADCReading;
	u16 Local_u16TempValue;


	ADC_enuReadPolling(ADC1,&Local_u16ADCReading);
    676c:	9e 01       	movw	r18, r28
    676e:	2b 5f       	subi	r18, 0xFB	; 251
    6770:	3f 4f       	sbci	r19, 0xFF	; 255
    6772:	81 e0       	ldi	r24, 0x01	; 1
    6774:	b9 01       	movw	r22, r18
    6776:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <ADC_enuReadPolling>
	Local_u16TempValue = (Local_u16ADCReading * 5000LLU) / 1024;
    677a:	8d 81       	ldd	r24, Y+5	; 0x05
    677c:	9e 81       	ldd	r25, Y+6	; 0x06
    677e:	5c 01       	movw	r10, r24
    6780:	cc 24       	eor	r12, r12
    6782:	dd 24       	eor	r13, r13
    6784:	ee 24       	eor	r14, r14
    6786:	ff 24       	eor	r15, r15
    6788:	87 01       	movw	r16, r14
    678a:	2a 2d       	mov	r18, r10
    678c:	3b 2d       	mov	r19, r11
    678e:	4c 2d       	mov	r20, r12
    6790:	5d 2d       	mov	r21, r13
    6792:	6e 2d       	mov	r22, r14
    6794:	7f 2d       	mov	r23, r15
    6796:	80 2f       	mov	r24, r16
    6798:	91 2f       	mov	r25, r17
    679a:	0f 2e       	mov	r0, r31
    679c:	f8 e8       	ldi	r31, 0x88	; 136
    679e:	af 2e       	mov	r10, r31
    67a0:	f0 2d       	mov	r31, r0
    67a2:	0f 2e       	mov	r0, r31
    67a4:	f3 e1       	ldi	r31, 0x13	; 19
    67a6:	bf 2e       	mov	r11, r31
    67a8:	f0 2d       	mov	r31, r0
    67aa:	cc 24       	eor	r12, r12
    67ac:	dd 24       	eor	r13, r13
    67ae:	ee 24       	eor	r14, r14
    67b0:	ff 24       	eor	r15, r15
    67b2:	00 e0       	ldi	r16, 0x00	; 0
    67b4:	10 e0       	ldi	r17, 0x00	; 0
    67b6:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    67ba:	22 2e       	mov	r2, r18
    67bc:	33 2e       	mov	r3, r19
    67be:	44 2e       	mov	r4, r20
    67c0:	55 2e       	mov	r5, r21
    67c2:	66 2e       	mov	r6, r22
    67c4:	77 2e       	mov	r7, r23
    67c6:	88 2e       	mov	r8, r24
    67c8:	99 2e       	mov	r9, r25
    67ca:	a2 2c       	mov	r10, r2
    67cc:	b3 2c       	mov	r11, r3
    67ce:	c4 2c       	mov	r12, r4
    67d0:	d5 2c       	mov	r13, r5
    67d2:	e6 2c       	mov	r14, r6
    67d4:	f7 2c       	mov	r15, r7
    67d6:	08 2d       	mov	r16, r8
    67d8:	19 2d       	mov	r17, r9
    67da:	2a 2d       	mov	r18, r10
    67dc:	3b 2d       	mov	r19, r11
    67de:	4c 2d       	mov	r20, r12
    67e0:	5d 2d       	mov	r21, r13
    67e2:	6e 2d       	mov	r22, r14
    67e4:	7f 2d       	mov	r23, r15
    67e6:	80 2f       	mov	r24, r16
    67e8:	91 2f       	mov	r25, r17
    67ea:	0a e0       	ldi	r16, 0x0A	; 10
    67ec:	0e 94 44 01 	call	0x288	; 0x288 <__lshrdi3>
    67f0:	a2 2e       	mov	r10, r18
    67f2:	b3 2e       	mov	r11, r19
    67f4:	c4 2e       	mov	r12, r20
    67f6:	d5 2e       	mov	r13, r21
    67f8:	e6 2e       	mov	r14, r22
    67fa:	f7 2e       	mov	r15, r23
    67fc:	08 2f       	mov	r16, r24
    67fe:	19 2f       	mov	r17, r25
    6800:	2a 2d       	mov	r18, r10
    6802:	3b 2d       	mov	r19, r11
    6804:	4c 2d       	mov	r20, r12
    6806:	5d 2d       	mov	r21, r13
    6808:	6e 2d       	mov	r22, r14
    680a:	7f 2d       	mov	r23, r15
    680c:	80 2f       	mov	r24, r16
    680e:	91 2f       	mov	r25, r17
    6810:	3a 83       	std	Y+2, r19	; 0x02
    6812:	29 83       	std	Y+1, r18	; 0x01
	Local_u16TempValue = Local_u16TempValue / 100;
    6814:	89 81       	ldd	r24, Y+1	; 0x01
    6816:	9a 81       	ldd	r25, Y+2	; 0x02
    6818:	24 e6       	ldi	r18, 0x64	; 100
    681a:	30 e0       	ldi	r19, 0x00	; 0
    681c:	b9 01       	movw	r22, r18
    681e:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <__udivmodhi4>
    6822:	cb 01       	movw	r24, r22
    6824:	9a 83       	std	Y+2, r25	; 0x02
    6826:	89 83       	std	Y+1, r24	; 0x01
	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_8);
    6828:	81 e0       	ldi	r24, 0x01	; 1
    682a:	68 e0       	ldi	r22, 0x08	; 8
    682c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendString("   ");
    6830:	81 e6       	ldi	r24, 0x61	; 97
    6832:	91 e0       	ldi	r25, 0x01	; 1
    6834:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>
	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_8);
    6838:	81 e0       	ldi	r24, 0x01	; 1
    683a:	68 e0       	ldi	r22, 0x08	; 8
    683c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuWriteIntegarNum(Local_u16TempValue);
    6840:	89 81       	ldd	r24, Y+1	; 0x01
    6842:	9a 81       	ldd	r25, Y+2	; 0x02
    6844:	cc 01       	movw	r24, r24
    6846:	a0 e0       	ldi	r26, 0x00	; 0
    6848:	b0 e0       	ldi	r27, 0x00	; 0
    684a:	bc 01       	movw	r22, r24
    684c:	cd 01       	movw	r24, r26
    684e:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <Lcd_enuWriteIntegarNum>
	//_delay_ms(500);

	return Local_enuErrorState;
    6852:	8c 81       	ldd	r24, Y+4	; 0x04
}
    6854:	26 96       	adiw	r28, 0x06	; 6
    6856:	0f b6       	in	r0, 0x3f	; 63
    6858:	f8 94       	cli
    685a:	de bf       	out	0x3e, r29	; 62
    685c:	0f be       	out	0x3f, r0	; 63
    685e:	cd bf       	out	0x3d, r28	; 61
    6860:	cf 91       	pop	r28
    6862:	df 91       	pop	r29
    6864:	1f 91       	pop	r17
    6866:	0f 91       	pop	r16
    6868:	ff 90       	pop	r15
    686a:	ef 90       	pop	r14
    686c:	df 90       	pop	r13
    686e:	cf 90       	pop	r12
    6870:	bf 90       	pop	r11
    6872:	af 90       	pop	r10
    6874:	9f 90       	pop	r9
    6876:	8f 90       	pop	r8
    6878:	7f 90       	pop	r7
    687a:	6f 90       	pop	r6
    687c:	5f 90       	pop	r5
    687e:	4f 90       	pop	r4
    6880:	3f 90       	pop	r3
    6882:	2f 90       	pop	r2
    6884:	08 95       	ret

00006886 <clickGlow_enuInit>:
//lower
#include "../../HAL/Led/Led_int.h"
#include "../../HAL/Switch/Switch_int.h"
#include "../../HAL/Buzzer/Buzzer_int.h"

ES_t clickGlow_enuInit(void){
    6886:	df 93       	push	r29
    6888:	cf 93       	push	r28
    688a:	0f 92       	push	r0
    688c:	cd b7       	in	r28, 0x3d	; 61
    688e:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState;

	Led_enuInit();
    6890:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <Led_enuInit>
	Switch_enuInit();
    6894:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <Switch_enuInit>

	return Local_enuErrorState;
    6898:	89 81       	ldd	r24, Y+1	; 0x01
}
    689a:	0f 90       	pop	r0
    689c:	cf 91       	pop	r28
    689e:	df 91       	pop	r29
    68a0:	08 95       	ret

000068a2 <Calculator_enuInit>:
#include "../../HAL/Keypad/Keypad_int.h"

// owm
#include "Calculator_priv.h"

ES_t Calculator_enuInit(void){
    68a2:	df 93       	push	r29
    68a4:	cf 93       	push	r28
    68a6:	cd b7       	in	r28, 0x3d	; 61
    68a8:	de b7       	in	r29, 0x3e	; 62
    68aa:	2f 97       	sbiw	r28, 0x0f	; 15
    68ac:	0f b6       	in	r0, 0x3f	; 63
    68ae:	f8 94       	cli
    68b0:	de bf       	out	0x3e, r29	; 62
    68b2:	0f be       	out	0x3f, r0	; 63
    68b4:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState = ES_NOK;
    68b6:	81 e0       	ldi	r24, 0x01	; 1
    68b8:	8f 87       	std	Y+15, r24	; 0x0f

	Lcd_enuInit();
    68ba:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <Lcd_enuInit>

	Lcd_enuSendCommand(LCD_CURSOR_OFF);
    68be:	8c e0       	ldi	r24, 0x0C	; 12
    68c0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>
	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_5);
    68c4:	81 e0       	ldi	r24, 0x01	; 1
    68c6:	65 e0       	ldi	r22, 0x05	; 5
    68c8:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendString("Calculator");
    68cc:	85 e6       	ldi	r24, 0x65	; 101
    68ce:	91 e0       	ldi	r25, 0x01	; 1
    68d0:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>

	Keypad_enuInit();
    68d4:	0e 94 18 22 	call	0x4430	; 0x4430 <Keypad_enuInit>
    68d8:	80 e0       	ldi	r24, 0x00	; 0
    68da:	90 e0       	ldi	r25, 0x00	; 0
    68dc:	aa e7       	ldi	r26, 0x7A	; 122
    68de:	b4 e4       	ldi	r27, 0x44	; 68
    68e0:	8b 87       	std	Y+11, r24	; 0x0b
    68e2:	9c 87       	std	Y+12, r25	; 0x0c
    68e4:	ad 87       	std	Y+13, r26	; 0x0d
    68e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    68ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    68ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    68ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    68f0:	20 e0       	ldi	r18, 0x00	; 0
    68f2:	30 e0       	ldi	r19, 0x00	; 0
    68f4:	4a e7       	ldi	r20, 0x7A	; 122
    68f6:	55 e4       	ldi	r21, 0x45	; 69
    68f8:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    68fc:	dc 01       	movw	r26, r24
    68fe:	cb 01       	movw	r24, r22
    6900:	8f 83       	std	Y+7, r24	; 0x07
    6902:	98 87       	std	Y+8, r25	; 0x08
    6904:	a9 87       	std	Y+9, r26	; 0x09
    6906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6908:	6f 81       	ldd	r22, Y+7	; 0x07
    690a:	78 85       	ldd	r23, Y+8	; 0x08
    690c:	89 85       	ldd	r24, Y+9	; 0x09
    690e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6910:	20 e0       	ldi	r18, 0x00	; 0
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	40 e8       	ldi	r20, 0x80	; 128
    6916:	5f e3       	ldi	r21, 0x3F	; 63
    6918:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    691c:	88 23       	and	r24, r24
    691e:	2c f4       	brge	.+10     	; 0x692a <Calculator_enuInit+0x88>
		__ticks = 1;
    6920:	81 e0       	ldi	r24, 0x01	; 1
    6922:	90 e0       	ldi	r25, 0x00	; 0
    6924:	9e 83       	std	Y+6, r25	; 0x06
    6926:	8d 83       	std	Y+5, r24	; 0x05
    6928:	3f c0       	rjmp	.+126    	; 0x69a8 <Calculator_enuInit+0x106>
	else if (__tmp > 65535)
    692a:	6f 81       	ldd	r22, Y+7	; 0x07
    692c:	78 85       	ldd	r23, Y+8	; 0x08
    692e:	89 85       	ldd	r24, Y+9	; 0x09
    6930:	9a 85       	ldd	r25, Y+10	; 0x0a
    6932:	20 e0       	ldi	r18, 0x00	; 0
    6934:	3f ef       	ldi	r19, 0xFF	; 255
    6936:	4f e7       	ldi	r20, 0x7F	; 127
    6938:	57 e4       	ldi	r21, 0x47	; 71
    693a:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    693e:	18 16       	cp	r1, r24
    6940:	4c f5       	brge	.+82     	; 0x6994 <Calculator_enuInit+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6942:	6b 85       	ldd	r22, Y+11	; 0x0b
    6944:	7c 85       	ldd	r23, Y+12	; 0x0c
    6946:	8d 85       	ldd	r24, Y+13	; 0x0d
    6948:	9e 85       	ldd	r25, Y+14	; 0x0e
    694a:	20 e0       	ldi	r18, 0x00	; 0
    694c:	30 e0       	ldi	r19, 0x00	; 0
    694e:	40 e2       	ldi	r20, 0x20	; 32
    6950:	51 e4       	ldi	r21, 0x41	; 65
    6952:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    6956:	dc 01       	movw	r26, r24
    6958:	cb 01       	movw	r24, r22
    695a:	bc 01       	movw	r22, r24
    695c:	cd 01       	movw	r24, r26
    695e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6962:	dc 01       	movw	r26, r24
    6964:	cb 01       	movw	r24, r22
    6966:	9e 83       	std	Y+6, r25	; 0x06
    6968:	8d 83       	std	Y+5, r24	; 0x05
    696a:	0f c0       	rjmp	.+30     	; 0x698a <Calculator_enuInit+0xe8>
    696c:	80 e9       	ldi	r24, 0x90	; 144
    696e:	91 e0       	ldi	r25, 0x01	; 1
    6970:	9c 83       	std	Y+4, r25	; 0x04
    6972:	8b 83       	std	Y+3, r24	; 0x03
    6974:	8b 81       	ldd	r24, Y+3	; 0x03
    6976:	9c 81       	ldd	r25, Y+4	; 0x04
    6978:	01 97       	sbiw	r24, 0x01	; 1
    697a:	f1 f7       	brne	.-4      	; 0x6978 <Calculator_enuInit+0xd6>
    697c:	9c 83       	std	Y+4, r25	; 0x04
    697e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6980:	8d 81       	ldd	r24, Y+5	; 0x05
    6982:	9e 81       	ldd	r25, Y+6	; 0x06
    6984:	01 97       	sbiw	r24, 0x01	; 1
    6986:	9e 83       	std	Y+6, r25	; 0x06
    6988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    698a:	8d 81       	ldd	r24, Y+5	; 0x05
    698c:	9e 81       	ldd	r25, Y+6	; 0x06
    698e:	00 97       	sbiw	r24, 0x00	; 0
    6990:	69 f7       	brne	.-38     	; 0x696c <Calculator_enuInit+0xca>
    6992:	14 c0       	rjmp	.+40     	; 0x69bc <Calculator_enuInit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6994:	6f 81       	ldd	r22, Y+7	; 0x07
    6996:	78 85       	ldd	r23, Y+8	; 0x08
    6998:	89 85       	ldd	r24, Y+9	; 0x09
    699a:	9a 85       	ldd	r25, Y+10	; 0x0a
    699c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    69a0:	dc 01       	movw	r26, r24
    69a2:	cb 01       	movw	r24, r22
    69a4:	9e 83       	std	Y+6, r25	; 0x06
    69a6:	8d 83       	std	Y+5, r24	; 0x05
    69a8:	8d 81       	ldd	r24, Y+5	; 0x05
    69aa:	9e 81       	ldd	r25, Y+6	; 0x06
    69ac:	9a 83       	std	Y+2, r25	; 0x02
    69ae:	89 83       	std	Y+1, r24	; 0x01
    69b0:	89 81       	ldd	r24, Y+1	; 0x01
    69b2:	9a 81       	ldd	r25, Y+2	; 0x02
    69b4:	01 97       	sbiw	r24, 0x01	; 1
    69b6:	f1 f7       	brne	.-4      	; 0x69b4 <Calculator_enuInit+0x112>
    69b8:	9a 83       	std	Y+2, r25	; 0x02
    69ba:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);

	Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    69bc:	81 e0       	ldi	r24, 0x01	; 1
    69be:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

	return Local_enuErrorState;
    69c2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    69c4:	2f 96       	adiw	r28, 0x0f	; 15
    69c6:	0f b6       	in	r0, 0x3f	; 63
    69c8:	f8 94       	cli
    69ca:	de bf       	out	0x3e, r29	; 62
    69cc:	0f be       	out	0x3f, r0	; 63
    69ce:	cd bf       	out	0x3d, r28	; 61
    69d0:	cf 91       	pop	r28
    69d2:	df 91       	pop	r29
    69d4:	08 95       	ret

000069d6 <Calculator_enuPowerCalculator>:

ES_t Calculator_enuPowerCalculator(void){
    69d6:	df 93       	push	r29
    69d8:	cf 93       	push	r28
    69da:	cd b7       	in	r28, 0x3d	; 61
    69dc:	de b7       	in	r29, 0x3e	; 62
    69de:	ed 97       	sbiw	r28, 0x3d	; 61
    69e0:	0f b6       	in	r0, 0x3f	; 63
    69e2:	f8 94       	cli
    69e4:	de bf       	out	0x3e, r29	; 62
    69e6:	0f be       	out	0x3f, r0	; 63
    69e8:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState = ES_NOK;
    69ea:	81 e0       	ldi	r24, 0x01	; 1
    69ec:	8f 8b       	std	Y+23, r24	; 0x17


	u8 Local_u8KeypadValue;
	BOOL Local_bFillNextOperand = false;
    69ee:	1e 8a       	std	Y+22, r1	; 0x16
	BOOL Local_bOperatorFlag = false;
    69f0:	1d 8a       	std	Y+21, r1	; 0x15
	u8 Local_au8EnteredOperand[33] = {'\0'};
    69f2:	81 e2       	ldi	r24, 0x21	; 33
    69f4:	fe 01       	movw	r30, r28
    69f6:	79 96       	adiw	r30, 0x19	; 25
    69f8:	df 01       	movw	r26, r30
    69fa:	98 2f       	mov	r25, r24
    69fc:	1d 92       	st	X+, r1
    69fe:	9a 95       	dec	r25
    6a00:	e9 f7       	brne	.-6      	; 0x69fc <Calculator_enuPowerCalculator+0x26>
	f32 Local_f32OperationResult = 0;
    6a02:	80 e0       	ldi	r24, 0x00	; 0
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	a0 e0       	ldi	r26, 0x00	; 0
    6a08:	b0 e0       	ldi	r27, 0x00	; 0
    6a0a:	89 8b       	std	Y+17, r24	; 0x11
    6a0c:	9a 8b       	std	Y+18, r25	; 0x12
    6a0e:	ab 8b       	std	Y+19, r26	; 0x13
    6a10:	bc 8b       	std	Y+20, r27	; 0x14
	u8 Local_u8Operator;
	u8 Local_u8Iter = 0;
    6a12:	1f 86       	std	Y+15, r1	; 0x0f

	while(1){

		Keypad_enuGetPressedKey(&Local_u8KeypadValue);
    6a14:	ce 01       	movw	r24, r28
    6a16:	48 96       	adiw	r24, 0x18	; 24
    6a18:	0e 94 bb 22 	call	0x4576	; 0x4576 <Keypad_enuGetPressedKey>
		if(Local_u8KeypadValue != KEYPAD_NOT_PRESSED){
    6a1c:	88 8d       	ldd	r24, Y+24	; 0x18
    6a1e:	8f 3f       	cpi	r24, 0xFF	; 255
    6a20:	c9 f3       	breq	.-14     	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>

			s32 Local_s32EnteredOperand;
			if(Local_u8KeypadValue == CALCULATOR_CLEAR_BUTTON){
    6a22:	88 8d       	ldd	r24, Y+24	; 0x18
    6a24:	83 34       	cpi	r24, 0x43	; 67
    6a26:	09 f0       	breq	.+2      	; 0x6a2a <Calculator_enuPowerCalculator+0x54>
    6a28:	8c c0       	rjmp	.+280    	; 0x6b42 <Calculator_enuPowerCalculator+0x16c>

				Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    6a2a:	81 e0       	ldi	r24, 0x01	; 1
    6a2c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>
				//_delay_ms(2000);
				Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_1);
    6a30:	81 e0       	ldi	r24, 0x01	; 1
    6a32:	61 e0       	ldi	r22, 0x01	; 1
    6a34:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
				Lcd_enuSendString("Make New Operation");
    6a38:	80 e7       	ldi	r24, 0x70	; 112
    6a3a:	91 e0       	ldi	r25, 0x01	; 1
    6a3c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>
				Local_u8Iter = 0;
    6a40:	1f 86       	std	Y+15, r1	; 0x0f
				Local_f32OperationResult = 0;
    6a42:	80 e0       	ldi	r24, 0x00	; 0
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	a0 e0       	ldi	r26, 0x00	; 0
    6a48:	b0 e0       	ldi	r27, 0x00	; 0
    6a4a:	89 8b       	std	Y+17, r24	; 0x11
    6a4c:	9a 8b       	std	Y+18, r25	; 0x12
    6a4e:	ab 8b       	std	Y+19, r26	; 0x13
    6a50:	bc 8b       	std	Y+20, r27	; 0x14
				Local_bFillNextOperand = false;
    6a52:	1e 8a       	std	Y+22, r1	; 0x16
				Local_bOperatorFlag = false;
    6a54:	1d 8a       	std	Y+21, r1	; 0x15
    6a56:	80 e0       	ldi	r24, 0x00	; 0
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	aa e7       	ldi	r26, 0x7A	; 122
    6a5c:	b4 e4       	ldi	r27, 0x44	; 68
    6a5e:	8b 87       	std	Y+11, r24	; 0x0b
    6a60:	9c 87       	std	Y+12, r25	; 0x0c
    6a62:	ad 87       	std	Y+13, r26	; 0x0d
    6a64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a6e:	20 e0       	ldi	r18, 0x00	; 0
    6a70:	30 e0       	ldi	r19, 0x00	; 0
    6a72:	4a e7       	ldi	r20, 0x7A	; 122
    6a74:	55 e4       	ldi	r21, 0x45	; 69
    6a76:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    6a7a:	dc 01       	movw	r26, r24
    6a7c:	cb 01       	movw	r24, r22
    6a7e:	8f 83       	std	Y+7, r24	; 0x07
    6a80:	98 87       	std	Y+8, r25	; 0x08
    6a82:	a9 87       	std	Y+9, r26	; 0x09
    6a84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a86:	6f 81       	ldd	r22, Y+7	; 0x07
    6a88:	78 85       	ldd	r23, Y+8	; 0x08
    6a8a:	89 85       	ldd	r24, Y+9	; 0x09
    6a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a8e:	20 e0       	ldi	r18, 0x00	; 0
    6a90:	30 e0       	ldi	r19, 0x00	; 0
    6a92:	40 e8       	ldi	r20, 0x80	; 128
    6a94:	5f e3       	ldi	r21, 0x3F	; 63
    6a96:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    6a9a:	88 23       	and	r24, r24
    6a9c:	2c f4       	brge	.+10     	; 0x6aa8 <Calculator_enuPowerCalculator+0xd2>
		__ticks = 1;
    6a9e:	81 e0       	ldi	r24, 0x01	; 1
    6aa0:	90 e0       	ldi	r25, 0x00	; 0
    6aa2:	9e 83       	std	Y+6, r25	; 0x06
    6aa4:	8d 83       	std	Y+5, r24	; 0x05
    6aa6:	3f c0       	rjmp	.+126    	; 0x6b26 <Calculator_enuPowerCalculator+0x150>
	else if (__tmp > 65535)
    6aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    6aaa:	78 85       	ldd	r23, Y+8	; 0x08
    6aac:	89 85       	ldd	r24, Y+9	; 0x09
    6aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ab0:	20 e0       	ldi	r18, 0x00	; 0
    6ab2:	3f ef       	ldi	r19, 0xFF	; 255
    6ab4:	4f e7       	ldi	r20, 0x7F	; 127
    6ab6:	57 e4       	ldi	r21, 0x47	; 71
    6ab8:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    6abc:	18 16       	cp	r1, r24
    6abe:	4c f5       	brge	.+82     	; 0x6b12 <Calculator_enuPowerCalculator+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ac8:	20 e0       	ldi	r18, 0x00	; 0
    6aca:	30 e0       	ldi	r19, 0x00	; 0
    6acc:	40 e2       	ldi	r20, 0x20	; 32
    6ace:	51 e4       	ldi	r21, 0x41	; 65
    6ad0:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    6ad4:	dc 01       	movw	r26, r24
    6ad6:	cb 01       	movw	r24, r22
    6ad8:	bc 01       	movw	r22, r24
    6ada:	cd 01       	movw	r24, r26
    6adc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6ae0:	dc 01       	movw	r26, r24
    6ae2:	cb 01       	movw	r24, r22
    6ae4:	9e 83       	std	Y+6, r25	; 0x06
    6ae6:	8d 83       	std	Y+5, r24	; 0x05
    6ae8:	0f c0       	rjmp	.+30     	; 0x6b08 <Calculator_enuPowerCalculator+0x132>
    6aea:	80 e9       	ldi	r24, 0x90	; 144
    6aec:	91 e0       	ldi	r25, 0x01	; 1
    6aee:	9c 83       	std	Y+4, r25	; 0x04
    6af0:	8b 83       	std	Y+3, r24	; 0x03
    6af2:	8b 81       	ldd	r24, Y+3	; 0x03
    6af4:	9c 81       	ldd	r25, Y+4	; 0x04
    6af6:	01 97       	sbiw	r24, 0x01	; 1
    6af8:	f1 f7       	brne	.-4      	; 0x6af6 <Calculator_enuPowerCalculator+0x120>
    6afa:	9c 83       	std	Y+4, r25	; 0x04
    6afc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6afe:	8d 81       	ldd	r24, Y+5	; 0x05
    6b00:	9e 81       	ldd	r25, Y+6	; 0x06
    6b02:	01 97       	sbiw	r24, 0x01	; 1
    6b04:	9e 83       	std	Y+6, r25	; 0x06
    6b06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b08:	8d 81       	ldd	r24, Y+5	; 0x05
    6b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b0c:	00 97       	sbiw	r24, 0x00	; 0
    6b0e:	69 f7       	brne	.-38     	; 0x6aea <Calculator_enuPowerCalculator+0x114>
    6b10:	14 c0       	rjmp	.+40     	; 0x6b3a <Calculator_enuPowerCalculator+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b12:	6f 81       	ldd	r22, Y+7	; 0x07
    6b14:	78 85       	ldd	r23, Y+8	; 0x08
    6b16:	89 85       	ldd	r24, Y+9	; 0x09
    6b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b1a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6b1e:	dc 01       	movw	r26, r24
    6b20:	cb 01       	movw	r24, r22
    6b22:	9e 83       	std	Y+6, r25	; 0x06
    6b24:	8d 83       	std	Y+5, r24	; 0x05
    6b26:	8d 81       	ldd	r24, Y+5	; 0x05
    6b28:	9e 81       	ldd	r25, Y+6	; 0x06
    6b2a:	9a 83       	std	Y+2, r25	; 0x02
    6b2c:	89 83       	std	Y+1, r24	; 0x01
    6b2e:	89 81       	ldd	r24, Y+1	; 0x01
    6b30:	9a 81       	ldd	r25, Y+2	; 0x02
    6b32:	01 97       	sbiw	r24, 0x01	; 1
    6b34:	f1 f7       	brne	.-4      	; 0x6b32 <Calculator_enuPowerCalculator+0x15c>
    6b36:	9a 83       	std	Y+2, r25	; 0x02
    6b38:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    6b3a:	81 e0       	ldi	r24, 0x01	; 1
    6b3c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>
    6b40:	69 cf       	rjmp	.-302    	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>
			}
			else if(Local_u8KeypadValue == CALCULATOR_EQUAL_OPERATOR){
    6b42:	88 8d       	ldd	r24, Y+24	; 0x18
    6b44:	8d 33       	cpi	r24, 0x3D	; 61
    6b46:	09 f0       	breq	.+2      	; 0x6b4a <Calculator_enuPowerCalculator+0x174>
    6b48:	e2 c0       	rjmp	.+452    	; 0x6d0e <Calculator_enuPowerCalculator+0x338>

				Lcd_enuSendData(Local_u8KeypadValue);
    6b4a:	88 8d       	ldd	r24, Y+24	; 0x18
    6b4c:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>


				if(Local_u8Operator == CALCULATOR_ADDITION){
    6b50:	88 89       	ldd	r24, Y+16	; 0x10
    6b52:	8b 32       	cpi	r24, 0x2B	; 43
    6b54:	59 f5       	brne	.+86     	; 0x6bac <Calculator_enuPowerCalculator+0x1d6>

					enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6b56:	ce 01       	movw	r24, r28
    6b58:	49 96       	adiw	r24, 0x19	; 25
    6b5a:	9e 01       	movw	r18, r28
    6b5c:	26 5c       	subi	r18, 0xC6	; 198
    6b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b60:	b9 01       	movw	r22, r18
    6b62:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>
					Local_f32OperationResult = Local_f32OperationResult +  Local_s32EnteredOperand;
    6b66:	8a ad       	ldd	r24, Y+58	; 0x3a
    6b68:	9b ad       	ldd	r25, Y+59	; 0x3b
    6b6a:	ac ad       	ldd	r26, Y+60	; 0x3c
    6b6c:	bd ad       	ldd	r27, Y+61	; 0x3d
    6b6e:	bc 01       	movw	r22, r24
    6b70:	cd 01       	movw	r24, r26
    6b72:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6b76:	9b 01       	movw	r18, r22
    6b78:	ac 01       	movw	r20, r24
    6b7a:	69 89       	ldd	r22, Y+17	; 0x11
    6b7c:	7a 89       	ldd	r23, Y+18	; 0x12
    6b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    6b80:	9c 89       	ldd	r25, Y+20	; 0x14
    6b82:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__addsf3>
    6b86:	dc 01       	movw	r26, r24
    6b88:	cb 01       	movw	r24, r22
    6b8a:	89 8b       	std	Y+17, r24	; 0x11
    6b8c:	9a 8b       	std	Y+18, r25	; 0x12
    6b8e:	ab 8b       	std	Y+19, r26	; 0x13
    6b90:	bc 8b       	std	Y+20, r27	; 0x14
					Lcd_enuWriteIntegarNum((s32)Local_f32OperationResult);
    6b92:	69 89       	ldd	r22, Y+17	; 0x11
    6b94:	7a 89       	ldd	r23, Y+18	; 0x12
    6b96:	8b 89       	ldd	r24, Y+19	; 0x13
    6b98:	9c 89       	ldd	r25, Y+20	; 0x14
    6b9a:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
    6b9e:	dc 01       	movw	r26, r24
    6ba0:	cb 01       	movw	r24, r22
    6ba2:	bc 01       	movw	r22, r24
    6ba4:	cd 01       	movw	r24, r26
    6ba6:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <Lcd_enuWriteIntegarNum>
    6baa:	34 cf       	rjmp	.-408    	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>
				}
				else if(Local_u8Operator == CALCULATOR_SUBTRACTION){
    6bac:	88 89       	ldd	r24, Y+16	; 0x10
    6bae:	8d 32       	cpi	r24, 0x2D	; 45
    6bb0:	59 f5       	brne	.+86     	; 0x6c08 <Calculator_enuPowerCalculator+0x232>

					enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6bb2:	ce 01       	movw	r24, r28
    6bb4:	49 96       	adiw	r24, 0x19	; 25
    6bb6:	9e 01       	movw	r18, r28
    6bb8:	26 5c       	subi	r18, 0xC6	; 198
    6bba:	3f 4f       	sbci	r19, 0xFF	; 255
    6bbc:	b9 01       	movw	r22, r18
    6bbe:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>
					Local_f32OperationResult = Local_f32OperationResult - Local_s32EnteredOperand;
    6bc2:	8a ad       	ldd	r24, Y+58	; 0x3a
    6bc4:	9b ad       	ldd	r25, Y+59	; 0x3b
    6bc6:	ac ad       	ldd	r26, Y+60	; 0x3c
    6bc8:	bd ad       	ldd	r27, Y+61	; 0x3d
    6bca:	bc 01       	movw	r22, r24
    6bcc:	cd 01       	movw	r24, r26
    6bce:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6bd2:	9b 01       	movw	r18, r22
    6bd4:	ac 01       	movw	r20, r24
    6bd6:	69 89       	ldd	r22, Y+17	; 0x11
    6bd8:	7a 89       	ldd	r23, Y+18	; 0x12
    6bda:	8b 89       	ldd	r24, Y+19	; 0x13
    6bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    6bde:	0e 94 3b 03 	call	0x676	; 0x676 <__subsf3>
    6be2:	dc 01       	movw	r26, r24
    6be4:	cb 01       	movw	r24, r22
    6be6:	89 8b       	std	Y+17, r24	; 0x11
    6be8:	9a 8b       	std	Y+18, r25	; 0x12
    6bea:	ab 8b       	std	Y+19, r26	; 0x13
    6bec:	bc 8b       	std	Y+20, r27	; 0x14
					Lcd_enuWriteIntegarNum((s32)Local_f32OperationResult);
    6bee:	69 89       	ldd	r22, Y+17	; 0x11
    6bf0:	7a 89       	ldd	r23, Y+18	; 0x12
    6bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    6bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    6bf6:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
    6bfa:	dc 01       	movw	r26, r24
    6bfc:	cb 01       	movw	r24, r22
    6bfe:	bc 01       	movw	r22, r24
    6c00:	cd 01       	movw	r24, r26
    6c02:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <Lcd_enuWriteIntegarNum>
    6c06:	06 cf       	rjmp	.-500    	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>
				}
				else if(Local_u8Operator == CALCULATOR_MULTIPLICATION){
    6c08:	88 89       	ldd	r24, Y+16	; 0x10
    6c0a:	8a 32       	cpi	r24, 0x2A	; 42
    6c0c:	59 f5       	brne	.+86     	; 0x6c64 <Calculator_enuPowerCalculator+0x28e>

					enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6c0e:	ce 01       	movw	r24, r28
    6c10:	49 96       	adiw	r24, 0x19	; 25
    6c12:	9e 01       	movw	r18, r28
    6c14:	26 5c       	subi	r18, 0xC6	; 198
    6c16:	3f 4f       	sbci	r19, 0xFF	; 255
    6c18:	b9 01       	movw	r22, r18
    6c1a:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>
					Local_f32OperationResult = Local_f32OperationResult *  Local_s32EnteredOperand;
    6c1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    6c20:	9b ad       	ldd	r25, Y+59	; 0x3b
    6c22:	ac ad       	ldd	r26, Y+60	; 0x3c
    6c24:	bd ad       	ldd	r27, Y+61	; 0x3d
    6c26:	bc 01       	movw	r22, r24
    6c28:	cd 01       	movw	r24, r26
    6c2a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6c2e:	9b 01       	movw	r18, r22
    6c30:	ac 01       	movw	r20, r24
    6c32:	69 89       	ldd	r22, Y+17	; 0x11
    6c34:	7a 89       	ldd	r23, Y+18	; 0x12
    6c36:	8b 89       	ldd	r24, Y+19	; 0x13
    6c38:	9c 89       	ldd	r25, Y+20	; 0x14
    6c3a:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    6c3e:	dc 01       	movw	r26, r24
    6c40:	cb 01       	movw	r24, r22
    6c42:	89 8b       	std	Y+17, r24	; 0x11
    6c44:	9a 8b       	std	Y+18, r25	; 0x12
    6c46:	ab 8b       	std	Y+19, r26	; 0x13
    6c48:	bc 8b       	std	Y+20, r27	; 0x14
					Lcd_enuWriteIntegarNum((s32)Local_f32OperationResult);
    6c4a:	69 89       	ldd	r22, Y+17	; 0x11
    6c4c:	7a 89       	ldd	r23, Y+18	; 0x12
    6c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    6c50:	9c 89       	ldd	r25, Y+20	; 0x14
    6c52:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
    6c56:	dc 01       	movw	r26, r24
    6c58:	cb 01       	movw	r24, r22
    6c5a:	bc 01       	movw	r22, r24
    6c5c:	cd 01       	movw	r24, r26
    6c5e:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <Lcd_enuWriteIntegarNum>
    6c62:	d8 ce       	rjmp	.-592    	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>

				}
				else if(Local_u8Operator == CALCULATOR_DEVISION){
    6c64:	88 89       	ldd	r24, Y+16	; 0x10
    6c66:	8f 32       	cpi	r24, 0x2F	; 47
    6c68:	39 f5       	brne	.+78     	; 0x6cb8 <Calculator_enuPowerCalculator+0x2e2>

					enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6c6a:	ce 01       	movw	r24, r28
    6c6c:	49 96       	adiw	r24, 0x19	; 25
    6c6e:	9e 01       	movw	r18, r28
    6c70:	26 5c       	subi	r18, 0xC6	; 198
    6c72:	3f 4f       	sbci	r19, 0xFF	; 255
    6c74:	b9 01       	movw	r22, r18
    6c76:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>
					Local_f32OperationResult = Local_f32OperationResult /  Local_s32EnteredOperand;
    6c7a:	8a ad       	ldd	r24, Y+58	; 0x3a
    6c7c:	9b ad       	ldd	r25, Y+59	; 0x3b
    6c7e:	ac ad       	ldd	r26, Y+60	; 0x3c
    6c80:	bd ad       	ldd	r27, Y+61	; 0x3d
    6c82:	bc 01       	movw	r22, r24
    6c84:	cd 01       	movw	r24, r26
    6c86:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6c8a:	9b 01       	movw	r18, r22
    6c8c:	ac 01       	movw	r20, r24
    6c8e:	69 89       	ldd	r22, Y+17	; 0x11
    6c90:	7a 89       	ldd	r23, Y+18	; 0x12
    6c92:	8b 89       	ldd	r24, Y+19	; 0x13
    6c94:	9c 89       	ldd	r25, Y+20	; 0x14
    6c96:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
    6c9a:	dc 01       	movw	r26, r24
    6c9c:	cb 01       	movw	r24, r22
    6c9e:	89 8b       	std	Y+17, r24	; 0x11
    6ca0:	9a 8b       	std	Y+18, r25	; 0x12
    6ca2:	ab 8b       	std	Y+19, r26	; 0x13
    6ca4:	bc 8b       	std	Y+20, r27	; 0x14
					Lcd_enuWriteFloatNum(Local_f32OperationResult);
    6ca6:	89 89       	ldd	r24, Y+17	; 0x11
    6ca8:	9a 89       	ldd	r25, Y+18	; 0x12
    6caa:	ab 89       	ldd	r26, Y+19	; 0x13
    6cac:	bc 89       	ldd	r27, Y+20	; 0x14
    6cae:	bc 01       	movw	r22, r24
    6cb0:	cd 01       	movw	r24, r26
    6cb2:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <Lcd_enuWriteFloatNum>
    6cb6:	ae ce       	rjmp	.-676    	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>
				}
				else{

					enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6cb8:	ce 01       	movw	r24, r28
    6cba:	49 96       	adiw	r24, 0x19	; 25
    6cbc:	9e 01       	movw	r18, r28
    6cbe:	26 5c       	subi	r18, 0xC6	; 198
    6cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc2:	b9 01       	movw	r22, r18
    6cc4:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>
					Local_f32OperationResult = Local_f32OperationResult +  Local_s32EnteredOperand;
    6cc8:	8a ad       	ldd	r24, Y+58	; 0x3a
    6cca:	9b ad       	ldd	r25, Y+59	; 0x3b
    6ccc:	ac ad       	ldd	r26, Y+60	; 0x3c
    6cce:	bd ad       	ldd	r27, Y+61	; 0x3d
    6cd0:	bc 01       	movw	r22, r24
    6cd2:	cd 01       	movw	r24, r26
    6cd4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6cd8:	9b 01       	movw	r18, r22
    6cda:	ac 01       	movw	r20, r24
    6cdc:	69 89       	ldd	r22, Y+17	; 0x11
    6cde:	7a 89       	ldd	r23, Y+18	; 0x12
    6ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    6ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    6ce4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__addsf3>
    6ce8:	dc 01       	movw	r26, r24
    6cea:	cb 01       	movw	r24, r22
    6cec:	89 8b       	std	Y+17, r24	; 0x11
    6cee:	9a 8b       	std	Y+18, r25	; 0x12
    6cf0:	ab 8b       	std	Y+19, r26	; 0x13
    6cf2:	bc 8b       	std	Y+20, r27	; 0x14
					Lcd_enuWriteIntegarNum((s32)Local_f32OperationResult);
    6cf4:	69 89       	ldd	r22, Y+17	; 0x11
    6cf6:	7a 89       	ldd	r23, Y+18	; 0x12
    6cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    6cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    6cfc:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixsfsi>
    6d00:	dc 01       	movw	r26, r24
    6d02:	cb 01       	movw	r24, r22
    6d04:	bc 01       	movw	r22, r24
    6d06:	cd 01       	movw	r24, r26
    6d08:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <Lcd_enuWriteIntegarNum>
    6d0c:	83 ce       	rjmp	.-762    	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>
				}


			}
			else if( ((Local_u8KeypadValue >= CALCULATOR_MIN_NUM) && (Local_u8KeypadValue <= CALCULATOR_MAX_NUM))
    6d0e:	88 8d       	ldd	r24, Y+24	; 0x18
    6d10:	80 33       	cpi	r24, 0x30	; 48
    6d12:	18 f0       	brcs	.+6      	; 0x6d1a <Calculator_enuPowerCalculator+0x344>
    6d14:	88 8d       	ldd	r24, Y+24	; 0x18
    6d16:	8a 33       	cpi	r24, 0x3A	; 58
    6d18:	60 f0       	brcs	.+24     	; 0x6d32 <Calculator_enuPowerCalculator+0x35c>
    6d1a:	88 8d       	ldd	r24, Y+24	; 0x18
    6d1c:	8b 32       	cpi	r24, 0x2B	; 43
    6d1e:	19 f0       	breq	.+6      	; 0x6d26 <Calculator_enuPowerCalculator+0x350>
    6d20:	88 8d       	ldd	r24, Y+24	; 0x18
    6d22:	8d 32       	cpi	r24, 0x2D	; 45
    6d24:	19 f4       	brne	.+6      	; 0x6d2c <Calculator_enuPowerCalculator+0x356>
    6d26:	8d 89       	ldd	r24, Y+21	; 0x15
    6d28:	88 23       	and	r24, r24
    6d2a:	19 f0       	breq	.+6      	; 0x6d32 <Calculator_enuPowerCalculator+0x35c>
    6d2c:	88 8d       	ldd	r24, Y+24	; 0x18
    6d2e:	8e 32       	cpi	r24, 0x2E	; 46
    6d30:	e1 f4       	brne	.+56     	; 0x6d6a <Calculator_enuPowerCalculator+0x394>
					|| ( ((Local_u8KeypadValue == CALCULATOR_ADDITION) || (Local_u8KeypadValue == CALCULATOR_SUBTRACTION))
							&& (Local_bOperatorFlag == false)) || (Local_u8KeypadValue == CALCULATOR_DOT)){

				Lcd_enuSendData(Local_u8KeypadValue);
    6d32:	88 8d       	ldd	r24, Y+24	; 0x18
    6d34:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

				Local_au8EnteredOperand[Local_u8Iter] = Local_u8KeypadValue;
    6d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d3a:	28 2f       	mov	r18, r24
    6d3c:	30 e0       	ldi	r19, 0x00	; 0
    6d3e:	48 8d       	ldd	r20, Y+24	; 0x18
    6d40:	ce 01       	movw	r24, r28
    6d42:	49 96       	adiw	r24, 0x19	; 25
    6d44:	fc 01       	movw	r30, r24
    6d46:	e2 0f       	add	r30, r18
    6d48:	f3 1f       	adc	r31, r19
    6d4a:	40 83       	st	Z, r20
				Local_u8Iter++;
    6d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d4e:	8f 5f       	subi	r24, 0xFF	; 255
    6d50:	8f 87       	std	Y+15, r24	; 0x0f
				Local_au8EnteredOperand[Local_u8Iter] = '\0';
    6d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d54:	28 2f       	mov	r18, r24
    6d56:	30 e0       	ldi	r19, 0x00	; 0
    6d58:	ce 01       	movw	r24, r28
    6d5a:	49 96       	adiw	r24, 0x19	; 25
    6d5c:	fc 01       	movw	r30, r24
    6d5e:	e2 0f       	add	r30, r18
    6d60:	f3 1f       	adc	r31, r19
    6d62:	10 82       	st	Z, r1
				Local_bOperatorFlag = true;
    6d64:	81 e0       	ldi	r24, 0x01	; 1
    6d66:	8d 8b       	std	Y+21, r24	; 0x15
    6d68:	55 ce       	rjmp	.-854    	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>

			}
			else if((Local_u8KeypadValue == CALCULATOR_ADDITION) && (Local_bOperatorFlag == true)){
    6d6a:	88 8d       	ldd	r24, Y+24	; 0x18
    6d6c:	8b 32       	cpi	r24, 0x2B	; 43
    6d6e:	59 f5       	brne	.+86     	; 0x6dc6 <Calculator_enuPowerCalculator+0x3f0>
    6d70:	8d 89       	ldd	r24, Y+21	; 0x15
    6d72:	81 30       	cpi	r24, 0x01	; 1
    6d74:	41 f5       	brne	.+80     	; 0x6dc6 <Calculator_enuPowerCalculator+0x3f0>

				Lcd_enuSendData(Local_u8KeypadValue);
    6d76:	88 8d       	ldd	r24, Y+24	; 0x18
    6d78:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

				Local_u8Operator = CALCULATOR_ADDITION;
    6d7c:	8b e2       	ldi	r24, 0x2B	; 43
    6d7e:	88 8b       	std	Y+16, r24	; 0x10
				Local_bFillNextOperand = true;
    6d80:	81 e0       	ldi	r24, 0x01	; 1
    6d82:	8e 8b       	std	Y+22, r24	; 0x16
				Local_bOperatorFlag = false;
    6d84:	1d 8a       	std	Y+21, r1	; 0x15
				Local_u8Iter = 0;
    6d86:	1f 86       	std	Y+15, r1	; 0x0f

				enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6d88:	ce 01       	movw	r24, r28
    6d8a:	49 96       	adiw	r24, 0x19	; 25
    6d8c:	9e 01       	movw	r18, r28
    6d8e:	26 5c       	subi	r18, 0xC6	; 198
    6d90:	3f 4f       	sbci	r19, 0xFF	; 255
    6d92:	b9 01       	movw	r22, r18
    6d94:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>
				Local_f32OperationResult = Local_f32OperationResult + Local_s32EnteredOperand;
    6d98:	8a ad       	ldd	r24, Y+58	; 0x3a
    6d9a:	9b ad       	ldd	r25, Y+59	; 0x3b
    6d9c:	ac ad       	ldd	r26, Y+60	; 0x3c
    6d9e:	bd ad       	ldd	r27, Y+61	; 0x3d
    6da0:	bc 01       	movw	r22, r24
    6da2:	cd 01       	movw	r24, r26
    6da4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6da8:	9b 01       	movw	r18, r22
    6daa:	ac 01       	movw	r20, r24
    6dac:	69 89       	ldd	r22, Y+17	; 0x11
    6dae:	7a 89       	ldd	r23, Y+18	; 0x12
    6db0:	8b 89       	ldd	r24, Y+19	; 0x13
    6db2:	9c 89       	ldd	r25, Y+20	; 0x14
    6db4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__addsf3>
    6db8:	dc 01       	movw	r26, r24
    6dba:	cb 01       	movw	r24, r22
    6dbc:	89 8b       	std	Y+17, r24	; 0x11
    6dbe:	9a 8b       	std	Y+18, r25	; 0x12
    6dc0:	ab 8b       	std	Y+19, r26	; 0x13
    6dc2:	bc 8b       	std	Y+20, r27	; 0x14
    6dc4:	27 ce       	rjmp	.-946    	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>

			}
			else if((Local_u8KeypadValue == CALCULATOR_SUBTRACTION) && (Local_bOperatorFlag == true)){
    6dc6:	88 8d       	ldd	r24, Y+24	; 0x18
    6dc8:	8d 32       	cpi	r24, 0x2D	; 45
    6dca:	09 f0       	breq	.+2      	; 0x6dce <Calculator_enuPowerCalculator+0x3f8>
    6dcc:	4a c0       	rjmp	.+148    	; 0x6e62 <Calculator_enuPowerCalculator+0x48c>
    6dce:	8d 89       	ldd	r24, Y+21	; 0x15
    6dd0:	81 30       	cpi	r24, 0x01	; 1
    6dd2:	09 f0       	breq	.+2      	; 0x6dd6 <Calculator_enuPowerCalculator+0x400>
    6dd4:	46 c0       	rjmp	.+140    	; 0x6e62 <Calculator_enuPowerCalculator+0x48c>

				enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6dd6:	ce 01       	movw	r24, r28
    6dd8:	49 96       	adiw	r24, 0x19	; 25
    6dda:	9e 01       	movw	r18, r28
    6ddc:	26 5c       	subi	r18, 0xC6	; 198
    6dde:	3f 4f       	sbci	r19, 0xFF	; 255
    6de0:	b9 01       	movw	r22, r18
    6de2:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>
				if(Local_f32OperationResult == 0 ){
    6de6:	69 89       	ldd	r22, Y+17	; 0x11
    6de8:	7a 89       	ldd	r23, Y+18	; 0x12
    6dea:	8b 89       	ldd	r24, Y+19	; 0x13
    6dec:	9c 89       	ldd	r25, Y+20	; 0x14
    6dee:	20 e0       	ldi	r18, 0x00	; 0
    6df0:	30 e0       	ldi	r19, 0x00	; 0
    6df2:	40 e0       	ldi	r20, 0x00	; 0
    6df4:	50 e0       	ldi	r21, 0x00	; 0
    6df6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__eqsf2>
    6dfa:	88 23       	and	r24, r24
    6dfc:	91 f4       	brne	.+36     	; 0x6e22 <Calculator_enuPowerCalculator+0x44c>

					Local_f32OperationResult = Local_s32EnteredOperand;
    6dfe:	8a ad       	ldd	r24, Y+58	; 0x3a
    6e00:	9b ad       	ldd	r25, Y+59	; 0x3b
    6e02:	ac ad       	ldd	r26, Y+60	; 0x3c
    6e04:	bd ad       	ldd	r27, Y+61	; 0x3d
    6e06:	bc 01       	movw	r22, r24
    6e08:	cd 01       	movw	r24, r26
    6e0a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6e0e:	dc 01       	movw	r26, r24
    6e10:	cb 01       	movw	r24, r22
    6e12:	89 8b       	std	Y+17, r24	; 0x11
    6e14:	9a 8b       	std	Y+18, r25	; 0x12
    6e16:	ab 8b       	std	Y+19, r26	; 0x13
    6e18:	bc 8b       	std	Y+20, r27	; 0x14
					Local_s32EnteredOperand = 0;
    6e1a:	1a ae       	std	Y+58, r1	; 0x3a
    6e1c:	1b ae       	std	Y+59, r1	; 0x3b
    6e1e:	1c ae       	std	Y+60, r1	; 0x3c
    6e20:	1d ae       	std	Y+61, r1	; 0x3d
				}
				Lcd_enuSendData(Local_u8KeypadValue);
    6e22:	88 8d       	ldd	r24, Y+24	; 0x18
    6e24:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

				Local_u8Operator = CALCULATOR_SUBTRACTION;
    6e28:	8d e2       	ldi	r24, 0x2D	; 45
    6e2a:	88 8b       	std	Y+16, r24	; 0x10
				Local_bFillNextOperand = true;
    6e2c:	81 e0       	ldi	r24, 0x01	; 1
    6e2e:	8e 8b       	std	Y+22, r24	; 0x16
				Local_bOperatorFlag = false;
    6e30:	1d 8a       	std	Y+21, r1	; 0x15
				Local_u8Iter = 0;
    6e32:	1f 86       	std	Y+15, r1	; 0x0f

				Local_f32OperationResult = Local_f32OperationResult - Local_s32EnteredOperand;
    6e34:	8a ad       	ldd	r24, Y+58	; 0x3a
    6e36:	9b ad       	ldd	r25, Y+59	; 0x3b
    6e38:	ac ad       	ldd	r26, Y+60	; 0x3c
    6e3a:	bd ad       	ldd	r27, Y+61	; 0x3d
    6e3c:	bc 01       	movw	r22, r24
    6e3e:	cd 01       	movw	r24, r26
    6e40:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6e44:	9b 01       	movw	r18, r22
    6e46:	ac 01       	movw	r20, r24
    6e48:	69 89       	ldd	r22, Y+17	; 0x11
    6e4a:	7a 89       	ldd	r23, Y+18	; 0x12
    6e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    6e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    6e50:	0e 94 3b 03 	call	0x676	; 0x676 <__subsf3>
    6e54:	dc 01       	movw	r26, r24
    6e56:	cb 01       	movw	r24, r22
    6e58:	89 8b       	std	Y+17, r24	; 0x11
    6e5a:	9a 8b       	std	Y+18, r25	; 0x12
    6e5c:	ab 8b       	std	Y+19, r26	; 0x13
    6e5e:	bc 8b       	std	Y+20, r27	; 0x14
    6e60:	d9 cd       	rjmp	.-1102   	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>

			}
			else if((Local_u8KeypadValue == CALCULATOR_MULTIPLICATION) && (Local_bOperatorFlag == true)){
    6e62:	88 8d       	ldd	r24, Y+24	; 0x18
    6e64:	8a 32       	cpi	r24, 0x2A	; 42
    6e66:	09 f0       	breq	.+2      	; 0x6e6a <Calculator_enuPowerCalculator+0x494>
    6e68:	3f c0       	rjmp	.+126    	; 0x6ee8 <Calculator_enuPowerCalculator+0x512>
    6e6a:	8d 89       	ldd	r24, Y+21	; 0x15
    6e6c:	81 30       	cpi	r24, 0x01	; 1
    6e6e:	e1 f5       	brne	.+120    	; 0x6ee8 <Calculator_enuPowerCalculator+0x512>

				if(Local_f32OperationResult == 0){
    6e70:	69 89       	ldd	r22, Y+17	; 0x11
    6e72:	7a 89       	ldd	r23, Y+18	; 0x12
    6e74:	8b 89       	ldd	r24, Y+19	; 0x13
    6e76:	9c 89       	ldd	r25, Y+20	; 0x14
    6e78:	20 e0       	ldi	r18, 0x00	; 0
    6e7a:	30 e0       	ldi	r19, 0x00	; 0
    6e7c:	40 e0       	ldi	r20, 0x00	; 0
    6e7e:	50 e0       	ldi	r21, 0x00	; 0
    6e80:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__eqsf2>
    6e84:	88 23       	and	r24, r24
    6e86:	41 f4       	brne	.+16     	; 0x6e98 <Calculator_enuPowerCalculator+0x4c2>

					Local_f32OperationResult = 1;
    6e88:	80 e0       	ldi	r24, 0x00	; 0
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	a0 e8       	ldi	r26, 0x80	; 128
    6e8e:	bf e3       	ldi	r27, 0x3F	; 63
    6e90:	89 8b       	std	Y+17, r24	; 0x11
    6e92:	9a 8b       	std	Y+18, r25	; 0x12
    6e94:	ab 8b       	std	Y+19, r26	; 0x13
    6e96:	bc 8b       	std	Y+20, r27	; 0x14
				}
				Lcd_enuSendData(Local_u8KeypadValue);
    6e98:	88 8d       	ldd	r24, Y+24	; 0x18
    6e9a:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

				Local_u8Operator = CALCULATOR_MULTIPLICATION;
    6e9e:	8a e2       	ldi	r24, 0x2A	; 42
    6ea0:	88 8b       	std	Y+16, r24	; 0x10
				Local_bFillNextOperand = true;
    6ea2:	81 e0       	ldi	r24, 0x01	; 1
    6ea4:	8e 8b       	std	Y+22, r24	; 0x16
				Local_bOperatorFlag = false;
    6ea6:	1d 8a       	std	Y+21, r1	; 0x15
				Local_u8Iter = 0;
    6ea8:	1f 86       	std	Y+15, r1	; 0x0f

				enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6eaa:	ce 01       	movw	r24, r28
    6eac:	49 96       	adiw	r24, 0x19	; 25
    6eae:	9e 01       	movw	r18, r28
    6eb0:	26 5c       	subi	r18, 0xC6	; 198
    6eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    6eb4:	b9 01       	movw	r22, r18
    6eb6:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>
				Local_f32OperationResult = Local_f32OperationResult * Local_s32EnteredOperand;
    6eba:	8a ad       	ldd	r24, Y+58	; 0x3a
    6ebc:	9b ad       	ldd	r25, Y+59	; 0x3b
    6ebe:	ac ad       	ldd	r26, Y+60	; 0x3c
    6ec0:	bd ad       	ldd	r27, Y+61	; 0x3d
    6ec2:	bc 01       	movw	r22, r24
    6ec4:	cd 01       	movw	r24, r26
    6ec6:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6eca:	9b 01       	movw	r18, r22
    6ecc:	ac 01       	movw	r20, r24
    6ece:	69 89       	ldd	r22, Y+17	; 0x11
    6ed0:	7a 89       	ldd	r23, Y+18	; 0x12
    6ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    6ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    6ed6:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    6eda:	dc 01       	movw	r26, r24
    6edc:	cb 01       	movw	r24, r22
    6ede:	89 8b       	std	Y+17, r24	; 0x11
    6ee0:	9a 8b       	std	Y+18, r25	; 0x12
    6ee2:	ab 8b       	std	Y+19, r26	; 0x13
    6ee4:	bc 8b       	std	Y+20, r27	; 0x14
    6ee6:	96 cd       	rjmp	.-1236   	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>
			}
			else if((Local_u8KeypadValue == CALCULATOR_DEVISION) && (Local_bOperatorFlag == true)){
    6ee8:	88 8d       	ldd	r24, Y+24	; 0x18
    6eea:	8f 32       	cpi	r24, 0x2F	; 47
    6eec:	09 f0       	breq	.+2      	; 0x6ef0 <Calculator_enuPowerCalculator+0x51a>
    6eee:	92 cd       	rjmp	.-1244   	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>
    6ef0:	8d 89       	ldd	r24, Y+21	; 0x15
    6ef2:	81 30       	cpi	r24, 0x01	; 1
    6ef4:	09 f0       	breq	.+2      	; 0x6ef8 <Calculator_enuPowerCalculator+0x522>
    6ef6:	8e cd       	rjmp	.-1252   	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>

				enuArraytoInteger(Local_au8EnteredOperand,&Local_s32EnteredOperand);
    6ef8:	ce 01       	movw	r24, r28
    6efa:	49 96       	adiw	r24, 0x19	; 25
    6efc:	9e 01       	movw	r18, r28
    6efe:	26 5c       	subi	r18, 0xC6	; 198
    6f00:	3f 4f       	sbci	r19, 0xFF	; 255
    6f02:	b9 01       	movw	r22, r18
    6f04:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <enuArraytoInteger>

				if(Local_f32OperationResult == 0){
    6f08:	69 89       	ldd	r22, Y+17	; 0x11
    6f0a:	7a 89       	ldd	r23, Y+18	; 0x12
    6f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    6f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    6f10:	20 e0       	ldi	r18, 0x00	; 0
    6f12:	30 e0       	ldi	r19, 0x00	; 0
    6f14:	40 e0       	ldi	r20, 0x00	; 0
    6f16:	50 e0       	ldi	r21, 0x00	; 0
    6f18:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__eqsf2>
    6f1c:	88 23       	and	r24, r24
    6f1e:	b1 f4       	brne	.+44     	; 0x6f4c <Calculator_enuPowerCalculator+0x576>

					Local_f32OperationResult = Local_s32EnteredOperand;
    6f20:	8a ad       	ldd	r24, Y+58	; 0x3a
    6f22:	9b ad       	ldd	r25, Y+59	; 0x3b
    6f24:	ac ad       	ldd	r26, Y+60	; 0x3c
    6f26:	bd ad       	ldd	r27, Y+61	; 0x3d
    6f28:	bc 01       	movw	r22, r24
    6f2a:	cd 01       	movw	r24, r26
    6f2c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6f30:	dc 01       	movw	r26, r24
    6f32:	cb 01       	movw	r24, r22
    6f34:	89 8b       	std	Y+17, r24	; 0x11
    6f36:	9a 8b       	std	Y+18, r25	; 0x12
    6f38:	ab 8b       	std	Y+19, r26	; 0x13
    6f3a:	bc 8b       	std	Y+20, r27	; 0x14
					Local_s32EnteredOperand = 1;
    6f3c:	81 e0       	ldi	r24, 0x01	; 1
    6f3e:	90 e0       	ldi	r25, 0x00	; 0
    6f40:	a0 e0       	ldi	r26, 0x00	; 0
    6f42:	b0 e0       	ldi	r27, 0x00	; 0
    6f44:	8a af       	std	Y+58, r24	; 0x3a
    6f46:	9b af       	std	Y+59, r25	; 0x3b
    6f48:	ac af       	std	Y+60, r26	; 0x3c
    6f4a:	bd af       	std	Y+61, r27	; 0x3d
				}

				Lcd_enuSendData(Local_u8KeypadValue);
    6f4c:	88 8d       	ldd	r24, Y+24	; 0x18
    6f4e:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

				Local_u8Operator = CALCULATOR_DEVISION;
    6f52:	8f e2       	ldi	r24, 0x2F	; 47
    6f54:	88 8b       	std	Y+16, r24	; 0x10
				Local_bFillNextOperand = true;
    6f56:	81 e0       	ldi	r24, 0x01	; 1
    6f58:	8e 8b       	std	Y+22, r24	; 0x16
				Local_bOperatorFlag = false;
    6f5a:	1d 8a       	std	Y+21, r1	; 0x15
				Local_u8Iter = 0;
    6f5c:	1f 86       	std	Y+15, r1	; 0x0f

				Local_f32OperationResult = Local_f32OperationResult / Local_s32EnteredOperand;
    6f5e:	8a ad       	ldd	r24, Y+58	; 0x3a
    6f60:	9b ad       	ldd	r25, Y+59	; 0x3b
    6f62:	ac ad       	ldd	r26, Y+60	; 0x3c
    6f64:	bd ad       	ldd	r27, Y+61	; 0x3d
    6f66:	bc 01       	movw	r22, r24
    6f68:	cd 01       	movw	r24, r26
    6f6a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatsisf>
    6f6e:	9b 01       	movw	r18, r22
    6f70:	ac 01       	movw	r20, r24
    6f72:	69 89       	ldd	r22, Y+17	; 0x11
    6f74:	7a 89       	ldd	r23, Y+18	; 0x12
    6f76:	8b 89       	ldd	r24, Y+19	; 0x13
    6f78:	9c 89       	ldd	r25, Y+20	; 0x14
    6f7a:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
    6f7e:	dc 01       	movw	r26, r24
    6f80:	cb 01       	movw	r24, r22
    6f82:	89 8b       	std	Y+17, r24	; 0x11
    6f84:	9a 8b       	std	Y+18, r25	; 0x12
    6f86:	ab 8b       	std	Y+19, r26	; 0x13
    6f88:	bc 8b       	std	Y+20, r27	; 0x14
    6f8a:	44 cd       	rjmp	.-1400   	; 0x6a14 <Calculator_enuPowerCalculator+0x3e>

00006f8c <enuArraytoInteger>:

	return Local_enuErrorState;

}

ES_t enuArraytoInteger(const s8 * Copy_ps8String,s32 * Copy_s32IntValue){
    6f8c:	df 93       	push	r29
    6f8e:	cf 93       	push	r28
    6f90:	cd b7       	in	r28, 0x3d	; 61
    6f92:	de b7       	in	r29, 0x3e	; 62
    6f94:	2c 97       	sbiw	r28, 0x0c	; 12
    6f96:	0f b6       	in	r0, 0x3f	; 63
    6f98:	f8 94       	cli
    6f9a:	de bf       	out	0x3e, r29	; 62
    6f9c:	0f be       	out	0x3f, r0	; 63
    6f9e:	cd bf       	out	0x3d, r28	; 61
    6fa0:	9a 87       	std	Y+10, r25	; 0x0a
    6fa2:	89 87       	std	Y+9, r24	; 0x09
    6fa4:	7c 87       	std	Y+12, r23	; 0x0c
    6fa6:	6b 87       	std	Y+11, r22	; 0x0b

	ES_t Local_enuErrorState = ES_NOK;
    6fa8:	81 e0       	ldi	r24, 0x01	; 1
    6faa:	88 87       	std	Y+8, r24	; 0x08

	u8 Local_u8StringIter = 0;
    6fac:	1f 82       	std	Y+7, r1	; 0x07
	s16 Local_s8IntSign = 0;
    6fae:	1e 82       	std	Y+6, r1	; 0x06
    6fb0:	1d 82       	std	Y+5, r1	; 0x05
	s32 Local_s32OperationResult = 0;
    6fb2:	19 82       	std	Y+1, r1	; 0x01
    6fb4:	1a 82       	std	Y+2, r1	; 0x02
    6fb6:	1b 82       	std	Y+3, r1	; 0x03
    6fb8:	1c 82       	std	Y+4, r1	; 0x04

	if((Copy_ps8String != NULL) && (Copy_s32IntValue != NULL)){
    6fba:	89 85       	ldd	r24, Y+9	; 0x09
    6fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fbe:	00 97       	sbiw	r24, 0x00	; 0
    6fc0:	09 f4       	brne	.+2      	; 0x6fc4 <enuArraytoInteger+0x38>
    6fc2:	7c c0       	rjmp	.+248    	; 0x70bc <enuArraytoInteger+0x130>
    6fc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    6fc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    6fc8:	00 97       	sbiw	r24, 0x00	; 0
    6fca:	09 f4       	brne	.+2      	; 0x6fce <enuArraytoInteger+0x42>
    6fcc:	77 c0       	rjmp	.+238    	; 0x70bc <enuArraytoInteger+0x130>

		if(Copy_ps8String[Local_u8StringIter] == '-'){
    6fce:	8f 81       	ldd	r24, Y+7	; 0x07
    6fd0:	28 2f       	mov	r18, r24
    6fd2:	30 e0       	ldi	r19, 0x00	; 0
    6fd4:	89 85       	ldd	r24, Y+9	; 0x09
    6fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fd8:	fc 01       	movw	r30, r24
    6fda:	e2 0f       	add	r30, r18
    6fdc:	f3 1f       	adc	r31, r19
    6fde:	80 81       	ld	r24, Z
    6fe0:	8d 32       	cpi	r24, 0x2D	; 45
    6fe2:	41 f4       	brne	.+16     	; 0x6ff4 <enuArraytoInteger+0x68>

			Local_s8IntSign  = -1;
    6fe4:	8f ef       	ldi	r24, 0xFF	; 255
    6fe6:	9f ef       	ldi	r25, 0xFF	; 255
    6fe8:	9e 83       	std	Y+6, r25	; 0x06
    6fea:	8d 83       	std	Y+5, r24	; 0x05
			Local_u8StringIter++;
    6fec:	8f 81       	ldd	r24, Y+7	; 0x07
    6fee:	8f 5f       	subi	r24, 0xFF	; 255
    6ff0:	8f 83       	std	Y+7, r24	; 0x07
    6ff2:	42 c0       	rjmp	.+132    	; 0x7078 <enuArraytoInteger+0xec>
		}
		else if(Copy_ps8String[Local_u8StringIter] == '+'){
    6ff4:	8f 81       	ldd	r24, Y+7	; 0x07
    6ff6:	28 2f       	mov	r18, r24
    6ff8:	30 e0       	ldi	r19, 0x00	; 0
    6ffa:	89 85       	ldd	r24, Y+9	; 0x09
    6ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ffe:	fc 01       	movw	r30, r24
    7000:	e2 0f       	add	r30, r18
    7002:	f3 1f       	adc	r31, r19
    7004:	80 81       	ld	r24, Z
    7006:	8b 32       	cpi	r24, 0x2B	; 43
    7008:	41 f4       	brne	.+16     	; 0x701a <enuArraytoInteger+0x8e>

			Local_s8IntSign = 1;
    700a:	81 e0       	ldi	r24, 0x01	; 1
    700c:	90 e0       	ldi	r25, 0x00	; 0
    700e:	9e 83       	std	Y+6, r25	; 0x06
    7010:	8d 83       	std	Y+5, r24	; 0x05
			Local_u8StringIter++;
    7012:	8f 81       	ldd	r24, Y+7	; 0x07
    7014:	8f 5f       	subi	r24, 0xFF	; 255
    7016:	8f 83       	std	Y+7, r24	; 0x07
    7018:	2f c0       	rjmp	.+94     	; 0x7078 <enuArraytoInteger+0xec>
		}
		else{

			Local_s8IntSign = 1;
    701a:	81 e0       	ldi	r24, 0x01	; 1
    701c:	90 e0       	ldi	r25, 0x00	; 0
    701e:	9e 83       	std	Y+6, r25	; 0x06
    7020:	8d 83       	std	Y+5, r24	; 0x05
    7022:	2a c0       	rjmp	.+84     	; 0x7078 <enuArraytoInteger+0xec>
		}

		while(Copy_ps8String[Local_u8StringIter] != '\0'){

			Local_s32OperationResult = Local_s32OperationResult * 10 + (Copy_ps8String[Local_u8StringIter] - '0');
    7024:	89 81       	ldd	r24, Y+1	; 0x01
    7026:	9a 81       	ldd	r25, Y+2	; 0x02
    7028:	ab 81       	ldd	r26, Y+3	; 0x03
    702a:	bc 81       	ldd	r27, Y+4	; 0x04
    702c:	2a e0       	ldi	r18, 0x0A	; 10
    702e:	30 e0       	ldi	r19, 0x00	; 0
    7030:	40 e0       	ldi	r20, 0x00	; 0
    7032:	50 e0       	ldi	r21, 0x00	; 0
    7034:	bc 01       	movw	r22, r24
    7036:	cd 01       	movw	r24, r26
    7038:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
    703c:	ab 01       	movw	r20, r22
    703e:	bc 01       	movw	r22, r24
    7040:	8f 81       	ldd	r24, Y+7	; 0x07
    7042:	28 2f       	mov	r18, r24
    7044:	30 e0       	ldi	r19, 0x00	; 0
    7046:	89 85       	ldd	r24, Y+9	; 0x09
    7048:	9a 85       	ldd	r25, Y+10	; 0x0a
    704a:	fc 01       	movw	r30, r24
    704c:	e2 0f       	add	r30, r18
    704e:	f3 1f       	adc	r31, r19
    7050:	80 81       	ld	r24, Z
    7052:	99 27       	eor	r25, r25
    7054:	87 fd       	sbrc	r24, 7
    7056:	90 95       	com	r25
    7058:	c0 97       	sbiw	r24, 0x30	; 48
    705a:	aa 27       	eor	r26, r26
    705c:	97 fd       	sbrc	r25, 7
    705e:	a0 95       	com	r26
    7060:	ba 2f       	mov	r27, r26
    7062:	84 0f       	add	r24, r20
    7064:	95 1f       	adc	r25, r21
    7066:	a6 1f       	adc	r26, r22
    7068:	b7 1f       	adc	r27, r23
    706a:	89 83       	std	Y+1, r24	; 0x01
    706c:	9a 83       	std	Y+2, r25	; 0x02
    706e:	ab 83       	std	Y+3, r26	; 0x03
    7070:	bc 83       	std	Y+4, r27	; 0x04
			Local_u8StringIter++;
    7072:	8f 81       	ldd	r24, Y+7	; 0x07
    7074:	8f 5f       	subi	r24, 0xFF	; 255
    7076:	8f 83       	std	Y+7, r24	; 0x07
		else{

			Local_s8IntSign = 1;
		}

		while(Copy_ps8String[Local_u8StringIter] != '\0'){
    7078:	8f 81       	ldd	r24, Y+7	; 0x07
    707a:	28 2f       	mov	r18, r24
    707c:	30 e0       	ldi	r19, 0x00	; 0
    707e:	89 85       	ldd	r24, Y+9	; 0x09
    7080:	9a 85       	ldd	r25, Y+10	; 0x0a
    7082:	fc 01       	movw	r30, r24
    7084:	e2 0f       	add	r30, r18
    7086:	f3 1f       	adc	r31, r19
    7088:	80 81       	ld	r24, Z
    708a:	88 23       	and	r24, r24
    708c:	59 f6       	brne	.-106    	; 0x7024 <enuArraytoInteger+0x98>
			Local_s32OperationResult = Local_s32OperationResult * 10 + (Copy_ps8String[Local_u8StringIter] - '0');
			Local_u8StringIter++;

		}

		*Copy_s32IntValue = Local_s32OperationResult * Local_s8IntSign;
    708e:	8d 81       	ldd	r24, Y+5	; 0x05
    7090:	9e 81       	ldd	r25, Y+6	; 0x06
    7092:	aa 27       	eor	r26, r26
    7094:	97 fd       	sbrc	r25, 7
    7096:	a0 95       	com	r26
    7098:	ba 2f       	mov	r27, r26
    709a:	29 81       	ldd	r18, Y+1	; 0x01
    709c:	3a 81       	ldd	r19, Y+2	; 0x02
    709e:	4b 81       	ldd	r20, Y+3	; 0x03
    70a0:	5c 81       	ldd	r21, Y+4	; 0x04
    70a2:	bc 01       	movw	r22, r24
    70a4:	cd 01       	movw	r24, r26
    70a6:	0e 94 cd 3a 	call	0x759a	; 0x759a <__mulsi3>
    70aa:	dc 01       	movw	r26, r24
    70ac:	cb 01       	movw	r24, r22
    70ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    70b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    70b2:	80 83       	st	Z, r24
    70b4:	91 83       	std	Z+1, r25	; 0x01
    70b6:	a2 83       	std	Z+2, r26	; 0x02
    70b8:	b3 83       	std	Z+3, r27	; 0x03
    70ba:	02 c0       	rjmp	.+4      	; 0x70c0 <enuArraytoInteger+0x134>
	}
	else{

		Local_enuErrorState = ES_NULL_POINTER;
    70bc:	83 e0       	ldi	r24, 0x03	; 3
    70be:	88 87       	std	Y+8, r24	; 0x08
	}


	return Local_enuErrorState;
    70c0:	88 85       	ldd	r24, Y+8	; 0x08
}
    70c2:	2c 96       	adiw	r28, 0x0c	; 12
    70c4:	0f b6       	in	r0, 0x3f	; 63
    70c6:	f8 94       	cli
    70c8:	de bf       	out	0x3e, r29	; 62
    70ca:	0f be       	out	0x3f, r0	; 63
    70cc:	cd bf       	out	0x3d, r28	; 61
    70ce:	cf 91       	pop	r28
    70d0:	df 91       	pop	r29
    70d2:	08 95       	ret

000070d4 <Animation_enuInit>:
#include "../../HAL/Lcd/Lcd_int.h"
#include "../../HAL/Buzzer/Buzzer_int.h"

#include "Animation_priv.h"

ES_t Animation_enuInit(void){
    70d4:	ef 92       	push	r14
    70d6:	0f 93       	push	r16
    70d8:	df 93       	push	r29
    70da:	cf 93       	push	r28
    70dc:	cd b7       	in	r28, 0x3d	; 61
    70de:	de b7       	in	r29, 0x3e	; 62
    70e0:	e5 97       	sbiw	r28, 0x35	; 53
    70e2:	0f b6       	in	r0, 0x3f	; 63
    70e4:	f8 94       	cli
    70e6:	de bf       	out	0x3e, r29	; 62
    70e8:	0f be       	out	0x3f, r0	; 63
    70ea:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState = ES_NOK;
    70ec:	81 e0       	ldi	r24, 0x01	; 1
    70ee:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = Lcd_enuInit();
    70f0:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <Lcd_enuInit>
    70f4:	89 83       	std	Y+1, r24	; 0x01
	Buzzer_enuInit();
    70f6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <Buzzer_enuInit>

	u8 Local_au8AlivePerson[] = ANIMATION_SHOOTER;
    70fa:	ce 01       	movw	r24, r28
    70fc:	02 96       	adiw	r24, 0x02	; 2
    70fe:	9b a3       	std	Y+35, r25	; 0x23
    7100:	8a a3       	std	Y+34, r24	; 0x22
    7102:	ed e1       	ldi	r30, 0x1D	; 29
    7104:	f3 e0       	ldi	r31, 0x03	; 3
    7106:	fd a3       	std	Y+37, r31	; 0x25
    7108:	ec a3       	std	Y+36, r30	; 0x24
    710a:	f8 e0       	ldi	r31, 0x08	; 8
    710c:	fe a3       	std	Y+38, r31	; 0x26
    710e:	ec a1       	ldd	r30, Y+36	; 0x24
    7110:	fd a1       	ldd	r31, Y+37	; 0x25
    7112:	00 80       	ld	r0, Z
    7114:	8c a1       	ldd	r24, Y+36	; 0x24
    7116:	9d a1       	ldd	r25, Y+37	; 0x25
    7118:	01 96       	adiw	r24, 0x01	; 1
    711a:	9d a3       	std	Y+37, r25	; 0x25
    711c:	8c a3       	std	Y+36, r24	; 0x24
    711e:	ea a1       	ldd	r30, Y+34	; 0x22
    7120:	fb a1       	ldd	r31, Y+35	; 0x23
    7122:	00 82       	st	Z, r0
    7124:	8a a1       	ldd	r24, Y+34	; 0x22
    7126:	9b a1       	ldd	r25, Y+35	; 0x23
    7128:	01 96       	adiw	r24, 0x01	; 1
    712a:	9b a3       	std	Y+35, r25	; 0x23
    712c:	8a a3       	std	Y+34, r24	; 0x22
    712e:	9e a1       	ldd	r25, Y+38	; 0x26
    7130:	91 50       	subi	r25, 0x01	; 1
    7132:	9e a3       	std	Y+38, r25	; 0x26
    7134:	ee a1       	ldd	r30, Y+38	; 0x26
    7136:	ee 23       	and	r30, r30
    7138:	51 f7       	brne	.-44     	; 0x710e <Animation_enuInit+0x3a>
	u8 Local_au8DeadPerson[] = ANIMATIN_VICTIM;
    713a:	ce 01       	movw	r24, r28
    713c:	0a 96       	adiw	r24, 0x0a	; 10
    713e:	98 a7       	std	Y+40, r25	; 0x28
    7140:	8f a3       	std	Y+39, r24	; 0x27
    7142:	e5 e1       	ldi	r30, 0x15	; 21
    7144:	f3 e0       	ldi	r31, 0x03	; 3
    7146:	fa a7       	std	Y+42, r31	; 0x2a
    7148:	e9 a7       	std	Y+41, r30	; 0x29
    714a:	f8 e0       	ldi	r31, 0x08	; 8
    714c:	fb a7       	std	Y+43, r31	; 0x2b
    714e:	e9 a5       	ldd	r30, Y+41	; 0x29
    7150:	fa a5       	ldd	r31, Y+42	; 0x2a
    7152:	00 80       	ld	r0, Z
    7154:	89 a5       	ldd	r24, Y+41	; 0x29
    7156:	9a a5       	ldd	r25, Y+42	; 0x2a
    7158:	01 96       	adiw	r24, 0x01	; 1
    715a:	9a a7       	std	Y+42, r25	; 0x2a
    715c:	89 a7       	std	Y+41, r24	; 0x29
    715e:	ef a1       	ldd	r30, Y+39	; 0x27
    7160:	f8 a5       	ldd	r31, Y+40	; 0x28
    7162:	00 82       	st	Z, r0
    7164:	8f a1       	ldd	r24, Y+39	; 0x27
    7166:	98 a5       	ldd	r25, Y+40	; 0x28
    7168:	01 96       	adiw	r24, 0x01	; 1
    716a:	98 a7       	std	Y+40, r25	; 0x28
    716c:	8f a3       	std	Y+39, r24	; 0x27
    716e:	9b a5       	ldd	r25, Y+43	; 0x2b
    7170:	91 50       	subi	r25, 0x01	; 1
    7172:	9b a7       	std	Y+43, r25	; 0x2b
    7174:	eb a5       	ldd	r30, Y+43	; 0x2b
    7176:	ee 23       	and	r30, r30
    7178:	51 f7       	brne	.-44     	; 0x714e <Animation_enuInit+0x7a>
	u8 Local_au8Gun[] = ANIMATION_PISTOL;
    717a:	ce 01       	movw	r24, r28
    717c:	42 96       	adiw	r24, 0x12	; 18
    717e:	9d a7       	std	Y+45, r25	; 0x2d
    7180:	8c a7       	std	Y+44, r24	; 0x2c
    7182:	ed e0       	ldi	r30, 0x0D	; 13
    7184:	f3 e0       	ldi	r31, 0x03	; 3
    7186:	ff a7       	std	Y+47, r31	; 0x2f
    7188:	ee a7       	std	Y+46, r30	; 0x2e
    718a:	f8 e0       	ldi	r31, 0x08	; 8
    718c:	f8 ab       	std	Y+48, r31	; 0x30
    718e:	ee a5       	ldd	r30, Y+46	; 0x2e
    7190:	ff a5       	ldd	r31, Y+47	; 0x2f
    7192:	00 80       	ld	r0, Z
    7194:	8e a5       	ldd	r24, Y+46	; 0x2e
    7196:	9f a5       	ldd	r25, Y+47	; 0x2f
    7198:	01 96       	adiw	r24, 0x01	; 1
    719a:	9f a7       	std	Y+47, r25	; 0x2f
    719c:	8e a7       	std	Y+46, r24	; 0x2e
    719e:	ec a5       	ldd	r30, Y+44	; 0x2c
    71a0:	fd a5       	ldd	r31, Y+45	; 0x2d
    71a2:	00 82       	st	Z, r0
    71a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    71a6:	9d a5       	ldd	r25, Y+45	; 0x2d
    71a8:	01 96       	adiw	r24, 0x01	; 1
    71aa:	9d a7       	std	Y+45, r25	; 0x2d
    71ac:	8c a7       	std	Y+44, r24	; 0x2c
    71ae:	98 a9       	ldd	r25, Y+48	; 0x30
    71b0:	91 50       	subi	r25, 0x01	; 1
    71b2:	98 ab       	std	Y+48, r25	; 0x30
    71b4:	e8 a9       	ldd	r30, Y+48	; 0x30
    71b6:	ee 23       	and	r30, r30
    71b8:	51 f7       	brne	.-44     	; 0x718e <Animation_enuInit+0xba>
	u8 Local_u8Bullet[] = ANIMATION_BULLET;
    71ba:	ce 01       	movw	r24, r28
    71bc:	4a 96       	adiw	r24, 0x1a	; 26
    71be:	9a ab       	std	Y+50, r25	; 0x32
    71c0:	89 ab       	std	Y+49, r24	; 0x31
    71c2:	e5 e0       	ldi	r30, 0x05	; 5
    71c4:	f3 e0       	ldi	r31, 0x03	; 3
    71c6:	fc ab       	std	Y+52, r31	; 0x34
    71c8:	eb ab       	std	Y+51, r30	; 0x33
    71ca:	f8 e0       	ldi	r31, 0x08	; 8
    71cc:	fd ab       	std	Y+53, r31	; 0x35
    71ce:	eb a9       	ldd	r30, Y+51	; 0x33
    71d0:	fc a9       	ldd	r31, Y+52	; 0x34
    71d2:	00 80       	ld	r0, Z
    71d4:	8b a9       	ldd	r24, Y+51	; 0x33
    71d6:	9c a9       	ldd	r25, Y+52	; 0x34
    71d8:	01 96       	adiw	r24, 0x01	; 1
    71da:	9c ab       	std	Y+52, r25	; 0x34
    71dc:	8b ab       	std	Y+51, r24	; 0x33
    71de:	e9 a9       	ldd	r30, Y+49	; 0x31
    71e0:	fa a9       	ldd	r31, Y+50	; 0x32
    71e2:	00 82       	st	Z, r0
    71e4:	89 a9       	ldd	r24, Y+49	; 0x31
    71e6:	9a a9       	ldd	r25, Y+50	; 0x32
    71e8:	01 96       	adiw	r24, 0x01	; 1
    71ea:	9a ab       	std	Y+50, r25	; 0x32
    71ec:	89 ab       	std	Y+49, r24	; 0x31
    71ee:	9d a9       	ldd	r25, Y+53	; 0x35
    71f0:	91 50       	subi	r25, 0x01	; 1
    71f2:	9d ab       	std	Y+53, r25	; 0x35
    71f4:	ed a9       	ldd	r30, Y+53	; 0x35
    71f6:	ee 23       	and	r30, r30
    71f8:	51 f7       	brne	.-44     	; 0x71ce <Animation_enuInit+0xfa>

	Lcd_enuDrawSpecialChar(Local_au8AlivePerson,LCD_PATTERN_0,LCD_PATTERN_0_BASE_ADDRESS,
    71fa:	ce 01       	movw	r24, r28
    71fc:	02 96       	adiw	r24, 0x02	; 2
    71fe:	60 e0       	ldi	r22, 0x00	; 0
    7200:	40 e4       	ldi	r20, 0x40	; 64
    7202:	21 e0       	ldi	r18, 0x01	; 1
    7204:	01 e0       	ldi	r16, 0x01	; 1
    7206:	0f 2e       	mov	r0, r31
    7208:	f6 e0       	ldi	r31, 0x06	; 6
    720a:	ef 2e       	mov	r14, r31
    720c:	f0 2d       	mov	r31, r0
    720e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <Lcd_enuDrawSpecialChar>
			LCD_ROW_1,LCD_COLUMN_1,LCD_DISPLAY_LEFT);

	Lcd_enuDrawSpecialChar(Local_au8AlivePerson,LCD_PATTERN_1,LCD_PATTERN_1_BASE_ADDRESS,
    7212:	ce 01       	movw	r24, r28
    7214:	02 96       	adiw	r24, 0x02	; 2
    7216:	61 e0       	ldi	r22, 0x01	; 1
    7218:	48 e4       	ldi	r20, 0x48	; 72
    721a:	21 e0       	ldi	r18, 0x01	; 1
    721c:	00 e1       	ldi	r16, 0x10	; 16
    721e:	0f 2e       	mov	r0, r31
    7220:	f6 e0       	ldi	r31, 0x06	; 6
    7222:	ef 2e       	mov	r14, r31
    7224:	f0 2d       	mov	r31, r0
    7226:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <Lcd_enuDrawSpecialChar>
			LCD_ROW_1,LCD_COLUMN_16,LCD_DISPLAY_LEFT);

	Lcd_enuDrawSpecialChar(Local_au8Gun,LCD_PATTERN_2,LCD_PATTERN_2_BASE_ADDRESS,
    722a:	ce 01       	movw	r24, r28
    722c:	42 96       	adiw	r24, 0x12	; 18
    722e:	62 e0       	ldi	r22, 0x02	; 2
    7230:	40 e5       	ldi	r20, 0x50	; 80
    7232:	21 e0       	ldi	r18, 0x01	; 1
    7234:	02 e0       	ldi	r16, 0x02	; 2
    7236:	0f 2e       	mov	r0, r31
    7238:	f6 e0       	ldi	r31, 0x06	; 6
    723a:	ef 2e       	mov	r14, r31
    723c:	f0 2d       	mov	r31, r0
    723e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <Lcd_enuDrawSpecialChar>
			LCD_ROW_1,LCD_COLUMN_2,LCD_DISPLAY_LEFT);

	Lcd_enuDrawSpecialChar(Local_u8Bullet,LCD_PATTERN_3,LCD_PATTERN_3_BASE_ADDRESS,
    7242:	ce 01       	movw	r24, r28
    7244:	4a 96       	adiw	r24, 0x1a	; 26
    7246:	63 e0       	ldi	r22, 0x03	; 3
    7248:	48 e5       	ldi	r20, 0x58	; 88
    724a:	21 e0       	ldi	r18, 0x01	; 1
    724c:	03 e0       	ldi	r16, 0x03	; 3
    724e:	0f 2e       	mov	r0, r31
    7250:	f6 e0       	ldi	r31, 0x06	; 6
    7252:	ef 2e       	mov	r14, r31
    7254:	f0 2d       	mov	r31, r0
    7256:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <Lcd_enuDrawSpecialChar>
			LCD_ROW_1,LCD_COLUMN_3,LCD_DISPLAY_LEFT);

	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_1);
    725a:	81 e0       	ldi	r24, 0x01	; 1
    725c:	61 e0       	ldi	r22, 0x01	; 1
    725e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendData(LCD_PATTERN_0);
    7262:	80 e0       	ldi	r24, 0x00	; 0
    7264:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_16);
    7268:	81 e0       	ldi	r24, 0x01	; 1
    726a:	60 e1       	ldi	r22, 0x10	; 16
    726c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendData(LCD_PATTERN_1);
    7270:	81 e0       	ldi	r24, 0x01	; 1
    7272:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_2);
    7276:	81 e0       	ldi	r24, 0x01	; 1
    7278:	62 e0       	ldi	r22, 0x02	; 2
    727a:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendData(LCD_PATTERN_2);
    727e:	82 e0       	ldi	r24, 0x02	; 2
    7280:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

	Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_3);
    7284:	81 e0       	ldi	r24, 0x01	; 1
    7286:	63 e0       	ldi	r22, 0x03	; 3
    7288:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
	Lcd_enuSendData(LCD_PATTERN_3);
    728c:	83 e0       	ldi	r24, 0x03	; 3
    728e:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

	Lcd_enuSendCommand(LCD_CURSOR_OFF);
    7292:	8c e0       	ldi	r24, 0x0C	; 12
    7294:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>


	return Local_enuErrorState;
    7298:	89 81       	ldd	r24, Y+1	; 0x01
}
    729a:	e5 96       	adiw	r28, 0x35	; 53
    729c:	0f b6       	in	r0, 0x3f	; 63
    729e:	f8 94       	cli
    72a0:	de bf       	out	0x3e, r29	; 62
    72a2:	0f be       	out	0x3f, r0	; 63
    72a4:	cd bf       	out	0x3d, r28	; 61
    72a6:	cf 91       	pop	r28
    72a8:	df 91       	pop	r29
    72aa:	0f 91       	pop	r16
    72ac:	ef 90       	pop	r14
    72ae:	08 95       	ret

000072b0 <Animation_enuBeginAnimat>:

ES_t Animation_enuBeginAnimat(void){
    72b0:	df 93       	push	r29
    72b2:	cf 93       	push	r28
    72b4:	cd b7       	in	r28, 0x3d	; 61
    72b6:	de b7       	in	r29, 0x3e	; 62
    72b8:	6e 97       	sbiw	r28, 0x1e	; 30
    72ba:	0f b6       	in	r0, 0x3f	; 63
    72bc:	f8 94       	cli
    72be:	de bf       	out	0x3e, r29	; 62
    72c0:	0f be       	out	0x3f, r0	; 63
    72c2:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState = ES_NOK;
    72c4:	81 e0       	ldi	r24, 0x01	; 1
    72c6:	8e 8f       	std	Y+30, r24	; 0x1e


	u8 Local_u8Iter;

	for(Local_u8Iter = 4 ; Local_u8Iter < 16 ; Local_u8Iter++){
    72c8:	84 e0       	ldi	r24, 0x04	; 4
    72ca:	8d 8f       	std	Y+29, r24	; 0x1d
    72cc:	13 c1       	rjmp	.+550    	; 0x74f4 <Animation_enuBeginAnimat+0x244>

		Lcd_enuSetCursor(LCD_ROW_1 , Local_u8Iter-1);
    72ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    72d0:	98 2f       	mov	r25, r24
    72d2:	91 50       	subi	r25, 0x01	; 1
    72d4:	81 e0       	ldi	r24, 0x01	; 1
    72d6:	69 2f       	mov	r22, r25
    72d8:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
		Lcd_enuSendData(LCD_CLEAR_CELL);
    72dc:	80 e2       	ldi	r24, 0x20	; 32
    72de:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>

		Lcd_enuSetCursor(LCD_ROW_1 , Local_u8Iter);
    72e2:	81 e0       	ldi	r24, 0x01	; 1
    72e4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    72e6:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
		Lcd_enuSendData(LCD_PATTERN_3);
    72ea:	83 e0       	ldi	r24, 0x03	; 3
    72ec:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <Lcd_enuSendData>
    72f0:	80 e0       	ldi	r24, 0x00	; 0
    72f2:	90 e0       	ldi	r25, 0x00	; 0
    72f4:	a8 e4       	ldi	r26, 0x48	; 72
    72f6:	b2 e4       	ldi	r27, 0x42	; 66
    72f8:	89 8f       	std	Y+25, r24	; 0x19
    72fa:	9a 8f       	std	Y+26, r25	; 0x1a
    72fc:	ab 8f       	std	Y+27, r26	; 0x1b
    72fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7300:	69 8d       	ldd	r22, Y+25	; 0x19
    7302:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7304:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7306:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7308:	20 e0       	ldi	r18, 0x00	; 0
    730a:	30 e0       	ldi	r19, 0x00	; 0
    730c:	4a e7       	ldi	r20, 0x7A	; 122
    730e:	55 e4       	ldi	r21, 0x45	; 69
    7310:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    7314:	dc 01       	movw	r26, r24
    7316:	cb 01       	movw	r24, r22
    7318:	8d 8b       	std	Y+21, r24	; 0x15
    731a:	9e 8b       	std	Y+22, r25	; 0x16
    731c:	af 8b       	std	Y+23, r26	; 0x17
    731e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7320:	6d 89       	ldd	r22, Y+21	; 0x15
    7322:	7e 89       	ldd	r23, Y+22	; 0x16
    7324:	8f 89       	ldd	r24, Y+23	; 0x17
    7326:	98 8d       	ldd	r25, Y+24	; 0x18
    7328:	20 e0       	ldi	r18, 0x00	; 0
    732a:	30 e0       	ldi	r19, 0x00	; 0
    732c:	40 e8       	ldi	r20, 0x80	; 128
    732e:	5f e3       	ldi	r21, 0x3F	; 63
    7330:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    7334:	88 23       	and	r24, r24
    7336:	2c f4       	brge	.+10     	; 0x7342 <Animation_enuBeginAnimat+0x92>
		__ticks = 1;
    7338:	81 e0       	ldi	r24, 0x01	; 1
    733a:	90 e0       	ldi	r25, 0x00	; 0
    733c:	9c 8b       	std	Y+20, r25	; 0x14
    733e:	8b 8b       	std	Y+19, r24	; 0x13
    7340:	3f c0       	rjmp	.+126    	; 0x73c0 <Animation_enuBeginAnimat+0x110>
	else if (__tmp > 65535)
    7342:	6d 89       	ldd	r22, Y+21	; 0x15
    7344:	7e 89       	ldd	r23, Y+22	; 0x16
    7346:	8f 89       	ldd	r24, Y+23	; 0x17
    7348:	98 8d       	ldd	r25, Y+24	; 0x18
    734a:	20 e0       	ldi	r18, 0x00	; 0
    734c:	3f ef       	ldi	r19, 0xFF	; 255
    734e:	4f e7       	ldi	r20, 0x7F	; 127
    7350:	57 e4       	ldi	r21, 0x47	; 71
    7352:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    7356:	18 16       	cp	r1, r24
    7358:	4c f5       	brge	.+82     	; 0x73ac <Animation_enuBeginAnimat+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    735a:	69 8d       	ldd	r22, Y+25	; 0x19
    735c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    735e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7362:	20 e0       	ldi	r18, 0x00	; 0
    7364:	30 e0       	ldi	r19, 0x00	; 0
    7366:	40 e2       	ldi	r20, 0x20	; 32
    7368:	51 e4       	ldi	r21, 0x41	; 65
    736a:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    736e:	dc 01       	movw	r26, r24
    7370:	cb 01       	movw	r24, r22
    7372:	bc 01       	movw	r22, r24
    7374:	cd 01       	movw	r24, r26
    7376:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    737a:	dc 01       	movw	r26, r24
    737c:	cb 01       	movw	r24, r22
    737e:	9c 8b       	std	Y+20, r25	; 0x14
    7380:	8b 8b       	std	Y+19, r24	; 0x13
    7382:	0f c0       	rjmp	.+30     	; 0x73a2 <Animation_enuBeginAnimat+0xf2>
    7384:	80 e9       	ldi	r24, 0x90	; 144
    7386:	91 e0       	ldi	r25, 0x01	; 1
    7388:	9a 8b       	std	Y+18, r25	; 0x12
    738a:	89 8b       	std	Y+17, r24	; 0x11
    738c:	89 89       	ldd	r24, Y+17	; 0x11
    738e:	9a 89       	ldd	r25, Y+18	; 0x12
    7390:	01 97       	sbiw	r24, 0x01	; 1
    7392:	f1 f7       	brne	.-4      	; 0x7390 <Animation_enuBeginAnimat+0xe0>
    7394:	9a 8b       	std	Y+18, r25	; 0x12
    7396:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7398:	8b 89       	ldd	r24, Y+19	; 0x13
    739a:	9c 89       	ldd	r25, Y+20	; 0x14
    739c:	01 97       	sbiw	r24, 0x01	; 1
    739e:	9c 8b       	std	Y+20, r25	; 0x14
    73a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73a2:	8b 89       	ldd	r24, Y+19	; 0x13
    73a4:	9c 89       	ldd	r25, Y+20	; 0x14
    73a6:	00 97       	sbiw	r24, 0x00	; 0
    73a8:	69 f7       	brne	.-38     	; 0x7384 <Animation_enuBeginAnimat+0xd4>
    73aa:	14 c0       	rjmp	.+40     	; 0x73d4 <Animation_enuBeginAnimat+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73ac:	6d 89       	ldd	r22, Y+21	; 0x15
    73ae:	7e 89       	ldd	r23, Y+22	; 0x16
    73b0:	8f 89       	ldd	r24, Y+23	; 0x17
    73b2:	98 8d       	ldd	r25, Y+24	; 0x18
    73b4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    73b8:	dc 01       	movw	r26, r24
    73ba:	cb 01       	movw	r24, r22
    73bc:	9c 8b       	std	Y+20, r25	; 0x14
    73be:	8b 8b       	std	Y+19, r24	; 0x13
    73c0:	8b 89       	ldd	r24, Y+19	; 0x13
    73c2:	9c 89       	ldd	r25, Y+20	; 0x14
    73c4:	98 8b       	std	Y+16, r25	; 0x10
    73c6:	8f 87       	std	Y+15, r24	; 0x0f
    73c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    73ca:	98 89       	ldd	r25, Y+16	; 0x10
    73cc:	01 97       	sbiw	r24, 0x01	; 1
    73ce:	f1 f7       	brne	.-4      	; 0x73cc <Animation_enuBeginAnimat+0x11c>
    73d0:	98 8b       	std	Y+16, r25	; 0x10
    73d2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		if( Local_u8Iter == 15 ){
    73d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    73d6:	8f 30       	cpi	r24, 0x0F	; 15
    73d8:	09 f0       	breq	.+2      	; 0x73dc <Animation_enuBeginAnimat+0x12c>
    73da:	89 c0       	rjmp	.+274    	; 0x74ee <Animation_enuBeginAnimat+0x23e>

			Buzzer_enuAlertActivator();
    73dc:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <Buzzer_enuAlertActivator>
    73e0:	80 e0       	ldi	r24, 0x00	; 0
    73e2:	90 e0       	ldi	r25, 0x00	; 0
    73e4:	a8 e4       	ldi	r26, 0x48	; 72
    73e6:	b3 e4       	ldi	r27, 0x43	; 67
    73e8:	8b 87       	std	Y+11, r24	; 0x0b
    73ea:	9c 87       	std	Y+12, r25	; 0x0c
    73ec:	ad 87       	std	Y+13, r26	; 0x0d
    73ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    73f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    73f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    73f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    73f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    73f8:	20 e0       	ldi	r18, 0x00	; 0
    73fa:	30 e0       	ldi	r19, 0x00	; 0
    73fc:	4a e7       	ldi	r20, 0x7A	; 122
    73fe:	55 e4       	ldi	r21, 0x45	; 69
    7400:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    7404:	dc 01       	movw	r26, r24
    7406:	cb 01       	movw	r24, r22
    7408:	8f 83       	std	Y+7, r24	; 0x07
    740a:	98 87       	std	Y+8, r25	; 0x08
    740c:	a9 87       	std	Y+9, r26	; 0x09
    740e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7410:	6f 81       	ldd	r22, Y+7	; 0x07
    7412:	78 85       	ldd	r23, Y+8	; 0x08
    7414:	89 85       	ldd	r24, Y+9	; 0x09
    7416:	9a 85       	ldd	r25, Y+10	; 0x0a
    7418:	20 e0       	ldi	r18, 0x00	; 0
    741a:	30 e0       	ldi	r19, 0x00	; 0
    741c:	40 e8       	ldi	r20, 0x80	; 128
    741e:	5f e3       	ldi	r21, 0x3F	; 63
    7420:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ltsf2>
    7424:	88 23       	and	r24, r24
    7426:	2c f4       	brge	.+10     	; 0x7432 <Animation_enuBeginAnimat+0x182>
		__ticks = 1;
    7428:	81 e0       	ldi	r24, 0x01	; 1
    742a:	90 e0       	ldi	r25, 0x00	; 0
    742c:	9e 83       	std	Y+6, r25	; 0x06
    742e:	8d 83       	std	Y+5, r24	; 0x05
    7430:	3f c0       	rjmp	.+126    	; 0x74b0 <Animation_enuBeginAnimat+0x200>
	else if (__tmp > 65535)
    7432:	6f 81       	ldd	r22, Y+7	; 0x07
    7434:	78 85       	ldd	r23, Y+8	; 0x08
    7436:	89 85       	ldd	r24, Y+9	; 0x09
    7438:	9a 85       	ldd	r25, Y+10	; 0x0a
    743a:	20 e0       	ldi	r18, 0x00	; 0
    743c:	3f ef       	ldi	r19, 0xFF	; 255
    743e:	4f e7       	ldi	r20, 0x7F	; 127
    7440:	57 e4       	ldi	r21, 0x47	; 71
    7442:	0e 94 6f 05 	call	0xade	; 0xade <__gtsf2>
    7446:	18 16       	cp	r1, r24
    7448:	4c f5       	brge	.+82     	; 0x749c <Animation_enuBeginAnimat+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    744a:	6b 85       	ldd	r22, Y+11	; 0x0b
    744c:	7c 85       	ldd	r23, Y+12	; 0x0c
    744e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7450:	9e 85       	ldd	r25, Y+14	; 0x0e
    7452:	20 e0       	ldi	r18, 0x00	; 0
    7454:	30 e0       	ldi	r19, 0x00	; 0
    7456:	40 e2       	ldi	r20, 0x20	; 32
    7458:	51 e4       	ldi	r21, 0x41	; 65
    745a:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    745e:	dc 01       	movw	r26, r24
    7460:	cb 01       	movw	r24, r22
    7462:	bc 01       	movw	r22, r24
    7464:	cd 01       	movw	r24, r26
    7466:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    746a:	dc 01       	movw	r26, r24
    746c:	cb 01       	movw	r24, r22
    746e:	9e 83       	std	Y+6, r25	; 0x06
    7470:	8d 83       	std	Y+5, r24	; 0x05
    7472:	0f c0       	rjmp	.+30     	; 0x7492 <Animation_enuBeginAnimat+0x1e2>
    7474:	80 e9       	ldi	r24, 0x90	; 144
    7476:	91 e0       	ldi	r25, 0x01	; 1
    7478:	9c 83       	std	Y+4, r25	; 0x04
    747a:	8b 83       	std	Y+3, r24	; 0x03
    747c:	8b 81       	ldd	r24, Y+3	; 0x03
    747e:	9c 81       	ldd	r25, Y+4	; 0x04
    7480:	01 97       	sbiw	r24, 0x01	; 1
    7482:	f1 f7       	brne	.-4      	; 0x7480 <Animation_enuBeginAnimat+0x1d0>
    7484:	9c 83       	std	Y+4, r25	; 0x04
    7486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7488:	8d 81       	ldd	r24, Y+5	; 0x05
    748a:	9e 81       	ldd	r25, Y+6	; 0x06
    748c:	01 97       	sbiw	r24, 0x01	; 1
    748e:	9e 83       	std	Y+6, r25	; 0x06
    7490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7492:	8d 81       	ldd	r24, Y+5	; 0x05
    7494:	9e 81       	ldd	r25, Y+6	; 0x06
    7496:	00 97       	sbiw	r24, 0x00	; 0
    7498:	69 f7       	brne	.-38     	; 0x7474 <Animation_enuBeginAnimat+0x1c4>
    749a:	14 c0       	rjmp	.+40     	; 0x74c4 <Animation_enuBeginAnimat+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    749c:	6f 81       	ldd	r22, Y+7	; 0x07
    749e:	78 85       	ldd	r23, Y+8	; 0x08
    74a0:	89 85       	ldd	r24, Y+9	; 0x09
    74a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    74a4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    74a8:	dc 01       	movw	r26, r24
    74aa:	cb 01       	movw	r24, r22
    74ac:	9e 83       	std	Y+6, r25	; 0x06
    74ae:	8d 83       	std	Y+5, r24	; 0x05
    74b0:	8d 81       	ldd	r24, Y+5	; 0x05
    74b2:	9e 81       	ldd	r25, Y+6	; 0x06
    74b4:	9a 83       	std	Y+2, r25	; 0x02
    74b6:	89 83       	std	Y+1, r24	; 0x01
    74b8:	89 81       	ldd	r24, Y+1	; 0x01
    74ba:	9a 81       	ldd	r25, Y+2	; 0x02
    74bc:	01 97       	sbiw	r24, 0x01	; 1
    74be:	f1 f7       	brne	.-4      	; 0x74bc <Animation_enuBeginAnimat+0x20c>
    74c0:	9a 83       	std	Y+2, r25	; 0x02
    74c2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			Buzzer_enuSilenceDeactivation();
    74c4:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <Buzzer_enuSilenceDeactivation>

			Lcd_enuSendCommand(LCD_CLEAR_DISPLAY);
    74c8:	81 e0       	ldi	r24, 0x01	; 1
    74ca:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <Lcd_enuSendCommand>

			Lcd_enuSetCursor(LCD_ROW_1,LCD_COLUMN_7);
    74ce:	81 e0       	ldi	r24, 0x01	; 1
    74d0:	67 e0       	ldi	r22, 0x07	; 7
    74d2:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
			Lcd_enuSendString("Dead");
    74d6:	83 e8       	ldi	r24, 0x83	; 131
    74d8:	91 e0       	ldi	r25, 0x01	; 1
    74da:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>

			Lcd_enuSetCursor(LCD_ROW_2,LCD_COLUMN_5);
    74de:	82 e0       	ldi	r24, 0x02	; 2
    74e0:	65 e0       	ldi	r22, 0x05	; 5
    74e2:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Lcd_enuSetCursor>
			Lcd_enuSendString("Game Over");
    74e6:	88 e8       	ldi	r24, 0x88	; 136
    74e8:	91 e0       	ldi	r25, 0x01	; 1
    74ea:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Lcd_enuSendString>
	ES_t Local_enuErrorState = ES_NOK;


	u8 Local_u8Iter;

	for(Local_u8Iter = 4 ; Local_u8Iter < 16 ; Local_u8Iter++){
    74ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    74f0:	8f 5f       	subi	r24, 0xFF	; 255
    74f2:	8d 8f       	std	Y+29, r24	; 0x1d
    74f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    74f6:	80 31       	cpi	r24, 0x10	; 16
    74f8:	08 f4       	brcc	.+2      	; 0x74fc <Animation_enuBeginAnimat+0x24c>
    74fa:	e9 ce       	rjmp	.-558    	; 0x72ce <Animation_enuBeginAnimat+0x1e>
			Lcd_enuSendString("Game Over");

		}
	}

	return Local_enuErrorState;
    74fc:	8e 8d       	ldd	r24, Y+30	; 0x1e

}
    74fe:	6e 96       	adiw	r28, 0x1e	; 30
    7500:	0f b6       	in	r0, 0x3f	; 63
    7502:	f8 94       	cli
    7504:	de bf       	out	0x3e, r29	; 62
    7506:	0f be       	out	0x3f, r0	; 63
    7508:	cd bf       	out	0x3d, r28	; 61
    750a:	cf 91       	pop	r28
    750c:	df 91       	pop	r29
    750e:	08 95       	ret

00007510 <vidISRFunc>:
struct strFuncParameter{

	BOOL flag;
};

void vidISRFunc(void * Copy_pvidFuncParameters){
    7510:	df 93       	push	r29
    7512:	cf 93       	push	r28
    7514:	00 d0       	rcall	.+0      	; 0x7516 <vidISRFunc+0x6>
    7516:	00 d0       	rcall	.+0      	; 0x7518 <vidISRFunc+0x8>
    7518:	cd b7       	in	r28, 0x3d	; 61
    751a:	de b7       	in	r29, 0x3e	; 62
    751c:	9c 83       	std	Y+4, r25	; 0x04
    751e:	8b 83       	std	Y+3, r24	; 0x03
	struct strFuncParameter * Local_pstrFuncParameter = (struct strFuncParamter *) Copy_pvidFuncParameters;
    7520:	8b 81       	ldd	r24, Y+3	; 0x03
    7522:	9c 81       	ldd	r25, Y+4	; 0x04
    7524:	9a 83       	std	Y+2, r25	; 0x02
    7526:	89 83       	std	Y+1, r24	; 0x01
	Led_enuLedToggle(LED_RED_ID);
    7528:	81 e0       	ldi	r24, 0x01	; 1
    752a:	0e 94 a8 1b 	call	0x3750	; 0x3750 <Led_enuLedToggle>
	Local_pstrFuncParameter->flag = true;
    752e:	e9 81       	ldd	r30, Y+1	; 0x01
    7530:	fa 81       	ldd	r31, Y+2	; 0x02
    7532:	81 e0       	ldi	r24, 0x01	; 1
    7534:	80 83       	st	Z, r24

}
    7536:	0f 90       	pop	r0
    7538:	0f 90       	pop	r0
    753a:	0f 90       	pop	r0
    753c:	0f 90       	pop	r0
    753e:	cf 91       	pop	r28
    7540:	df 91       	pop	r29
    7542:	08 95       	ret

00007544 <main>:


int main(void){
    7544:	df 93       	push	r29
    7546:	cf 93       	push	r28
    7548:	0f 92       	push	r0
    754a:	cd b7       	in	r28, 0x3d	; 61
    754c:	de b7       	in	r29, 0x3e	; 62

	struct strFuncParameter Local_strFuncParameter = {false};
    754e:	19 82       	std	Y+1, r1	; 0x01

	TIMER_enuInit();
    7550:	0e 94 1f 09 	call	0x123e	; 0x123e <TIMER_enuInit>
	Led_enuInit();
    7554:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <Led_enuInit>
	DIO_enuSetPinDirection(DIO_GROUP_C,DIO_PIN_7,DIO_OUTPUT);
    7558:	82 e0       	ldi	r24, 0x02	; 2
    755a:	67 e0       	ldi	r22, 0x07	; 7
    755c:	41 e0       	ldi	r20, 0x01	; 1
    755e:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_GROUP_D,DIO_PIN_6,DIO_OUTPUT);
    7562:	83 e0       	ldi	r24, 0x03	; 3
    7564:	66 e0       	ldi	r22, 0x06	; 6
    7566:	41 e0       	ldi	r20, 0x01	; 1
    7568:	0e 94 4a 14 	call	0x2894	; 0x2894 <DIO_enuSetPinDirection>
	//TIMER_enuOVFEnable(TIMER_INT0);
	TIMER_enuSetCallBack(vidISRFunc,&Local_strFuncParameter);
    756c:	88 e8       	ldi	r24, 0x88	; 136
    756e:	9a e3       	ldi	r25, 0x3A	; 58
    7570:	9e 01       	movw	r18, r28
    7572:	2f 5f       	subi	r18, 0xFF	; 255
    7574:	3f 4f       	sbci	r19, 0xFF	; 255
    7576:	b9 01       	movw	r22, r18
    7578:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <TIMER_enuSetCallBack>
	GIE_vidEnable();
    757c:	0e 94 83 11 	call	0x2306	; 0x2306 <GIE_vidEnable>
	//Led_enuLedToggle(LED_GREEN_ID);
	TIMER_enuAsyncDelayms(TIMER_INT0,200);
    7580:	80 e0       	ldi	r24, 0x00	; 0
    7582:	68 ec       	ldi	r22, 0xC8	; 200
    7584:	70 e0       	ldi	r23, 0x00	; 0
    7586:	0e 94 98 0b 	call	0x1730	; 0x1730 <TIMER_enuAsyncDelayms>
	//Led_enuLedToggle(LED_GREEN_ID);

	while(1){

		if(Local_strFuncParameter.flag == true){
    758a:	89 81       	ldd	r24, Y+1	; 0x01
    758c:	81 30       	cpi	r24, 0x01	; 1
    758e:	e9 f7       	brne	.-6      	; 0x758a <main+0x46>
			Led_enuLedToggle(LED_GREEN_ID);
    7590:	80 e0       	ldi	r24, 0x00	; 0
    7592:	0e 94 a8 1b 	call	0x3750	; 0x3750 <Led_enuLedToggle>
			Local_strFuncParameter.flag = false;
    7596:	19 82       	std	Y+1, r1	; 0x01
    7598:	f8 cf       	rjmp	.-16     	; 0x758a <main+0x46>

0000759a <__mulsi3>:
    759a:	62 9f       	mul	r22, r18
    759c:	d0 01       	movw	r26, r0
    759e:	73 9f       	mul	r23, r19
    75a0:	f0 01       	movw	r30, r0
    75a2:	82 9f       	mul	r24, r18
    75a4:	e0 0d       	add	r30, r0
    75a6:	f1 1d       	adc	r31, r1
    75a8:	64 9f       	mul	r22, r20
    75aa:	e0 0d       	add	r30, r0
    75ac:	f1 1d       	adc	r31, r1
    75ae:	92 9f       	mul	r25, r18
    75b0:	f0 0d       	add	r31, r0
    75b2:	83 9f       	mul	r24, r19
    75b4:	f0 0d       	add	r31, r0
    75b6:	74 9f       	mul	r23, r20
    75b8:	f0 0d       	add	r31, r0
    75ba:	65 9f       	mul	r22, r21
    75bc:	f0 0d       	add	r31, r0
    75be:	99 27       	eor	r25, r25
    75c0:	72 9f       	mul	r23, r18
    75c2:	b0 0d       	add	r27, r0
    75c4:	e1 1d       	adc	r30, r1
    75c6:	f9 1f       	adc	r31, r25
    75c8:	63 9f       	mul	r22, r19
    75ca:	b0 0d       	add	r27, r0
    75cc:	e1 1d       	adc	r30, r1
    75ce:	f9 1f       	adc	r31, r25
    75d0:	bd 01       	movw	r22, r26
    75d2:	cf 01       	movw	r24, r30
    75d4:	11 24       	eor	r1, r1
    75d6:	08 95       	ret

000075d8 <__udivmodqi4>:
    75d8:	99 1b       	sub	r25, r25
    75da:	79 e0       	ldi	r23, 0x09	; 9
    75dc:	04 c0       	rjmp	.+8      	; 0x75e6 <__udivmodqi4_ep>

000075de <__udivmodqi4_loop>:
    75de:	99 1f       	adc	r25, r25
    75e0:	96 17       	cp	r25, r22
    75e2:	08 f0       	brcs	.+2      	; 0x75e6 <__udivmodqi4_ep>
    75e4:	96 1b       	sub	r25, r22

000075e6 <__udivmodqi4_ep>:
    75e6:	88 1f       	adc	r24, r24
    75e8:	7a 95       	dec	r23
    75ea:	c9 f7       	brne	.-14     	; 0x75de <__udivmodqi4_loop>
    75ec:	80 95       	com	r24
    75ee:	08 95       	ret

000075f0 <__udivmodhi4>:
    75f0:	aa 1b       	sub	r26, r26
    75f2:	bb 1b       	sub	r27, r27
    75f4:	51 e1       	ldi	r21, 0x11	; 17
    75f6:	07 c0       	rjmp	.+14     	; 0x7606 <__udivmodhi4_ep>

000075f8 <__udivmodhi4_loop>:
    75f8:	aa 1f       	adc	r26, r26
    75fa:	bb 1f       	adc	r27, r27
    75fc:	a6 17       	cp	r26, r22
    75fe:	b7 07       	cpc	r27, r23
    7600:	10 f0       	brcs	.+4      	; 0x7606 <__udivmodhi4_ep>
    7602:	a6 1b       	sub	r26, r22
    7604:	b7 0b       	sbc	r27, r23

00007606 <__udivmodhi4_ep>:
    7606:	88 1f       	adc	r24, r24
    7608:	99 1f       	adc	r25, r25
    760a:	5a 95       	dec	r21
    760c:	a9 f7       	brne	.-22     	; 0x75f8 <__udivmodhi4_loop>
    760e:	80 95       	com	r24
    7610:	90 95       	com	r25
    7612:	bc 01       	movw	r22, r24
    7614:	cd 01       	movw	r24, r26
    7616:	08 95       	ret

00007618 <__udivmodsi4>:
    7618:	a1 e2       	ldi	r26, 0x21	; 33
    761a:	1a 2e       	mov	r1, r26
    761c:	aa 1b       	sub	r26, r26
    761e:	bb 1b       	sub	r27, r27
    7620:	fd 01       	movw	r30, r26
    7622:	0d c0       	rjmp	.+26     	; 0x763e <__udivmodsi4_ep>

00007624 <__udivmodsi4_loop>:
    7624:	aa 1f       	adc	r26, r26
    7626:	bb 1f       	adc	r27, r27
    7628:	ee 1f       	adc	r30, r30
    762a:	ff 1f       	adc	r31, r31
    762c:	a2 17       	cp	r26, r18
    762e:	b3 07       	cpc	r27, r19
    7630:	e4 07       	cpc	r30, r20
    7632:	f5 07       	cpc	r31, r21
    7634:	20 f0       	brcs	.+8      	; 0x763e <__udivmodsi4_ep>
    7636:	a2 1b       	sub	r26, r18
    7638:	b3 0b       	sbc	r27, r19
    763a:	e4 0b       	sbc	r30, r20
    763c:	f5 0b       	sbc	r31, r21

0000763e <__udivmodsi4_ep>:
    763e:	66 1f       	adc	r22, r22
    7640:	77 1f       	adc	r23, r23
    7642:	88 1f       	adc	r24, r24
    7644:	99 1f       	adc	r25, r25
    7646:	1a 94       	dec	r1
    7648:	69 f7       	brne	.-38     	; 0x7624 <__udivmodsi4_loop>
    764a:	60 95       	com	r22
    764c:	70 95       	com	r23
    764e:	80 95       	com	r24
    7650:	90 95       	com	r25
    7652:	9b 01       	movw	r18, r22
    7654:	ac 01       	movw	r20, r24
    7656:	bd 01       	movw	r22, r26
    7658:	cf 01       	movw	r24, r30
    765a:	08 95       	ret

0000765c <__divmodsi4>:
    765c:	97 fb       	bst	r25, 7
    765e:	09 2e       	mov	r0, r25
    7660:	05 26       	eor	r0, r21
    7662:	0e d0       	rcall	.+28     	; 0x7680 <__divmodsi4_neg1>
    7664:	57 fd       	sbrc	r21, 7
    7666:	04 d0       	rcall	.+8      	; 0x7670 <__divmodsi4_neg2>
    7668:	d7 df       	rcall	.-82     	; 0x7618 <__udivmodsi4>
    766a:	0a d0       	rcall	.+20     	; 0x7680 <__divmodsi4_neg1>
    766c:	00 1c       	adc	r0, r0
    766e:	38 f4       	brcc	.+14     	; 0x767e <__divmodsi4_exit>

00007670 <__divmodsi4_neg2>:
    7670:	50 95       	com	r21
    7672:	40 95       	com	r20
    7674:	30 95       	com	r19
    7676:	21 95       	neg	r18
    7678:	3f 4f       	sbci	r19, 0xFF	; 255
    767a:	4f 4f       	sbci	r20, 0xFF	; 255
    767c:	5f 4f       	sbci	r21, 0xFF	; 255

0000767e <__divmodsi4_exit>:
    767e:	08 95       	ret

00007680 <__divmodsi4_neg1>:
    7680:	f6 f7       	brtc	.-4      	; 0x767e <__divmodsi4_exit>
    7682:	90 95       	com	r25
    7684:	80 95       	com	r24
    7686:	70 95       	com	r23
    7688:	61 95       	neg	r22
    768a:	7f 4f       	sbci	r23, 0xFF	; 255
    768c:	8f 4f       	sbci	r24, 0xFF	; 255
    768e:	9f 4f       	sbci	r25, 0xFF	; 255
    7690:	08 95       	ret

00007692 <__prologue_saves__>:
    7692:	2f 92       	push	r2
    7694:	3f 92       	push	r3
    7696:	4f 92       	push	r4
    7698:	5f 92       	push	r5
    769a:	6f 92       	push	r6
    769c:	7f 92       	push	r7
    769e:	8f 92       	push	r8
    76a0:	9f 92       	push	r9
    76a2:	af 92       	push	r10
    76a4:	bf 92       	push	r11
    76a6:	cf 92       	push	r12
    76a8:	df 92       	push	r13
    76aa:	ef 92       	push	r14
    76ac:	ff 92       	push	r15
    76ae:	0f 93       	push	r16
    76b0:	1f 93       	push	r17
    76b2:	cf 93       	push	r28
    76b4:	df 93       	push	r29
    76b6:	cd b7       	in	r28, 0x3d	; 61
    76b8:	de b7       	in	r29, 0x3e	; 62
    76ba:	ca 1b       	sub	r28, r26
    76bc:	db 0b       	sbc	r29, r27
    76be:	0f b6       	in	r0, 0x3f	; 63
    76c0:	f8 94       	cli
    76c2:	de bf       	out	0x3e, r29	; 62
    76c4:	0f be       	out	0x3f, r0	; 63
    76c6:	cd bf       	out	0x3d, r28	; 61
    76c8:	09 94       	ijmp

000076ca <__epilogue_restores__>:
    76ca:	2a 88       	ldd	r2, Y+18	; 0x12
    76cc:	39 88       	ldd	r3, Y+17	; 0x11
    76ce:	48 88       	ldd	r4, Y+16	; 0x10
    76d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    76d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    76d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    76d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    76d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    76da:	aa 84       	ldd	r10, Y+10	; 0x0a
    76dc:	b9 84       	ldd	r11, Y+9	; 0x09
    76de:	c8 84       	ldd	r12, Y+8	; 0x08
    76e0:	df 80       	ldd	r13, Y+7	; 0x07
    76e2:	ee 80       	ldd	r14, Y+6	; 0x06
    76e4:	fd 80       	ldd	r15, Y+5	; 0x05
    76e6:	0c 81       	ldd	r16, Y+4	; 0x04
    76e8:	1b 81       	ldd	r17, Y+3	; 0x03
    76ea:	aa 81       	ldd	r26, Y+2	; 0x02
    76ec:	b9 81       	ldd	r27, Y+1	; 0x01
    76ee:	ce 0f       	add	r28, r30
    76f0:	d1 1d       	adc	r29, r1
    76f2:	0f b6       	in	r0, 0x3f	; 63
    76f4:	f8 94       	cli
    76f6:	de bf       	out	0x3e, r29	; 62
    76f8:	0f be       	out	0x3f, r0	; 63
    76fa:	cd bf       	out	0x3d, r28	; 61
    76fc:	ed 01       	movw	r28, r26
    76fe:	08 95       	ret

00007700 <_exit>:
    7700:	f8 94       	cli

00007702 <__stop_program>:
    7702:	ff cf       	rjmp	.-2      	; 0x7702 <__stop_program>
